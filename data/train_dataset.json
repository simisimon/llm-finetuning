{"output":"#include <stdio.h>\n\nint square_sum(int n) {\n    int sum = 0;\n    int i;\n    for (i = 0; i <= n; i++)\n        sum += i * i;\n    return sum;\n}\n\nint main() {\n    printf(\"Sum of squares till 10 is %d\\n\", square_sum(10));\n    return 0;\n}","instruction":"Write an optimized algorithm in C to compute the sum of the first n squares.","input":"Not applicable","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Write an optimized algorithm in C to compute the sum of the first n squares. \n\n### Input: Not applicable [\/INST] \n\n#include <stdio.h>\n\nint square_sum(int n) {\n    int sum = 0;\n    int i;\n    for (i = 0; i <= n; i++)\n        sum += i * i;\n    return sum;\n}\n\nint main() {\n    printf(\"Sum of squares till 10 is %d\\n\", square_sum(10));\n    return 0;\n}<\/s>"}
{"output":"<button><a href=\"www.example.com\">Go to example.com<\/a><\/button>","instruction":"Write an HTML code snippet to create a button that links to www.example.com","input":"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Write an HTML code snippet to create a button that links to www.example.com \n\n### Input:  [\/INST] \n\n<button><a href=\"www.example.com\">Go to example.com<\/a><\/button><\/s>"}
{"output":"def sum_numbers(n):\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total","instruction":"Generate a Python program that adds all numbers from 1 to a given number n.","input":"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Generate a Python program that adds all numbers from 1 to a given number n. \n\n### Input:  [\/INST] \n\ndef sum_numbers(n):\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total<\/s>"}
{"output":"import tensorflow as tf\n\nmnist = tf.keras.datasets.mnist\n\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\nx_train, x_test = x_train \/ 255.0, x_test \/ 255.0\n\nmodel = tf.keras.models.Sequential([\n  tf.keras.layers.Flatten(input_shape=(28, 28)),\n  tf.keras.layers.Dense(128, activation='relu'),\n  tf.keras.layers.Dropout(0.2),\n  tf.keras.layers.Dense(10)\n])\n\npredictions = model(x_train[:1]).numpy()\n\nloss_fn = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True)\n\nmodel.compile(optimizer='adam',\n              loss=loss_fn,\n              metrics=['accuracy'])\n\nmodel.fit(x_train, y_train, epochs=5)\n\nmodel.evaluate(x_test,  y_test, verbose=2)","instruction":"Build a model in TensorFlow to classify handwritten digits.","input":"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Build a model in TensorFlow to classify handwritten digits. \n\n### Input:  [\/INST] \n\nimport tensorflow as tf\n\nmnist = tf.keras.datasets.mnist\n\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\nx_train, x_test = x_train \/ 255.0, x_test \/ 255.0\n\nmodel = tf.keras.models.Sequential([\n  tf.keras.layers.Flatten(input_shape=(28, 28)),\n  tf.keras.layers.Dense(128, activation='relu'),\n  tf.keras.layers.Dropout(0.2),\n  tf.keras.layers.Dense(10)\n])\n\npredictions = model(x_train[:1]).numpy()\n\nloss_fn = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True)\n\nmodel.compile(optimizer='adam',\n              loss=loss_fn,\n              metrics=['accuracy'])\n\nmodel.fit(x_train, y_train, epochs=5)\n\nmodel.evaluate(x_test,  y_test, verbose=2)<\/s>"}
{"output":"def power(num, pow):\n return num**pow","instruction":"Create a function in Python to calculate the power of a number.","input":"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a function in Python to calculate the power of a number. \n\n### Input:  [\/INST] \n\ndef power(num, pow):\n return num**pow<\/s>"}
{"output":"def longest_matching_words(text, words):\n    # TODO: Implement your algorithm here\n    longest_words = []\n    # Here you can use any string matching algorithms to find the longest words\n    return longest_words","instruction":"Develop an algorithm which takes a text and a dictionary of words as input and finds the longest matching words in the text.","input":"Text: \"catalog\" Dictionary: [\"cat\", \"ca\", \"dog\", \"log\", \"apple\"]","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Develop an algorithm which takes a text and a dictionary of words as input and finds the longest matching words in the text. \n\n### Input: Text: \"catalog\" Dictionary: [\"cat\", \"ca\", \"dog\", \"log\", \"apple\"] [\/INST] \n\ndef longest_matching_words(text, words):\n    # TODO: Implement your algorithm here\n    longest_words = []\n    # Here you can use any string matching algorithms to find the longest words\n    return longest_words<\/s>"}
{"output":"public class CompareStrings {\n public static void main(String[] args) {\n  \n  String str1 = \"Hello World\";\n  String str2 = \"HELLO WORLD\";\n\n  if (str1.equalsIgnoreCase(str2)) {\n   System.out.println(\"The strings are equal\");\n  } else {\n   System.out.println(\"The strings are not equal\");\n  }\n }\n}","instruction":"Generate a Java program to compare two strings ignoring the case of the characters and logging the result.","input":"str1 = \"Hello World\"\nstr2 = \"HELLO WORLD\"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Generate a Java program to compare two strings ignoring the case of the characters and logging the result. \n\n### Input: str1 = \"Hello World\"\nstr2 = \"HELLO WORLD\" [\/INST] \n\npublic class CompareStrings {\n public static void main(String[] args) {\n  \n  String str1 = \"Hello World\";\n  String str2 = \"HELLO WORLD\";\n\n  if (str1.equalsIgnoreCase(str2)) {\n   System.out.println(\"The strings are equal\");\n  } else {\n   System.out.println(\"The strings are not equal\");\n  }\n }\n}<\/s>"}
{"output":"CREATE TABLE users (\n id INTEGER PRIMARY KEY AUTO_INCREMENT,\n name VARCHAR(100),\n age INTEGER,\n country VARCHAR(50)\n);","instruction":"Create a database table for storing users with columns for name, age, and country.","input":"Not applicable","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a database table for storing users with columns for name, age, and country. \n\n### Input: Not applicable [\/INST] \n\nCREATE TABLE users (\n id INTEGER PRIMARY KEY AUTO_INCREMENT,\n name VARCHAR(100),\n age INTEGER,\n country VARCHAR(50)\n);<\/s>"}
{"output":"MOV R0, #23\nMOV R1, #4\nMOV R2, #15\n\nMOV R3, R0\nCMP R3, R1\nBLT GREATER\nMOV R3, R1\n\nGREATER:\nCMP R3, R2\nBLT EXIT\nMOV R3, R2\n\nEXIT:\nMOV r4, r3 ;save maximum in R4\nMOV r1, 0 ;code to print the maximum\nMOV r0, #1\nMOV r2, r4\nSYSCALL ;syscall for printing an integer\n\nMOV r0, r4 ;exit from the program\nSVC #1","instruction":"Write an assembly program that takes three numbers as input and prints out the maximum number.","input":"23, 4, 15","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Write an assembly program that takes three numbers as input and prints out the maximum number. \n\n### Input: 23, 4, 15 [\/INST] \n\nMOV R0, #23\nMOV R1, #4\nMOV R2, #15\n\nMOV R3, R0\nCMP R3, R1\nBLT GREATER\nMOV R3, R1\n\nGREATER:\nCMP R3, R2\nBLT EXIT\nMOV R3, R2\n\nEXIT:\nMOV r4, r3 ;save maximum in R4\nMOV r1, 0 ;code to print the maximum\nMOV r0, #1\nMOV r2, r4\nSYSCALL ;syscall for printing an integer\n\nMOV r0, r4 ;exit from the program\nSVC #1<\/s>"}
{"output":"SELECT customer_id, order_id, total_price FROM Orders;","instruction":"Create a SELECT query in SQL to retrieve a list of customer IDs, order IDs, and total prices from the Orders table.","input":"Not applicable","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a SELECT query in SQL to retrieve a list of customer IDs, order IDs, and total prices from the Orders table. \n\n### Input: Not applicable [\/INST] \n\nSELECT customer_id, order_id, total_price FROM Orders;<\/s>"}
{"output":"def fibonacci_numbers(n): \n    fibonacci_list = [0, 1] \n    for i in range(2, n): \n        fibonacci_list.append(fibonacci_list[i-1] + fibonacci_list[i-2]) \n    return fibonacci_list \n\n# Calling the function\nprint(fibonacci_numbers(50))","instruction":"Create a function to calculate the first 50 Fibonacci numbers","input":"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a function to calculate the first 50 Fibonacci numbers \n\n### Input:  [\/INST] \n\ndef fibonacci_numbers(n): \n    fibonacci_list = [0, 1] \n    for i in range(2, n): \n        fibonacci_list.append(fibonacci_list[i-1] + fibonacci_list[i-2]) \n    return fibonacci_list \n\n# Calling the function\nprint(fibonacci_numbers(50))<\/s>"}
{"output":"const sumAndAverage = (numbers: Array<number>) => {\n let sum = 0;\n let avg = 0;\n\n numbers.forEach((number) => {\n sum += number;\n avg += number \/ numbers.length;\n });\n\n return { sum, avg };\n};","instruction":"Create a TypeScript function that will take in an array of numbers and will return an object with two properties. The first property will be the sum of the numbers in the array, and the second property will be the average of the numbers in the array.","input":"[1, 2, 3, 4]","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a TypeScript function that will take in an array of numbers and will return an object with two properties. The first property will be the sum of the numbers in the array, and the second property will be the average of the numbers in the array. \n\n### Input: [1, 2, 3, 4] [\/INST] \n\nconst sumAndAverage = (numbers: Array<number>) => {\n let sum = 0;\n let avg = 0;\n\n numbers.forEach((number) => {\n sum += number;\n avg += number \/ numbers.length;\n });\n\n return { sum, avg };\n};<\/s>"}
{"output":"def fix_string(s): \n    s = s.replace(\" \", \"\") \n    s = s.lower() \n    s = \"\".join(reversed(s)) \n    return s","instruction":"Rewrite the following JavaScript string-manipulation function in Python.","input":"function fix_string(s) {\n  s = s.replace(\/\\s\/g, '');\n  s = s.toLowerCase();\n  s = s.split('').reverse().join('');\n  return s;\n}","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Rewrite the following JavaScript string-manipulation function in Python. \n\n### Input: function fix_string(s) {\n  s = s.replace(\/\\s\/g, '');\n  s = s.toLowerCase();\n  s = s.split('').reverse().join('');\n  return s;\n} [\/INST] \n\ndef fix_string(s): \n    s = s.replace(\" \", \"\") \n    s = s.lower() \n    s = \"\".join(reversed(s)) \n    return s<\/s>"}
{"output":"import {Component, Inject} from '@angular\/core';\nimport {HttpClient} from '@angular\/common\/http';\n\n@Component({\n selector: 'app-root',\n template: `\n <div>\n <h1>User Input<\/h1>\n <input type=\"text\" [(ngModel)]=\"input\" \/>\n <button (click)=\"addInputToList()\">Add<\/button>\n <ul>\n <li *ngFor=\"let item of list\">{{ item }}<\/li>\n <\/ul>\n <\/div>\n `\n})\nexport class AppComponent {\n input: string;\n list: string[] = [];\n\n constructor(private http: HttpClient, @Inject('BASE_URL') private baseUrl: string) { }\n\n addInputToList() {\n this.list.push(this.input);\n this.http.post(this.baseUrl + 'api\/Input\/Add', { input: this.input }).subscribe();\n }\n}","instruction":"Create a basic Angular application that takes user input, displays it in a list, and stores the user input in a database.","input":"Not applicable","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a basic Angular application that takes user input, displays it in a list, and stores the user input in a database. \n\n### Input: Not applicable [\/INST] \n\nimport {Component, Inject} from '@angular\/core';\nimport {HttpClient} from '@angular\/common\/http';\n\n@Component({\n selector: 'app-root',\n template: `\n <div>\n <h1>User Input<\/h1>\n <input type=\"text\" [(ngModel)]=\"input\" \/>\n <button (click)=\"addInputToList()\">Add<\/button>\n <ul>\n <li *ngFor=\"let item of list\">{{ item }}<\/li>\n <\/ul>\n <\/div>\n `\n})\nexport class AppComponent {\n input: string;\n list: string[] = [];\n\n constructor(private http: HttpClient, @Inject('BASE_URL') private baseUrl: string) { }\n\n addInputToList() {\n this.list.push(this.input);\n this.http.post(this.baseUrl + 'api\/Input\/Add', { input: this.input }).subscribe();\n }\n}<\/s>"}
{"output":"from flask import Flask, render_template, request\n\n# Initialize the Flask application\napp = Flask(__name__)\n\n# Define the operations\ndef add(num1, num2):\n return num1 + num2\n\ndef subtract(num1, num2):\n return num1 - num2\n\ndef multiply(num1, num2):\n return num1 * num2\n\ndef divide(num1, num2):\n return num1 \/ num2\n\n# Define the route for the calculator\n@app.route(\"\/\", methods=[\"GET\", \"POST\"])\ndef calculator():\n if request.method == \"POST\":\n # Get the inputs\n num1 = float(request.form.get('num1'))\n num2 = float(request.form.get('num2'))\n op = request.form.get('op')\n\n # Calculate the result\n if op == 'add':\n result = add(num1, num2)\n elif op == 'subtract':\n result = subtract(num1, num2)\n elif op == 'multiply':\n result = multiply(num1, num2)\n elif op == 'divide':\n result = divide(num1, num2)\n\n # Render the template\n return render_template('calculator.html', result=result, num1=num1, num2=num2, op=op)\n \n return render_template('calculator.html')\n\napp.run(debug=True)","instruction":"Create a basic calculator web application using a Flask framework. The user should be able to input two numbers and select a mathematical operation from a dropdown list (for example, add, subtract, multiply, and divide).","input":"N\/A","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a basic calculator web application using a Flask framework. The user should be able to input two numbers and select a mathematical operation from a dropdown list (for example, add, subtract, multiply, and divide). \n\n### Input: N\/A [\/INST] \n\nfrom flask import Flask, render_template, request\n\n# Initialize the Flask application\napp = Flask(__name__)\n\n# Define the operations\ndef add(num1, num2):\n return num1 + num2\n\ndef subtract(num1, num2):\n return num1 - num2\n\ndef multiply(num1, num2):\n return num1 * num2\n\ndef divide(num1, num2):\n return num1 \/ num2\n\n# Define the route for the calculator\n@app.route(\"\/\", methods=[\"GET\", \"POST\"])\ndef calculator():\n if request.method == \"POST\":\n # Get the inputs\n num1 = float(request.form.get('num1'))\n num2 = float(request.form.get('num2'))\n op = request.form.get('op')\n\n # Calculate the result\n if op == 'add':\n result = add(num1, num2)\n elif op == 'subtract':\n result = subtract(num1, num2)\n elif op == 'multiply':\n result = multiply(num1, num2)\n elif op == 'divide':\n result = divide(num1, num2)\n\n # Render the template\n return render_template('calculator.html', result=result, num1=num1, num2=num2, op=op)\n \n return render_template('calculator.html')\n\napp.run(debug=True)<\/s>"}
{"output":"let array = [1, 2, 3, 4, 5];\nlet sum = 0;\nfor (let i = 0; i < array.length; i++) {\n    sum += array[i];\n}\n\nlet average = sum\/array.length;\nconsole.log(average);","instruction":"Create a JavaScript code that takes the average of a range of numbers.","input":"[1,2,3,4,5]","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a JavaScript code that takes the average of a range of numbers. \n\n### Input: [1,2,3,4,5] [\/INST] \n\nlet array = [1, 2, 3, 4, 5];\nlet sum = 0;\nfor (let i = 0; i < array.length; i++) {\n    sum += array[i];\n}\n\nlet average = sum\/array.length;\nconsole.log(average);<\/s>"}
{"output":"const options = [\"Apple\", \"Orange\", \"Banana\"];\n\nconst select = document.getElementById(\"dropdown\");\n\noptions.forEach((option) => {\n    const opt = document.createElement(\"option\");\n    opt.value = option;\n    opt.innerHTML = option;\n    select.appendChild(opt);\n});","instruction":"Create a JavaScript code to populate a dropdown list based on a given array.","input":"[\"Apple\", \"Orange\", \"Banana\"]","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a JavaScript code to populate a dropdown list based on a given array. \n\n### Input: [\"Apple\", \"Orange\", \"Banana\"] [\/INST] \n\nconst options = [\"Apple\", \"Orange\", \"Banana\"];\n\nconst select = document.getElementById(\"dropdown\");\n\noptions.forEach((option) => {\n    const opt = document.createElement(\"option\");\n    opt.value = option;\n    opt.innerHTML = option;\n    select.appendChild(opt);\n});<\/s>"}
{"output":"#include<stdio.h>\n\nint main()\n{\n    int n, i, c;\n    n = 8;\n\n    printf(\"The first %d prime numbers are :\\n\", n);\n    for (i=2;i<=n;i++)\n    {\n        c=0;\n        for (int j=2; j<i; j++)\n        {\n            if (i%j == 0)\n            {\n                c++;\n                break;\n            }\n        }\n        if (c==0)\n        {\n            printf(\"%d  \", i);\n        }\n    }\n    return 0;\n}","instruction":"Construct a C program to generate the first 8 prime numbers.","input":"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Construct a C program to generate the first 8 prime numbers. \n\n### Input:  [\/INST] \n\n#include<stdio.h>\n\nint main()\n{\n    int n, i, c;\n    n = 8;\n\n    printf(\"The first %d prime numbers are :\\n\", n);\n    for (i=2;i<=n;i++)\n    {\n        c=0;\n        for (int j=2; j<i; j++)\n        {\n            if (i%j == 0)\n            {\n                c++;\n                break;\n            }\n        }\n        if (c==0)\n        {\n            printf(\"%d  \", i);\n        }\n    }\n    return 0;\n}<\/s>"}
{"output":"def quick_sort(arr):\n  if len(arr) <= 1:\n    return arr\n\n  pivot = arr[len(arr) \/\/ 2]\n  left = [x for x in arr if x < pivot]\n  middle = [x for x in arr if x == pivot]\n  right = [x for x in arr if x > pivot]\n\n  return quick_sort(left) + middle + quick_sort(right)","instruction":"Create a quick sort algorithm to sort a list of numbers from least to greatest.","input":"[4,1,7,3,9,8]","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a quick sort algorithm to sort a list of numbers from least to greatest. \n\n### Input: [4,1,7,3,9,8] [\/INST] \n\ndef quick_sort(arr):\n  if len(arr) <= 1:\n    return arr\n\n  pivot = arr[len(arr) \/\/ 2]\n  left = [x for x in arr if x < pivot]\n  middle = [x for x in arr if x == pivot]\n  right = [x for x in arr if x > pivot]\n\n  return quick_sort(left) + middle + quick_sort(right)<\/s>"}
{"output":"def SumOfSeries(n): \n    seriesSum = 0\n    for num in range(1, n+1): \n        seriesSum += 1\/num  \n    return round(seriesSum, 2) \n\n# Driver code \nn = 5\nprint(\"Sum of the series up to number:\", n, \n                    \"is\", SumOfSeries(n))","instruction":"Develop a program in Python to calculate the sum of the following series:","input":"1 + 1\/2 + 1\/3 + ... + 1\/n","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Develop a program in Python to calculate the sum of the following series: \n\n### Input: 1 + 1\/2 + 1\/3 + ... + 1\/n [\/INST] \n\ndef SumOfSeries(n): \n    seriesSum = 0\n    for num in range(1, n+1): \n        seriesSum += 1\/num  \n    return round(seriesSum, 2) \n\n# Driver code \nn = 5\nprint(\"Sum of the series up to number:\", n, \n                    \"is\", SumOfSeries(n))<\/s>"}
{"output":"# Define the list of numbers\nnumbers = [1, 2, 3, 4, 5]\n\n# Format the list\nformatted_list = \"\\n\".join([str(num) for num in numbers])\n\n# Print the formatted list\nprint(formatted_list)\n\nOutput:\n1\n2\n3\n4\n5","instruction":"Format a list of numbers so that each number appears on its own line.","input":"numbers = [1, 2, 3, 4, 5]","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Format a list of numbers so that each number appears on its own line. \n\n### Input: numbers = [1, 2, 3, 4, 5] [\/INST] \n\n# Define the list of numbers\nnumbers = [1, 2, 3, 4, 5]\n\n# Format the list\nformatted_list = \"\\n\".join([str(num) for num in numbers])\n\n# Print the formatted list\nprint(formatted_list)\n\nOutput:\n1\n2\n3\n4\n5<\/s>"}
{"output":"\"\"\"\nA simple linear regression model implementation\n\"\"\"\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the model parameters \nm = 10\nc = 8\n\n# Define the input and output \nx_1 = [1, 2, 2.5, 3, 4, 5]\ny_1 = [m * i + c for i in x_1]\n\n# Define a linear regression model and generate predicted output \ndef linear_regression(x, y):\n    # Calculate the coefficients \n    m_opt, c_opt = np.polyfit(x, y, 1)\n\n    # Generate predicted output \n    y_pred = [m_opt * i + c_opt for i in x]\n    \n    return y_pred\n\n# Generate predicted output\ny_pred = linear_regression(x_1, y_1)\n\n# Print the output\nprint('Predicted Output:', y_pred)\n\n# Plot the predicted output\nplt.plot(x_1, y_1, '-r', label='Original data points')\nplt.plot(x_1, y_pred, '-b', label='Fitted line')\nplt.title('Linear Regression Model')\nplt.legend()\nplt.show()","instruction":"Write a code to implement a simple linear regression model and print the output.","input":"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Write a code to implement a simple linear regression model and print the output. \n\n### Input:  [\/INST] \n\n\"\"\"\nA simple linear regression model implementation\n\"\"\"\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the model parameters \nm = 10\nc = 8\n\n# Define the input and output \nx_1 = [1, 2, 2.5, 3, 4, 5]\ny_1 = [m * i + c for i in x_1]\n\n# Define a linear regression model and generate predicted output \ndef linear_regression(x, y):\n    # Calculate the coefficients \n    m_opt, c_opt = np.polyfit(x, y, 1)\n\n    # Generate predicted output \n    y_pred = [m_opt * i + c_opt for i in x]\n    \n    return y_pred\n\n# Generate predicted output\ny_pred = linear_regression(x_1, y_1)\n\n# Print the output\nprint('Predicted Output:', y_pred)\n\n# Plot the predicted output\nplt.plot(x_1, y_1, '-r', label='Original data points')\nplt.plot(x_1, y_pred, '-b', label='Fitted line')\nplt.title('Linear Regression Model')\nplt.legend()\nplt.show()<\/s>"}
{"output":"my_vector <- c(1, 3, 5, 7)\n\naverage_vector <- function(x) {\n    return (sum(x)\/length(x))\n}\n\nprint(average_vector(my_vector))","instruction":"Write a function in R that accepts a vector of numbers as a parameter and computes the average of all the numbers","input":"1, 3, 5, 7","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Write a function in R that accepts a vector of numbers as a parameter and computes the average of all the numbers \n\n### Input: 1, 3, 5, 7 [\/INST] \n\nmy_vector <- c(1, 3, 5, 7)\n\naverage_vector <- function(x) {\n    return (sum(x)\/length(x))\n}\n\nprint(average_vector(my_vector))<\/s>"}
{"output":"for i in range (100,0,-1):\n    print(i)","instruction":"Create a Python program to print out the numbers in reverse order from 100 to 1.","input":"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a Python program to print out the numbers in reverse order from 100 to 1. \n\n### Input:  [\/INST] \n\nfor i in range (100,0,-1):\n    print(i)<\/s>"}
{"output":"function isEven(x) {\n return x % 2 === 0;\n}\n\nconsole.log(isEven(2));\n\/\/ true","instruction":"Generate a function in JavaScript to find out if a given number is an even number or not.","input":"Not applicable","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Generate a function in JavaScript to find out if a given number is an even number or not. \n\n### Input: Not applicable [\/INST] \n\nfunction isEven(x) {\n return x % 2 === 0;\n}\n\nconsole.log(isEven(2));\n\/\/ true<\/s>"}
{"output":"const xml2js = require('xml2js');\n\nconst xml = \"<data><name>John Doe<\/name><age>35<\/age><\/data>\";\n\nconst xmlToJson = (xml) => {\n  const parser = new xml2js.Parser();\n  let result;\n  parser.parseString(xml, (err, res) => {\n    if (err) throw err;\n    result = res;\n  });\n  return result;\n};\n\nconst jsonObj = xmlToJson(xml);","instruction":"Generate code to convert an XML into a JSON object","input":"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Generate code to convert an XML into a JSON object \n\n### Input:  [\/INST] \n\nconst xml2js = require('xml2js');\n\nconst xml = \"<data><name>John Doe<\/name><age>35<\/age><\/data>\";\n\nconst xmlToJson = (xml) => {\n  const parser = new xml2js.Parser();\n  let result;\n  parser.parseString(xml, (err, res) => {\n    if (err) throw err;\n    result = res;\n  });\n  return result;\n};\n\nconst jsonObj = xmlToJson(xml);<\/s>"}
{"output":"# Define the independent and dependent variables\nX = df[['Volume', 'High', 'Low', 'Open', 'Close']]\nY = df['Adj Close']\n\n# Split the data into train and test\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 0)\n\n# Fit the model and predict\nregressor = LinearRegression()\nregressor.fit(X_train, Y_train)\nY_pred = regressor.predict(X_test)\n\n# Optimize the model\nparameters = {'fit_intercept':[True,False], 'normalize':[True,False], 'copy_X':[True, False]}\ngrid = GridSearchCV(regressor, parameters, cv=3)\ngrid.fit(X_train,Y_train)\n\n# Print the optimized parameters\nprint(grid.best_params_)","instruction":"Optimize a given Linear Regression model for predicting the stock price of a company.","input":"Not applicable","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Optimize a given Linear Regression model for predicting the stock price of a company. \n\n### Input: Not applicable [\/INST] \n\n# Define the independent and dependent variables\nX = df[['Volume', 'High', 'Low', 'Open', 'Close']]\nY = df['Adj Close']\n\n# Split the data into train and test\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 0)\n\n# Fit the model and predict\nregressor = LinearRegression()\nregressor.fit(X_train, Y_train)\nY_pred = regressor.predict(X_test)\n\n# Optimize the model\nparameters = {'fit_intercept':[True,False], 'normalize':[True,False], 'copy_X':[True, False]}\ngrid = GridSearchCV(regressor, parameters, cv=3)\ngrid.fit(X_train,Y_train)\n\n# Print the optimized parameters\nprint(grid.best_params_)<\/s>"}
{"output":"function factorial(num: number): number {\n let result = 1;\n\n \/\/ iterate from 1 to num\n for (let i = 1; i <= num; i++) {\n  result = result * i;\n }\n\n return result;\n}\n\nfor (let i = 1; i <= 10; i++) {\n console.log(factorial(i));\n}","instruction":"Create a TypeScript program to compute the factorial of numbers from 1 to 10.","input":"Not applicable","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a TypeScript program to compute the factorial of numbers from 1 to 10. \n\n### Input: Not applicable [\/INST] \n\nfunction factorial(num: number): number {\n let result = 1;\n\n \/\/ iterate from 1 to num\n for (let i = 1; i <= num; i++) {\n  result = result * i;\n }\n\n return result;\n}\n\nfor (let i = 1; i <= 10; i++) {\n console.log(factorial(i));\n}<\/s>"}
{"output":"#!\/bin\/bash \necho \"Hello, World!\"","instruction":"Write a shell script that prints the message \"Hello, World!\".","input":"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Write a shell script that prints the message \"Hello, World!\". \n\n### Input:  [\/INST] \n\n#!\/bin\/bash \necho \"Hello, World!\"<\/s>"}
{"output":"def binary2decimal(binary):\n\tdec = 0\n\tfor i in range(len(binary)):\n\t\tdigit = binary[i]\n\t\tdec += int(digit)*(2**(len(binary)-1-i))\n\n\treturn dec\n\nprint(binary2decimal(\"10011\")) # 19","instruction":"Use Python to convert a single number from binary to decimal","input":"10011","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Use Python to convert a single number from binary to decimal \n\n### Input: 10011 [\/INST] \n\ndef binary2decimal(binary):\n\tdec = 0\n\tfor i in range(len(binary)):\n\t\tdigit = binary[i]\n\t\tdec += int(digit)*(2**(len(binary)-1-i))\n\n\treturn dec\n\nprint(binary2decimal(\"10011\")) # 19<\/s>"}
{"output":"def maxProduct(arr):\n    maxP = arr[0]*arr[1]\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i]*arr[j]\n            if product > maxP:\n                maxP = product\n    return maxP","instruction":"Generate a function that takes in an integer array and returns the maximum product of two of its elements.","input":"arr = [5, 2, 7, 9, 1]","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Generate a function that takes in an integer array and returns the maximum product of two of its elements. \n\n### Input: arr = [5, 2, 7, 9, 1] [\/INST] \n\ndef maxProduct(arr):\n    maxP = arr[0]*arr[1]\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i]*arr[j]\n            if product > maxP:\n                maxP = product\n    return maxP<\/s>"}
{"output":"import tkinter\n\ncar_features = ['Type', 'Engine', 'Dimensions', 'Fuel tank capacity']\n\n# Create the main window\nroot = tkinter.Tk()\nroot.title(\"Car Features\")\n\n# Create widgets\nlabel = tkinter.Label(root, text=\"Choose car feature to display\")\nlabel.pack()\n\n# Create the dropdown to choose car features\noption = tkinter.StringVar()\noption.set(\"Type\")  # set initial value\ndropdown = tkinter.OptionMenu(root, option, *car_features)\ndropdown.pack()\n\n# Create the radiobuttons to choose type of car\nr_types = [\"Sedan\", \"Hatchback\", \"SUV\", \"Coupe\"]\ny = tkinter.IntVar()\nfor i, type in enumerate(r_types, start=1):\n    radio = tkinter.Radiobutton(root, text=type, variable=y, value=i).pack()\n\n# Create button to trigger \"click\" event\nbutton = tkinter.Button(root, text=\"Display\", command=lambda: display_features(option, y))\nbutton.pack()\n\n# Placeholder for results \noutput = tkinter.Text(root).pack()\n\n# Callback function\ndef display_features(opt, index):\n    car_type = r_types[index - 1]\n    if opt == car_features[0]:\n        print(f'You chose a {car_type}')\n    elif opt == car_features[1]:\n        print(f'The engine size for this {car_type} is 1.6L')\n    elif opt == car_features[2]:\n        print(f'The dimensions of this {car_type} are 4.5 meters in length and 1.7 meters in width')\n    elif opt == car_features[3]:\n        print(f'This {car_type} has a fuel tank capacity of 60 liters')\n    else:\n        print('You have not chosen any feature')\n\n# Start the application\nroot.mainloop()","instruction":"Create a GUI application that displays various features of a car.","input":"No input","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a GUI application that displays various features of a car. \n\n### Input: No input [\/INST] \n\nimport tkinter\n\ncar_features = ['Type', 'Engine', 'Dimensions', 'Fuel tank capacity']\n\n# Create the main window\nroot = tkinter.Tk()\nroot.title(\"Car Features\")\n\n# Create widgets\nlabel = tkinter.Label(root, text=\"Choose car feature to display\")\nlabel.pack()\n\n# Create the dropdown to choose car features\noption = tkinter.StringVar()\noption.set(\"Type\")  # set initial value\ndropdown = tkinter.OptionMenu(root, option, *car_features)\ndropdown.pack()\n\n# Create the radiobuttons to choose type of car\nr_types = [\"Sedan\", \"Hatchback\", \"SUV\", \"Coupe\"]\ny = tkinter.IntVar()\nfor i, type in enumerate(r_types, start=1):\n    radio = tkinter.Radiobutton(root, text=type, variable=y, value=i).pack()\n\n# Create button to trigger \"click\" event\nbutton = tkinter.Button(root, text=\"Display\", command=lambda: display_features(option, y))\nbutton.pack()\n\n# Placeholder for results \noutput = tkinter.Text(root).pack()\n\n# Callback function\ndef display_features(opt, index):\n    car_type = r_types[index - 1]\n    if opt == car_features[0]:\n        print(f'You chose a {car_type}')\n    elif opt == car_features[1]:\n        print(f'The engine size for this {car_type} is 1.6L')\n    elif opt == car_features[2]:\n        print(f'The dimensions of this {car_type} are 4.5 meters in length and 1.7 meters in width')\n    elif opt == car_features[3]:\n        print(f'This {car_type} has a fuel tank capacity of 60 liters')\n    else:\n        print('You have not chosen any feature')\n\n# Start the application\nroot.mainloop()<\/s>"}
{"output":"def top_n_results(arr, n):\n    # sort the array\n    arr.sort()\n\n    # return the top n results\n    top_n = arr[:n]\n\n    return top_n\n\nprint(top_n_results([\"Apple\", \"Banana\", \"Orange\", \"Pineapple\"], 2))","instruction":"Implement a function that returns the top N search results from the given input list.","input":"[\"Apple\", \"Banana\", \"Orange\", \"Pineapple\"], 2","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Implement a function that returns the top N search results from the given input list. \n\n### Input: [\"Apple\", \"Banana\", \"Orange\", \"Pineapple\"], 2 [\/INST] \n\ndef top_n_results(arr, n):\n    # sort the array\n    arr.sort()\n\n    # return the top n results\n    top_n = arr[:n]\n\n    return top_n\n\nprint(top_n_results([\"Apple\", \"Banana\", \"Orange\", \"Pineapple\"], 2))<\/s>"}
{"output":"public class Employee {\n \n    private String name;\n    private double salary;\n    private String jobDescription;\n \n    public Employee(String name, double salary, String jobDescription) {\n        this.name = name;\n        this.salary = salary;\n        this.jobDescription = jobDescription;\n    }\n \n    public String getName() {\n        return name;\n    }\n \n    public void setName(String name) {\n        this.name = name;\n    }\n \n    public double getSalary() {\n        return salary;\n    }\n \n    public void setSalary(double salary) {\n        this.salary = salary;\n    }\n \n    public String getJobDescription() {\n        return jobDescription;\n    }\n \n    public void setJobDescription(String jobDescription) {\n        this.jobDescription = jobDescription;\n    }\n \n    @Override\n    public String toString() {\n        return \"Employee [name=\" + name + \", salary=\" + salary + \", jobDescription=\" + jobDescription + \"]\";\n    }\n \n}","instruction":"Create an object-oriented program in Java to represent an employee with their name, salary and job description.","input":"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create an object-oriented program in Java to represent an employee with their name, salary and job description. \n\n### Input:  [\/INST] \n\npublic class Employee {\n \n    private String name;\n    private double salary;\n    private String jobDescription;\n \n    public Employee(String name, double salary, String jobDescription) {\n        this.name = name;\n        this.salary = salary;\n        this.jobDescription = jobDescription;\n    }\n \n    public String getName() {\n        return name;\n    }\n \n    public void setName(String name) {\n        this.name = name;\n    }\n \n    public double getSalary() {\n        return salary;\n    }\n \n    public void setSalary(double salary) {\n        this.salary = salary;\n    }\n \n    public String getJobDescription() {\n        return jobDescription;\n    }\n \n    public void setJobDescription(String jobDescription) {\n        this.jobDescription = jobDescription;\n    }\n \n    @Override\n    public String toString() {\n        return \"Employee [name=\" + name + \", salary=\" + salary + \", jobDescription=\" + jobDescription + \"]\";\n    }\n \n}<\/s>"}
{"output":"public class PrimeNumber {\n   public static void main(String[] args) {\n      int n = 25;\n      for(int i = 2; i <= n; i++) {\n         boolean isPrime = true;\n         \/\/ Check if i is prime\n         for(int j = 2; j < i; j++) {\n            if(i % j == 0) {\n               isPrime = false;\n               break;\n            }\n         }\n         \/\/ Print the number\n         if(isPrime) {\n            System.out.print(i + \" \");\n         }\n      }\n   }\n}\n\n\/\/ Prints: 2 3 5 7 11 13 17 19 23","instruction":"Create a program in Java to print all prime numbers between 0 and N.","input":"N = 25","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a program in Java to print all prime numbers between 0 and N. \n\n### Input: N = 25 [\/INST] \n\npublic class PrimeNumber {\n   public static void main(String[] args) {\n      int n = 25;\n      for(int i = 2; i <= n; i++) {\n         boolean isPrime = true;\n         \/\/ Check if i is prime\n         for(int j = 2; j < i; j++) {\n            if(i % j == 0) {\n               isPrime = false;\n               break;\n            }\n         }\n         \/\/ Print the number\n         if(isPrime) {\n            System.out.print(i + \" \");\n         }\n      }\n   }\n}\n\n\/\/ Prints: 2 3 5 7 11 13 17 19 23<\/s>"}
{"output":"# Solution\npublic class SubStringExtractor {\n    public static void main(String[] args) {\n        String str = \"This is a test string\";\n        char start = 'i';\n        char end = 'a';\n        String substring = str.substring(str.indexOf(start)+1, str.indexOf(end));\n        System.out.println(\"Substring: \" + substring); \/\/ Substring: s is \n    }\n}","instruction":"Write a Java program to extract the substring of the given string between two characters.","input":"String: \"This is a test string\"\nStart Character: 'i'\nEnd Character: 'a'","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Write a Java program to extract the substring of the given string between two characters. \n\n### Input: String: \"This is a test string\"\nStart Character: 'i'\nEnd Character: 'a' [\/INST] \n\n# Solution\npublic class SubStringExtractor {\n    public static void main(String[] args) {\n        String str = \"This is a test string\";\n        char start = 'i';\n        char end = 'a';\n        String substring = str.substring(str.indexOf(start)+1, str.indexOf(end));\n        System.out.println(\"Substring: \" + substring); \/\/ Substring: s is \n    }\n}<\/s>"}
{"output":"import { Component } from '@angular\/core';\n\n@Component({\n selector: 'my-app',\n template: `<ul>\n  <li *ngFor=\"let book of books\">\n   <h2>{{ book.title }}<\/h2>\n   <p>Author: {{ book.author }}<\/p>\n   <p>ISBN: {{ book.isbn }}<\/p>\n   <p>Description: {{ book.description }}<\/p>\n  <\/li>\n <\/ul>`\n})\nexport class AppComponent {\n books = [\n  {\n   title: 'The Catcher in the Rye',\n   author: 'J.D. Salinger',\n   isbn: '0316769174',\n   description: 'The Catcher in the Rye is a story by J. D. Salinger, partially published in serial form in 1945\u20131946 and as a novel in 1951.'\n  },\n  {\n   title: 'To Kill a Mockingbird',\n   author: 'Harper Lee',\n   isbn: '0446310786',\n   description: 'To Kill a Mockingbird is a novel by Harper Lee published in 1960. It was immediately successful, winning the Pulitzer Prize, and has become a classic of modern American literature.'\n  }\n ]\n}","instruction":"Write an Angular application to display a list of books and their details.","input":"Not applicable","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Write an Angular application to display a list of books and their details. \n\n### Input: Not applicable [\/INST] \n\nimport { Component } from '@angular\/core';\n\n@Component({\n selector: 'my-app',\n template: `<ul>\n  <li *ngFor=\"let book of books\">\n   <h2>{{ book.title }}<\/h2>\n   <p>Author: {{ book.author }}<\/p>\n   <p>ISBN: {{ book.isbn }}<\/p>\n   <p>Description: {{ book.description }}<\/p>\n  <\/li>\n <\/ul>`\n})\nexport class AppComponent {\n books = [\n  {\n   title: 'The Catcher in the Rye',\n   author: 'J.D. Salinger',\n   isbn: '0316769174',\n   description: 'The Catcher in the Rye is a story by J. D. Salinger, partially published in serial form in 1945\u20131946 and as a novel in 1951.'\n  },\n  {\n   title: 'To Kill a Mockingbird',\n   author: 'Harper Lee',\n   isbn: '0446310786',\n   description: 'To Kill a Mockingbird is a novel by Harper Lee published in 1960. It was immediately successful, winning the Pulitzer Prize, and has become a classic of modern American literature.'\n  }\n ]\n}<\/s>"}
{"output":"import random\n\nquotes = [\n \"It's not who you are that holds you back, it's who you think you're not.\",\n \"You don't have to be great to start, but you have to start to be great.\",\n \"It's not what happens to you, but how you react to it that matters.\",\n \"It does not matter how slowly you go, as long as you do not stop.\"\n]\n\nprint(\"Enter your name:\")\nname = input()\n\nrandom_quote = random.choice(quotes)\nprint(\"{}, {}\".format(name, random_quote))","instruction":"Create a program in Python to read input from the user and respond with a randomly generated quote.","input":"Not applicable","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a program in Python to read input from the user and respond with a randomly generated quote. \n\n### Input: Not applicable [\/INST] \n\nimport random\n\nquotes = [\n \"It's not who you are that holds you back, it's who you think you're not.\",\n \"You don't have to be great to start, but you have to start to be great.\",\n \"It's not what happens to you, but how you react to it that matters.\",\n \"It does not matter how slowly you go, as long as you do not stop.\"\n]\n\nprint(\"Enter your name:\")\nname = input()\n\nrandom_quote = random.choice(quotes)\nprint(\"{}, {}\".format(name, random_quote))<\/s>"}
{"output":"def calculate_stats(numbers):\n    maximum = max(numbers)\n    minimum = min(numbers)\n    average = sum(numbers)\/len(numbers)\n    return (maximum, minimum, average)","instruction":"Develop a Python function to calculate the maximum, minimum and average of a given list.","input":"numbers = [3, 4, 5, 6]","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Develop a Python function to calculate the maximum, minimum and average of a given list. \n\n### Input: numbers = [3, 4, 5, 6] [\/INST] \n\ndef calculate_stats(numbers):\n    maximum = max(numbers)\n    minimum = min(numbers)\n    average = sum(numbers)\/len(numbers)\n    return (maximum, minimum, average)<\/s>"}
{"output":"package main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\tdate := time.Date(2021, 3, 5, 0, 0, 0, 0, time.UTC)\n\tdays := 30\n\tfutureDate := date.AddDate(0, 0, days)\n\tfmt.Println(\"Future Date:\", futureDate.Format(\"02-01-2006\"))\n}","instruction":"Create a Go program to calculate a given number of days from a given date.","input":"date: 3\/5\/21, num of days: 30","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a Go program to calculate a given number of days from a given date. \n\n### Input: date: 3\/5\/21, num of days: 30 [\/INST] \n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\tdate := time.Date(2021, 3, 5, 0, 0, 0, 0, time.UTC)\n\tdays := 30\n\tfutureDate := date.AddDate(0, 0, days)\n\tfmt.Println(\"Future Date:\", futureDate.Format(\"02-01-2006\"))\n}<\/s>"}
{"output":"import tensorflow \nimport numpy as np\n\n# define the board state shape\nBOARD_STATE_SHAPE = (7, 6)\n\n# define the network model\nmodel = tensorflow.keras.Sequential([\n # input\n tensorflow.keras.layers.Input(shape=BOARD_STATE_SHAPE),\n\n # Convolutional layers\n tensorflow.keras.layers.Conv2D(32, (3, 3), activation='relu'),\n tensorflow.keras.layers.MaxPooling2D(2, 2),\n tensorflow.keras.layers.Conv2D(64, (3, 3), activation='relu'),\n tensorflow.keras.layers.MaxPooling2D(2, 2),\n\n # Flattening\n tensorflow.keras.layers.Flatten(),\n\n # Dense layers\n tensorflow.keras.layers.Dense(128, activation='relu'),\n tensorflow.keras.layers.Dense(7, activation='softmax')\n])\n\n# compile the model\nmodel.compile(\n optimizer=tensorflow.keras.optimizers.Adam(),\n loss='categorical_crossentropy',\n metrics=['accuracy']\n)\n\n# train the model\nmodel.fit(\n x=x_train,\n y=y_train,\n epochs=10,\n validation_data=(x_val, y_val),\n batch_size=32\n)","instruction":"Create a TensorFlow model to predict the outcome of a game of Connect 4 given the current board state.","input":"Not applicable","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a TensorFlow model to predict the outcome of a game of Connect 4 given the current board state. \n\n### Input: Not applicable [\/INST] \n\nimport tensorflow \nimport numpy as np\n\n# define the board state shape\nBOARD_STATE_SHAPE = (7, 6)\n\n# define the network model\nmodel = tensorflow.keras.Sequential([\n # input\n tensorflow.keras.layers.Input(shape=BOARD_STATE_SHAPE),\n\n # Convolutional layers\n tensorflow.keras.layers.Conv2D(32, (3, 3), activation='relu'),\n tensorflow.keras.layers.MaxPooling2D(2, 2),\n tensorflow.keras.layers.Conv2D(64, (3, 3), activation='relu'),\n tensorflow.keras.layers.MaxPooling2D(2, 2),\n\n # Flattening\n tensorflow.keras.layers.Flatten(),\n\n # Dense layers\n tensorflow.keras.layers.Dense(128, activation='relu'),\n tensorflow.keras.layers.Dense(7, activation='softmax')\n])\n\n# compile the model\nmodel.compile(\n optimizer=tensorflow.keras.optimizers.Adam(),\n loss='categorical_crossentropy',\n metrics=['accuracy']\n)\n\n# train the model\nmodel.fit(\n x=x_train,\n y=y_train,\n epochs=10,\n validation_data=(x_val, y_val),\n batch_size=32\n)<\/s>"}
{"output":"static void ReverseArray(int[] arr) \n{ \n  int left = 0;\n  int right = arr.Length - 1;\n    \n  while (left < right) \n  { \n    int temp = arr[left]; \n    arr[left] = arr[right]; \n    arr[right] = temp; \n\n    left++;\n    right--;\n  } \n}","instruction":"Create a function that will reverse the order of an array's elements in C#?","input":"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a function that will reverse the order of an array's elements in C#? \n\n### Input:  [\/INST] \n\nstatic void ReverseArray(int[] arr) \n{ \n  int left = 0;\n  int right = arr.Length - 1;\n    \n  while (left < right) \n  { \n    int temp = arr[left]; \n    arr[left] = arr[right]; \n    arr[right] = temp; \n\n    left++;\n    right--;\n  } \n}<\/s>"}
{"output":"const nodemailer = require('nodemailer');\n  \nexports.sendMail = async function() {\n  const transporter = nodemailer.createTransport({\n    host: 'your_host',\n    port: 587,\n    secure: false,\n    auth: {\n      user: 'your_user',\n      pass: 'your_pass'\n    }\n  });\n \n  try {\n    const info = await transporter.sendMail({\n      from: 'sender@example.com',\n      to: 'receiver@example.com',\n      subject: 'Your Background Task is finished',\n      html: `<p>Your task is finished! Please check the results.<\/p>`\n    })\n    return true;\n  } catch (err) {\n    return false;\n  }\n}\n\nexports.startWorkflow = async function() {\n  \/\/ Do some background task\n  \/\/ ...\n  \n  \/\/ Send notification\n  let success = await exports.sendMail();\n  if (success) {\n    console.log('Email sent!');\n  }\n  else {\n    console.log('Error sending email');\n  }\n}","instruction":"Construct an automation workflow using Node.js that performs some background task and Email notifications.","input":"Not applicable","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Construct an automation workflow using Node.js that performs some background task and Email notifications. \n\n### Input: Not applicable [\/INST] \n\nconst nodemailer = require('nodemailer');\n  \nexports.sendMail = async function() {\n  const transporter = nodemailer.createTransport({\n    host: 'your_host',\n    port: 587,\n    secure: false,\n    auth: {\n      user: 'your_user',\n      pass: 'your_pass'\n    }\n  });\n \n  try {\n    const info = await transporter.sendMail({\n      from: 'sender@example.com',\n      to: 'receiver@example.com',\n      subject: 'Your Background Task is finished',\n      html: `<p>Your task is finished! Please check the results.<\/p>`\n    })\n    return true;\n  } catch (err) {\n    return false;\n  }\n}\n\nexports.startWorkflow = async function() {\n  \/\/ Do some background task\n  \/\/ ...\n  \n  \/\/ Send notification\n  let success = await exports.sendMail();\n  if (success) {\n    console.log('Email sent!');\n  }\n  else {\n    console.log('Error sending email');\n  }\n}<\/s>"}
{"output":"def get_max(a,b):\n    if a > b:\n        return a\n    else:\n        return b\n\n# main program\na = 4\nb = 5\nresult = get_max(a,b)\nprint(result)","instruction":"Generate a python function to find the maximum of two numbers","input":"4, 5","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Generate a python function to find the maximum of two numbers \n\n### Input: 4, 5 [\/INST] \n\ndef get_max(a,b):\n    if a > b:\n        return a\n    else:\n        return b\n\n# main program\na = 4\nb = 5\nresult = get_max(a,b)\nprint(result)<\/s>"}
{"output":"SELECT name, age\nFROM users\nORDER BY age ASC;","instruction":"Write an SQL query to get the name and age of all users in a table ordered by age from oldest to youngest.","input":"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Write an SQL query to get the name and age of all users in a table ordered by age from oldest to youngest. \n\n### Input:  [\/INST] \n\nSELECT name, age\nFROM users\nORDER BY age ASC;<\/s>"}
{"output":"SELECT item, COUNT(*) AS count FROM table GROUP BY item ORDER BY count DESC LIMIT 3;","instruction":"Generate a SQL query to return the top 3 items ordered by count","input":"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Generate a SQL query to return the top 3 items ordered by count \n\n### Input:  [\/INST] \n\nSELECT item, COUNT(*) AS count FROM table GROUP BY item ORDER BY count DESC LIMIT 3;<\/s>"}
{"output":"def remove_index(my_list, remove_index):\nmy_list.remove(my_list[remove_index])\nreturn my_list","instruction":"Create a Python script which removes specified index from a list.","input":"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a Python script which removes specified index from a list. \n\n### Input:  [\/INST] \n\ndef remove_index(my_list, remove_index):\nmy_list.remove(my_list[remove_index])\nreturn my_list<\/s>"}
{"output":"<?php\n \n$data = array(\n array(\"city\"=>\"Berlin\", \"country\"=>\"Germany\"), \n array(\"city\"=>\"Paris\", \"country\"=>\"France\"),\n array(\"city\"=>\"Tokyo\", \"country\"=>\"Japan\"),\n array(\"city\"=>\"New York\", \"country\"=>\"USA\")\n);\n \necho json_encode($data);\n?>","instruction":"Create a PHP API that retrieves a list of cities.","input":"Not applicable","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a PHP API that retrieves a list of cities. \n\n### Input: Not applicable [\/INST] \n\n<?php\n \n$data = array(\n array(\"city\"=>\"Berlin\", \"country\"=>\"Germany\"), \n array(\"city\"=>\"Paris\", \"country\"=>\"France\"),\n array(\"city\"=>\"Tokyo\", \"country\"=>\"Japan\"),\n array(\"city\"=>\"New York\", \"country\"=>\"USA\")\n);\n \necho json_encode($data);\n?><\/s>"}
{"output":"SELECT name, bday \nFROM People \nWHERE age BETWEEN 20 and 25;","instruction":"Design a SQL query that will return all birthdays for people of ages 20-25.","input":"Table Name: People\nColumn Names: name, age, bday","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Design a SQL query that will return all birthdays for people of ages 20-25. \n\n### Input: Table Name: People\nColumn Names: name, age, bday [\/INST] \n\nSELECT name, bday \nFROM People \nWHERE age BETWEEN 20 and 25;<\/s>"}
{"output":"def format_number(number):\n    return '{0:.2f}'.format(number)\n\nnumber = 100\n\nprint(format_number(number)) \n# Output: 100.00","instruction":"Create a function to format a numeric value with two decimal precision.","input":"number = 100","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a function to format a numeric value with two decimal precision. \n\n### Input: number = 100 [\/INST] \n\ndef format_number(number):\n    return '{0:.2f}'.format(number)\n\nnumber = 100\n\nprint(format_number(number)) \n# Output: 100.00<\/s>"}
{"output":"def sum(lis):\n  summ = 0\n  for num in lis:\n    summ +=num\n  return summ","instruction":"Create a function to accept a list of numbers and return their sum.","input":"[5, 8, 3, 10]","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a function to accept a list of numbers and return their sum. \n\n### Input: [5, 8, 3, 10] [\/INST] \n\ndef sum(lis):\n  summ = 0\n  for num in lis:\n    summ +=num\n  return summ<\/s>"}
{"output":"def sentiment_analysis(sentence):\n    # Pre-process sentence\n    # ...\n\n    # Extract features\n    # ...\n\n    # Perform modeling\n    # ...\n\n    # Return result\n    # ...","instruction":"Using a variety of machine learning algorithms, develop a sentiment analysis model that can take in a sentence and classify it as positive or negative.","input":"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Using a variety of machine learning algorithms, develop a sentiment analysis model that can take in a sentence and classify it as positive or negative. \n\n### Input:  [\/INST] \n\ndef sentiment_analysis(sentence):\n    # Pre-process sentence\n    # ...\n\n    # Extract features\n    # ...\n\n    # Perform modeling\n    # ...\n\n    # Return result\n    # ...<\/s>"}
{"output":"const express = require('express');\nconst app = express();\n\napp.get('\/', (req, res) => {\n res.status(200).send('Hello World!');\n});\n\nconst port = process.env.PORT || 3000;\napp.listen(port, () => console.log(`Server listening on port ${port}...`));","instruction":"Create an Express web server that outputs \"Hello World\" when a GET request is made to the root (\"\/\") endpoint.","input":"Not applicable","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create an Express web server that outputs \"Hello World\" when a GET request is made to the root (\"\/\") endpoint. \n\n### Input: Not applicable [\/INST] \n\nconst express = require('express');\nconst app = express();\n\napp.get('\/', (req, res) => {\n res.status(200).send('Hello World!');\n});\n\nconst port = process.env.PORT || 3000;\napp.listen(port, () => console.log(`Server listening on port ${port}...`));<\/s>"}
{"output":"def detect_cycle(head):\n    \"\"\"Detects whether a linked list contains a cycle.\n\n    Args:\n        head (ListNode): The head node of the linked list.\n\n    Returns:\n        bool: True if there is a cycle, and False if there isn't.\n    \"\"\"\n    slow = head\n    fast = head\n\n    while fast and fast.next:\n        # move slow and fast by one step\n        slow = slow.next\n        fast = fast.next.next\n        # fast will catch up slow if a cycle exists\n        if slow == fast:\n            return True\n    # fast has reached the end and no cycle\n    return False","instruction":"Write an algorithm to detect a cycle linked list in Python.","input":"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Write an algorithm to detect a cycle linked list in Python. \n\n### Input:  [\/INST] \n\ndef detect_cycle(head):\n    \"\"\"Detects whether a linked list contains a cycle.\n\n    Args:\n        head (ListNode): The head node of the linked list.\n\n    Returns:\n        bool: True if there is a cycle, and False if there isn't.\n    \"\"\"\n    slow = head\n    fast = head\n\n    while fast and fast.next:\n        # move slow and fast by one step\n        slow = slow.next\n        fast = fast.next.next\n        # fast will catch up slow if a cycle exists\n        if slow == fast:\n            return True\n    # fast has reached the end and no cycle\n    return False<\/s>"}
{"output":"SELECT articles.title, COUNT(*) AS views\nFROM articles\nJOIN visits ON articles.article_id = visits.article_id\nGROUP BY articles.title\nORDER BY views DESC\nLIMIT 10","instruction":"Write a SQL query to get the top 10 most viewed articles from the database.","input":"Not applicable","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Write a SQL query to get the top 10 most viewed articles from the database. \n\n### Input: Not applicable [\/INST] \n\nSELECT articles.title, COUNT(*) AS views\nFROM articles\nJOIN visits ON articles.article_id = visits.article_id\nGROUP BY articles.title\nORDER BY views DESC\nLIMIT 10<\/s>"}
{"output":"import numpy as np\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n# define the model\nmodel = Sequential()\nmodel.add(Dense(5, activation='relu', input_dim=5))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n\n# compile the model\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n# load the data\nX = np.loadtxt('data.txt', delimiter=',')\n\n# fit the model with input data\nmodel.fit(X, y, epochs=50)","instruction":"Compose a Python program to train a neural network using a given dataset.","input":"The dataset contains 10,000 examples and 5 features.","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Compose a Python program to train a neural network using a given dataset. \n\n### Input: The dataset contains 10,000 examples and 5 features. [\/INST] \n\nimport numpy as np\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n# define the model\nmodel = Sequential()\nmodel.add(Dense(5, activation='relu', input_dim=5))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n\n# compile the model\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n# load the data\nX = np.loadtxt('data.txt', delimiter=',')\n\n# fit the model with input data\nmodel.fit(X, y, epochs=50)<\/s>"}
{"output":"import React from 'react';\n\nconst Navbar = ({ links }) => (\n <nav>\n <ul>\n {links.map(link => (\n <li key={link.title}>\n <a href={link.url}>{link.title}<\/a>\n <\/li>\n ))}\n <\/ul>\n <\/nav>\n);\n\nexport default Navbar;","instruction":"Create a React component that renders a navigation bar. The navigation bar should contain a list of links to various pages.","input":"<links>\n[\n { title: 'Home', url: '\/' },\n { title: 'About', url: '\/about' },\n { title: 'Contact', url: '\/contact' }\n]","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a React component that renders a navigation bar. The navigation bar should contain a list of links to various pages. \n\n### Input: <links>\n[\n { title: 'Home', url: '\/' },\n { title: 'About', url: '\/about' },\n { title: 'Contact', url: '\/contact' }\n] [\/INST] \n\nimport React from 'react';\n\nconst Navbar = ({ links }) => (\n <nav>\n <ul>\n {links.map(link => (\n <li key={link.title}>\n <a href={link.url}>{link.title}<\/a>\n <\/li>\n ))}\n <\/ul>\n <\/nav>\n);\n\nexport default Navbar;<\/s>"}
{"output":"func arrayToString(arr: [Int]) -> String { \n var result = \"\" \n for i in 0..<arr.count {\n  result += \"\\(arr[i]),\" \n } \n return result \n}\n\n\/\/ Usage example:\nlet myArray = [1,2,3,4,5]\nlet newString = arrayToString(myArray)\nprint(newString) \n\/\/Outputs: \"1,2,3,4,5,\"","instruction":"Create a Swift function that takes an array of integers as a parameter and returns its elements as a comma-separated string.","input":"An array of integers [1,2,3,4,5]","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a Swift function that takes an array of integers as a parameter and returns its elements as a comma-separated string. \n\n### Input: An array of integers [1,2,3,4,5] [\/INST] \n\nfunc arrayToString(arr: [Int]) -> String { \n var result = \"\" \n for i in 0..<arr.count {\n  result += \"\\(arr[i]),\" \n } \n return result \n}\n\n\/\/ Usage example:\nlet myArray = [1,2,3,4,5]\nlet newString = arrayToString(myArray)\nprint(newString) \n\/\/Outputs: \"1,2,3,4,5,\"<\/s>"}
{"output":"SELECT AVG(price) AS 'Average Price'\nFROM Products","instruction":"Create a PostgreSQL query to find the average price of all products in the table.","input":"Table Name: Products\nColumns: product_id, product_name, price","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a PostgreSQL query to find the average price of all products in the table. \n\n### Input: Table Name: Products\nColumns: product_id, product_name, price [\/INST] \n\nSELECT AVG(price) AS 'Average Price'\nFROM Products<\/s>"}
{"output":"from collections import Counter\n\n# define text\ntext = \"To be or not to be, that is the question\"\n\n# Split text into individual words\nwords = text.split()\n\n# Use the Counter module to count the occurrences of each word\nword_count = Counter(words)\n\n# Print most common words\nmost_common_words = word_count.most_common(2)\n\nprint('The 2 most common words are: ')\nfor word in most_common_words:\n    print(word[0], ':', word[1])","instruction":"Write a code to identify the most common words used in a given text.","input":"\"To be or not to be, that is the question\"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Write a code to identify the most common words used in a given text. \n\n### Input: \"To be or not to be, that is the question\" [\/INST] \n\nfrom collections import Counter\n\n# define text\ntext = \"To be or not to be, that is the question\"\n\n# Split text into individual words\nwords = text.split()\n\n# Use the Counter module to count the occurrences of each word\nword_count = Counter(words)\n\n# Print most common words\nmost_common_words = word_count.most_common(2)\n\nprint('The 2 most common words are: ')\nfor word in most_common_words:\n    print(word[0], ':', word[1])<\/s>"}
{"output":"HashMap<String, String> books = new HashMap<String, String>(); \n\n\/\/ Add book titles and authors\nbooks.put(\"Harry Potter\", \"JK Rowling\");\nbooks.put(\"The Lord of the Rings\", \"JRR Tolkien\");\nbooks.put(\"The Alchemist\", \"Paulo Coelho\");\nbooks.put(\"The Catcher in the Rye\", \"JD Salinger\");","instruction":"Create a data structure for storing book titles and authors.","input":"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a data structure for storing book titles and authors. \n\n### Input:  [\/INST] \n\nHashMap<String, String> books = new HashMap<String, String>(); \n\n\/\/ Add book titles and authors\nbooks.put(\"Harry Potter\", \"JK Rowling\");\nbooks.put(\"The Lord of the Rings\", \"JRR Tolkien\");\nbooks.put(\"The Alchemist\", \"Paulo Coelho\");\nbooks.put(\"The Catcher in the Rye\", \"JD Salinger\");<\/s>"}
{"output":"import sys\nimport pargraph as par\nimport copy\nimport schedule as sched\nimport profiler as pro\nimport time\nimport multiprocessing\nimport itertools\nimport random\nimport threading\n\n\n\n\n\"\"\" Usage: call with <filename> <pragma_xml_file> <executable_name> <profiling_interations> True\/False (for output) \"\"\"\n\nif __name__ == \"__main__\":\n\t\n\tpragma_xml = sys.argv[1]\n\texecutable = sys.argv[2]\n\tcount = int(sys.argv[3])\n\toutput = sys.argv[4]\n\texecution_time = float(sys.argv[5])\n\tdeadline = float(sys.argv[6])\n\tmulti = sys.argv[7]\n\n\t#runs count time the executable and aggregates the informations in executable_profile.xml. The single profile outputs are saved as profile+iter.xml\n\tprofile_xml = pro.profileCreator(count, executable)\n\n\t#return the nested dot graphs in code style (one for each function)\n\tvisual_nested_graphs = par.getNesGraph(pragma_xml, profile_xml)\n\n\t#returns the graphs to be visualized and the object graphs in flow style (one for each function)\n\t(visual_flow_graphs, flow_graphs) = par.getParalGraph(pragma_xml, profile_xml) \n\n\ti = 0\n\n\tfor g in visual_nested_graphs:\n\t\tg.write_pdf('graphs\/%s_code.pdf'%flow_graphs[i].type)\n\t\tg.write_dot('graphs\/%s_code.dot'%flow_graphs[i].type)\n\t\ti += 1\n\n\ti = 0\n\tfor g in visual_flow_graphs:\n\t\tg.write_pdf('graphs\/%s_flow.pdf'%flow_graphs[i].type)\n\t\tg.write_dot('graphs\/%s_flow.dot'%flow_graphs[i].type)\n\t\ti += 1\n\n\t#creates the flow type graph --> flow.xml\n\tpar.dump_graphs(flow_graphs)\n\t#adding to the original xml the profiling informations --> code.xml\n\tpro.add_profile_xml(profile_xml, pragma_xml)\n\t#creating the total graph with the call-tree\n\tfunc_graph = par.create_complete_graph(visual_flow_graphs, profile_xml)\n\t#creating the graphs with the function calls\n\tfunc_graph.write_pdf('graphs\/function_graphs.pdf')\n\tfunc_graph.write_dot('graphs\/function_graphs.dot')\n\n\t#creating the expanded graph where the functions are inserted in the flow graph\n\texp_flows = copy.deepcopy(flow_graphs)\n\tpar.explode_graph(exp_flows)\n\tmain_flow = sched.get_main(exp_flows)\n\t\n\t#creating a generator for the expanded graph\n\tgen = sched.generate_task(main_flow)\n\t\n\t#creating a new generator for the expanded graph\n\tsched.make_white(main_flow)\n\n\t#getting the number of physical cores of the machine profiled\n\tmax_flows = sched.get_core_num(profile_xml)\n\tmax_flows = 4\n\t#getting cores of the actual machine, but the problem is multithreading\n\tcores = multiprocessing.cpu_count()\n\tif cores == 1:\n\t\tcores = 2\n\t\n\t#initializing all the lists for the parallel scheduling algorithm\n\ttasks_list = []\n\ttask_list = []\n\tflows_list = []\n\toptimal_flow_list = []\n\tp_list = []\n\tqueue_list = []\n\tresults = []\n\tnum_tasks = 0\n\n\t#getting the number of tasks in the expanded graph and creating a list of task\n\tfor task in gen:\n\t\ttask_list.append(task)\n\t\tnum_tasks += 1\n\n\tif output == 'True':\n\t\tsched.make_white(main_flow)\n\t\tpar.scanGraph(main_flow)\n\t\n\t#starting the parallel or sequential search of the best solution with a timing constrain\n\tif multi == 'parallel':\n\t\tfor core in range(cores):\n\t\t\ttmp = []\n\t\t\toptimal_flow_list.append(tmp)\n\t\t\ttmp_2 = []\n\t\t\tflows_list.append(tmp_2)\n\t\t\trandom.shuffle(task_list)\n\t\t\ttasks_list.append(copy.deepcopy(task_list))\n\t\t\tq = sched.Queue()\n\t\t\tqueue_list.append(q)\n\t\t\tp_list.append(multiprocessing.Process(target = sched.get_optimal_flow, args = (flows_list[core], tasks_list[core], 0, optimal_flow_list[core], num_tasks, max_flows, execution_time, queue_list[core],  )))\n\t\t\tprint \"starting core: \",core\n\t\t\tp_list[core].start()\n\t\t#getting the results from the processes\n\t\tfor queue in queue_list:\n\t\t\tt = queue.q.get()\n\t\t\tresults.append(t)\n\t\t#joining all the processes\n\t\ti = 0\n\t\tfor p in p_list:\n\t\t\tp.join()\n\t\t\tprint \"core \", i, \" joined\"\n\t\t\ti += 1\n\t\t#getting the best result\n\t\toptimal_flow = results[0]\n\t\tbest = 0\n\t\tfor i in range(len(results)):\n\t\t\tprint \"result:\"\n\t\t\tfor flow in results[i]:\n\t\t\t\tflow.dump()\n\t\t\t\tif sched.get_cost(results[i]) < sched.get_cost(optimal_flow):\n\t\t\t\t\tbest = i\n\t\toptimal_flow = results[best]\n\telse:\n\t\t\toptimal_flow = []\n\t\t\tflow_list = []\n\t\t\texecution_time += time.clock()\n\t\t\tprint \"searching best schedule\"\n\t\t\tsched.get_optimal_flow_single(flow_list, task_list, 0, optimal_flow, num_tasks, max_flows, execution_time )\n\n\t\n\n\t#printing the best result\t\n\tprint \"solution:\"\n\tfor flow in optimal_flow:\n\t\tflow.dump(\"\\t\")\n\t\tprint \"\\ttime:\",flow.time\n\n\n\n\t#substitutes \"for tasks\" with splitted versions if present in the optimal flows\n\tpar.add_new_tasks(optimal_flow, main_flow)\n\tsched.make_white(main_flow)\n\tgen_ = sched.generate_task(main_flow)\n\n\n\tt_list = []\n\tfor t in gen_:\n\t\tt_list.append(t)\n\t\t\"\"\"\n\t\tprint t.type,\" @ \", t.start_line, \" has parents:\"\n\t\tfor p in t.parent:\n\t\t\tprint \"\\t \",p.type,\" @ \", p.start_line\n\t\tprint \"and children:\"\n\t\tfor c in t.children:\n\t\t\tprint \"\\t \",c.type,\" @ \", c.start_line\n\t\tprint\n\t\t\"\"\"\n\t\n\t#adds id's to all the tasks to retrive the flow to which they belong\n\tpar.add_flow_id(optimal_flow, t_list)\n\n\t#sets arrival times and deadlines using a modified version of the chetto algorithm\n\tsched.chetto(main_flow, deadline, optimal_flow)\n\t\n\t#checks if the schedule is feasible and in case creates the schedule file\n\tif sched.check_schedule(main_flow):\n\t\tsched.create_schedule(main_flow, len(optimal_flow))\n\t\tsched.make_white(main_flow)\n\t\t#sched.print_schedule(main_flow)\n\telse:\n\t\tprint \"tasks not schedulable, try with more search time\"\n\n\t#prints extended info of the entire pragma graph\n\t\n\t\n\t\n\t\n\t\n\n\n\n","instruction":"To use the code, call it with the following arguments: <filename> <pragma_xml_file> <executable_name> <profiling_iterations> True\/False (for output). The code will run the executable for the specified number of iterations and aggregate the information in executable_profile.xml. It will then create nested and flow graphs for each function, as well as a complete call-tree graph. The code will then search for the optimal schedule using a parallel or sequential algorithm with a timing constraint. If a feasible schedule is found, it will be saved in a schedule file.","input":"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: To use the code, call it with the following arguments: <filename> <pragma_xml_file> <executable_name> <profiling_iterations> True\/False (for output). The code will run the executable for the specified number of iterations and aggregate the information in executable_profile.xml. It will then create nested and flow graphs for each function, as well as a complete call-tree graph. The code will then search for the optimal schedule using a parallel or sequential algorithm with a timing constraint. If a feasible schedule is found, it will be saved in a schedule file. \n\n### Input:  [\/INST] \n\nimport sys\nimport pargraph as par\nimport copy\nimport schedule as sched\nimport profiler as pro\nimport time\nimport multiprocessing\nimport itertools\nimport random\nimport threading\n\n\n\n\n\"\"\" Usage: call with <filename> <pragma_xml_file> <executable_name> <profiling_interations> True\/False (for output) \"\"\"\n\nif __name__ == \"__main__\":\n\t\n\tpragma_xml = sys.argv[1]\n\texecutable = sys.argv[2]\n\tcount = int(sys.argv[3])\n\toutput = sys.argv[4]\n\texecution_time = float(sys.argv[5])\n\tdeadline = float(sys.argv[6])\n\tmulti = sys.argv[7]\n\n\t#runs count time the executable and aggregates the informations in executable_profile.xml. The single profile outputs are saved as profile+iter.xml\n\tprofile_xml = pro.profileCreator(count, executable)\n\n\t#return the nested dot graphs in code style (one for each function)\n\tvisual_nested_graphs = par.getNesGraph(pragma_xml, profile_xml)\n\n\t#returns the graphs to be visualized and the object graphs in flow style (one for each function)\n\t(visual_flow_graphs, flow_graphs) = par.getParalGraph(pragma_xml, profile_xml) \n\n\ti = 0\n\n\tfor g in visual_nested_graphs:\n\t\tg.write_pdf('graphs\/%s_code.pdf'%flow_graphs[i].type)\n\t\tg.write_dot('graphs\/%s_code.dot'%flow_graphs[i].type)\n\t\ti += 1\n\n\ti = 0\n\tfor g in visual_flow_graphs:\n\t\tg.write_pdf('graphs\/%s_flow.pdf'%flow_graphs[i].type)\n\t\tg.write_dot('graphs\/%s_flow.dot'%flow_graphs[i].type)\n\t\ti += 1\n\n\t#creates the flow type graph --> flow.xml\n\tpar.dump_graphs(flow_graphs)\n\t#adding to the original xml the profiling informations --> code.xml\n\tpro.add_profile_xml(profile_xml, pragma_xml)\n\t#creating the total graph with the call-tree\n\tfunc_graph = par.create_complete_graph(visual_flow_graphs, profile_xml)\n\t#creating the graphs with the function calls\n\tfunc_graph.write_pdf('graphs\/function_graphs.pdf')\n\tfunc_graph.write_dot('graphs\/function_graphs.dot')\n\n\t#creating the expanded graph where the functions are inserted in the flow graph\n\texp_flows = copy.deepcopy(flow_graphs)\n\tpar.explode_graph(exp_flows)\n\tmain_flow = sched.get_main(exp_flows)\n\t\n\t#creating a generator for the expanded graph\n\tgen = sched.generate_task(main_flow)\n\t\n\t#creating a new generator for the expanded graph\n\tsched.make_white(main_flow)\n\n\t#getting the number of physical cores of the machine profiled\n\tmax_flows = sched.get_core_num(profile_xml)\n\tmax_flows = 4\n\t#getting cores of the actual machine, but the problem is multithreading\n\tcores = multiprocessing.cpu_count()\n\tif cores == 1:\n\t\tcores = 2\n\t\n\t#initializing all the lists for the parallel scheduling algorithm\n\ttasks_list = []\n\ttask_list = []\n\tflows_list = []\n\toptimal_flow_list = []\n\tp_list = []\n\tqueue_list = []\n\tresults = []\n\tnum_tasks = 0\n\n\t#getting the number of tasks in the expanded graph and creating a list of task\n\tfor task in gen:\n\t\ttask_list.append(task)\n\t\tnum_tasks += 1\n\n\tif output == 'True':\n\t\tsched.make_white(main_flow)\n\t\tpar.scanGraph(main_flow)\n\t\n\t#starting the parallel or sequential search of the best solution with a timing constrain\n\tif multi == 'parallel':\n\t\tfor core in range(cores):\n\t\t\ttmp = []\n\t\t\toptimal_flow_list.append(tmp)\n\t\t\ttmp_2 = []\n\t\t\tflows_list.append(tmp_2)\n\t\t\trandom.shuffle(task_list)\n\t\t\ttasks_list.append(copy.deepcopy(task_list))\n\t\t\tq = sched.Queue()\n\t\t\tqueue_list.append(q)\n\t\t\tp_list.append(multiprocessing.Process(target = sched.get_optimal_flow, args = (flows_list[core], tasks_list[core], 0, optimal_flow_list[core], num_tasks, max_flows, execution_time, queue_list[core],  )))\n\t\t\tprint \"starting core: \",core\n\t\t\tp_list[core].start()\n\t\t#getting the results from the processes\n\t\tfor queue in queue_list:\n\t\t\tt = queue.q.get()\n\t\t\tresults.append(t)\n\t\t#joining all the processes\n\t\ti = 0\n\t\tfor p in p_list:\n\t\t\tp.join()\n\t\t\tprint \"core \", i, \" joined\"\n\t\t\ti += 1\n\t\t#getting the best result\n\t\toptimal_flow = results[0]\n\t\tbest = 0\n\t\tfor i in range(len(results)):\n\t\t\tprint \"result:\"\n\t\t\tfor flow in results[i]:\n\t\t\t\tflow.dump()\n\t\t\t\tif sched.get_cost(results[i]) < sched.get_cost(optimal_flow):\n\t\t\t\t\tbest = i\n\t\toptimal_flow = results[best]\n\telse:\n\t\t\toptimal_flow = []\n\t\t\tflow_list = []\n\t\t\texecution_time += time.clock()\n\t\t\tprint \"searching best schedule\"\n\t\t\tsched.get_optimal_flow_single(flow_list, task_list, 0, optimal_flow, num_tasks, max_flows, execution_time )\n\n\t\n\n\t#printing the best result\t\n\tprint \"solution:\"\n\tfor flow in optimal_flow:\n\t\tflow.dump(\"\\t\")\n\t\tprint \"\\ttime:\",flow.time\n\n\n\n\t#substitutes \"for tasks\" with splitted versions if present in the optimal flows\n\tpar.add_new_tasks(optimal_flow, main_flow)\n\tsched.make_white(main_flow)\n\tgen_ = sched.generate_task(main_flow)\n\n\n\tt_list = []\n\tfor t in gen_:\n\t\tt_list.append(t)\n\t\t\"\"\"\n\t\tprint t.type,\" @ \", t.start_line, \" has parents:\"\n\t\tfor p in t.parent:\n\t\t\tprint \"\\t \",p.type,\" @ \", p.start_line\n\t\tprint \"and children:\"\n\t\tfor c in t.children:\n\t\t\tprint \"\\t \",c.type,\" @ \", c.start_line\n\t\tprint\n\t\t\"\"\"\n\t\n\t#adds id's to all the tasks to retrive the flow to which they belong\n\tpar.add_flow_id(optimal_flow, t_list)\n\n\t#sets arrival times and deadlines using a modified version of the chetto algorithm\n\tsched.chetto(main_flow, deadline, optimal_flow)\n\t\n\t#checks if the schedule is feasible and in case creates the schedule file\n\tif sched.check_schedule(main_flow):\n\t\tsched.create_schedule(main_flow, len(optimal_flow))\n\t\tsched.make_white(main_flow)\n\t\t#sched.print_schedule(main_flow)\n\telse:\n\t\tprint \"tasks not schedulable, try with more search time\"\n\n\t#prints extended info of the entire pragma graph\n\t\n\t\n\t\n\t\n\t\n\n\n\n<\/s>"}
{"output":"import { Component } from '@angular\/core';\n\n@Component({\n selector: 'app-concat-strings',\n templateUrl: '.\/concat-strings.component.html',\nstyleUrls: ['.\/concat-strings.component.scss']\n})\nexport class ConcatStringsComponent {\n str1: string;\n str2: string;\n concatResult: string;\n\n concatStrings(): void {\n this.concatResult = this.str1 + this.str2;\n }\n}","instruction":"Create an angular Component with TypeScript that takes two strings as input and prints the concatenation of them.","input":"Not applicable","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create an angular Component with TypeScript that takes two strings as input and prints the concatenation of them. \n\n### Input: Not applicable [\/INST] \n\nimport { Component } from '@angular\/core';\n\n@Component({\n selector: 'app-concat-strings',\n templateUrl: '.\/concat-strings.component.html',\nstyleUrls: ['.\/concat-strings.component.scss']\n})\nexport class ConcatStringsComponent {\n str1: string;\n str2: string;\n concatResult: string;\n\n concatStrings(): void {\n this.concatResult = this.str1 + this.str2;\n }\n}<\/s>"}
{"output":"<ul>\n  <li><a href=\"https:\/\/website.com\/\">Homepage<\/a><\/li>\n  <li><a href=\"https:\/\/website.com\/contact\/\">Contact Page<\/a><\/li>\n  <li><a href=\"https:\/\/website.com\/blog\/\">Blog Page<\/a><\/li>\n<\/ul>","instruction":"Compose a HTML list of link names and URLs to the website's homepage, contact page, and blog page.","input":"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Compose a HTML list of link names and URLs to the website's homepage, contact page, and blog page. \n\n### Input:  [\/INST] \n\n<ul>\n  <li><a href=\"https:\/\/website.com\/\">Homepage<\/a><\/li>\n  <li><a href=\"https:\/\/website.com\/contact\/\">Contact Page<\/a><\/li>\n  <li><a href=\"https:\/\/website.com\/blog\/\">Blog Page<\/a><\/li>\n<\/ul><\/s>"}
{"output":"func printCharacterFrequencies(input: String) {\n    let characters = Array(input)\n    var frequencies: [Character : Int] = [:]\n\n    for char in characters {\n        if let count = frequencies[char] {\n            frequencies.updateValue(count + 1, forKey: char)\n        } else {\n            frequencies[char] = 1\n        }\n    }\n\n    for (char, frequency) in frequencies {\n        print(\"\\(char): \\(frequency)\")\n    }\n}\n\nprintCharacterFrequencies(input: \"Hello World\") \/\/Outputs H:1 e:1 l:3 o:2 :1 W:1 r:1 d:1","instruction":"Generate a Swift program that takes a string and prints out the character frequencies.","input":"Hello World","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Generate a Swift program that takes a string and prints out the character frequencies. \n\n### Input: Hello World [\/INST] \n\nfunc printCharacterFrequencies(input: String) {\n    let characters = Array(input)\n    var frequencies: [Character : Int] = [:]\n\n    for char in characters {\n        if let count = frequencies[char] {\n            frequencies.updateValue(count + 1, forKey: char)\n        } else {\n            frequencies[char] = 1\n        }\n    }\n\n    for (char, frequency) in frequencies {\n        print(\"\\(char): \\(frequency)\")\n    }\n}\n\nprintCharacterFrequencies(input: \"Hello World\") \/\/Outputs H:1 e:1 l:3 o:2 :1 W:1 r:1 d:1<\/s>"}
{"output":"function isArrayOdd(arr) {\n  return arr.every(value => value % 2 !== 0);\n}\n\nconsole.log(isArrayOdd(arr)); \/\/ true","instruction":"Write a JavaScript program to check if all of the elements in an array are odd numbers","input":"const arr = [1, 3, 5, 7, 9];","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Write a JavaScript program to check if all of the elements in an array are odd numbers \n\n### Input: const arr = [1, 3, 5, 7, 9]; [\/INST] \n\nfunction isArrayOdd(arr) {\n  return arr.every(value => value % 2 !== 0);\n}\n\nconsole.log(isArrayOdd(arr)); \/\/ true<\/s>"}
{"output":"pattern = r'[1-9][0-9]{3}'","instruction":"Generate a regular expression pattern that matches any four-digit integer between 1000 and 9999.","input":"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Generate a regular expression pattern that matches any four-digit integer between 1000 and 9999. \n\n### Input:  [\/INST] \n\npattern = r'[1-9][0-9]{3}'<\/s>"}
{"output":"def convertToNumber(arr)\n  arr.map! do |str|\n    str.to_i\n  end\nend\n\narr = [\"1\", \"2\", \"3\"]\n\nconvertToNumber(arr)\n\n# Output: [1, 2, 3]","instruction":"Create a Ruby script that takes an array of strings and converts each string to a number.","input":"[\"1\", \"2\", \"3\"]","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a Ruby script that takes an array of strings and converts each string to a number. \n\n### Input: [\"1\", \"2\", \"3\"] [\/INST] \n\ndef convertToNumber(arr)\n  arr.map! do |str|\n    str.to_i\n  end\nend\n\narr = [\"1\", \"2\", \"3\"]\n\nconvertToNumber(arr)\n\n# Output: [1, 2, 3]<\/s>"}
{"output":"# take input and store in list\nnumbers = list(map(int, input().split()))\n\n# calculate mean\nmean = sum(numbers) \/ len(numbers)\n\n# calculate median\nnumbers.sort()\nif len(numbers) % 2 == 0:\n    # even number of elements\n    median = (numbers[len(numbers)\/\/2 - 1] + numbers[len(numbers)\/\/2])\/2\nelse:\n    # odd number of elements\n    median = numbers[len(numbers)\/\/2]\n\n# calculate mode\nfrom collections import Counter\nmode = Counter(numbers).most_common()[0][0]\n\nprint(\"Mean: {}, Median: {}, Mode: {}\".format(mean, median, mode))","instruction":"Come up with a program that allows a user to input a list of integers and calculate the mean, median and mode.","input":"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Come up with a program that allows a user to input a list of integers and calculate the mean, median and mode. \n\n### Input:  [\/INST] \n\n# take input and store in list\nnumbers = list(map(int, input().split()))\n\n# calculate mean\nmean = sum(numbers) \/ len(numbers)\n\n# calculate median\nnumbers.sort()\nif len(numbers) % 2 == 0:\n    # even number of elements\n    median = (numbers[len(numbers)\/\/2 - 1] + numbers[len(numbers)\/\/2])\/2\nelse:\n    # odd number of elements\n    median = numbers[len(numbers)\/\/2]\n\n# calculate mode\nfrom collections import Counter\nmode = Counter(numbers).most_common()[0][0]\n\nprint(\"Mean: {}, Median: {}, Mode: {}\".format(mean, median, mode))<\/s>"}
{"output":"# Load the libraries\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\n\n# Load the data\ndata = pd.read_csv(\"data.csv\")\n\n# Get the data columns\ntargets = data.iloc[:, 0].values\ndoc_features = data.iloc[:, 1:].values\n\n# Fit k-means clustering\nkmeans = KMeans(n_clusters=3)\nkmeans.fit(doc_features)\n\n# Get the cluster labels\nclusters = kmeans.labels_\n\n# Assign the labels to the data points\ndata['clusters'] = clusters\n\n# Plot the data points\nplt.scatter(data.loc[data['clusters']==0]['feat1'], data.loc[data['clusters']==0]['feat2'], color='blue', label=\"Cluster 1\")\nplt.scatter(data.loc[data['clusters']==1]['feat1'], data.loc[data['clusters']==1]['feat2'], color='red', label=\"Cluster 2\")\nplt.scatter(data.loc[data['clusters']==2]['feat1'], data.loc[data['clusters']==2]['feat2'], color='green', label=\"Cluster 3\")\nplt.scatter(kmeans.cluster_centers_[:,0], kmeans.cluster_centers_[:,1],color='yellow', marker='*', label=\"Centroids\")\nplt.xlabel(\"feat1\")\nplt.ylabel(\"feat2\")\nplt.title(\"Clusters\")\nplt.legend()\nplt.show()","instruction":"Use clustering techniques to classify documents into a set of predefined categories.","input":"Sample documents (2 different files)","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Use clustering techniques to classify documents into a set of predefined categories. \n\n### Input: Sample documents (2 different files) [\/INST] \n\n# Load the libraries\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\n\n# Load the data\ndata = pd.read_csv(\"data.csv\")\n\n# Get the data columns\ntargets = data.iloc[:, 0].values\ndoc_features = data.iloc[:, 1:].values\n\n# Fit k-means clustering\nkmeans = KMeans(n_clusters=3)\nkmeans.fit(doc_features)\n\n# Get the cluster labels\nclusters = kmeans.labels_\n\n# Assign the labels to the data points\ndata['clusters'] = clusters\n\n# Plot the data points\nplt.scatter(data.loc[data['clusters']==0]['feat1'], data.loc[data['clusters']==0]['feat2'], color='blue', label=\"Cluster 1\")\nplt.scatter(data.loc[data['clusters']==1]['feat1'], data.loc[data['clusters']==1]['feat2'], color='red', label=\"Cluster 2\")\nplt.scatter(data.loc[data['clusters']==2]['feat1'], data.loc[data['clusters']==2]['feat2'], color='green', label=\"Cluster 3\")\nplt.scatter(kmeans.cluster_centers_[:,0], kmeans.cluster_centers_[:,1],color='yellow', marker='*', label=\"Centroids\")\nplt.xlabel(\"feat1\")\nplt.ylabel(\"feat2\")\nplt.title(\"Clusters\")\nplt.legend()\nplt.show()<\/s>"}
{"output":"#include <stdio.h>  \n  \nint containDuplicate(int arr[], int n) {  \n    int i, j;  \n   \n    for (i = 0;i<n;i++){  \n       for (j = 0; j<i;j++){ \n           if (arr[i] == arr[j])  \n               return 1; \n           }  \n        }  \n    return 0;  \n}  \n\nint main() { \n    int arr[] = {2, 4, 6, 8, 10}; \n    int n = sizeof(arr) \/ sizeof(arr[0]); \n  \n    if (containDuplicate(arr, n))  \n        printf(\"Yes\");  \n    else\n        printf(\"No\");  \n    return 0; \n}","instruction":"Design an algorithm using C to check if a given array contains any duplicate elements or not.","input":"arr = [2, 4, 6, 8, 10]","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Design an algorithm using C to check if a given array contains any duplicate elements or not. \n\n### Input: arr = [2, 4, 6, 8, 10] [\/INST] \n\n#include <stdio.h>  \n  \nint containDuplicate(int arr[], int n) {  \n    int i, j;  \n   \n    for (i = 0;i<n;i++){  \n       for (j = 0; j<i;j++){ \n           if (arr[i] == arr[j])  \n               return 1; \n           }  \n        }  \n    return 0;  \n}  \n\nint main() { \n    int arr[] = {2, 4, 6, 8, 10}; \n    int n = sizeof(arr) \/ sizeof(arr[0]); \n  \n    if (containDuplicate(arr, n))  \n        printf(\"Yes\");  \n    else\n        printf(\"No\");  \n    return 0; \n}<\/s>"}
{"output":"def is_prime_prob(n):\n if n <= 1:\n return False\n for i in range(2, int(n**0.5) + 1):\n if n % i == 0:\n return False\n return True\n\nprob = is_prime_prob(11)","instruction":"Estimate a probability that the given integer is a prime number.","input":"n = 11","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Estimate a probability that the given integer is a prime number. \n\n### Input: n = 11 [\/INST] \n\ndef is_prime_prob(n):\n if n <= 1:\n return False\n for i in range(2, int(n**0.5) + 1):\n if n % i == 0:\n return False\n return True\n\nprob = is_prime_prob(11)<\/s>"}
{"output":"class Car {\n    constructor(model, year, owner, speed) {\n        this.model = model;\n        this.year = year;\n        this.owner = owner;\n        this.speed = speed;\n    }\n\n    getModel() {\n        return this.model;\n    }\n\n    getYear() {\n        return this.year;\n    }\n\n    getOwner() {\n        return this.owner;\n    }\n\n    getSpeed() {\n        return this.speed;\n    } \n\n    setSpeed(new_speed) {\n        this.speed = new_speed;\n    }  \n}","instruction":"Write a JavaScript class for a car with the following properties and methods: model, year, owner, and speed.","input":"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Write a JavaScript class for a car with the following properties and methods: model, year, owner, and speed. \n\n### Input:  [\/INST] \n\nclass Car {\n    constructor(model, year, owner, speed) {\n        this.model = model;\n        this.year = year;\n        this.owner = owner;\n        this.speed = speed;\n    }\n\n    getModel() {\n        return this.model;\n    }\n\n    getYear() {\n        return this.year;\n    }\n\n    getOwner() {\n        return this.owner;\n    }\n\n    getSpeed() {\n        return this.speed;\n    } \n\n    setSpeed(new_speed) {\n        this.speed = new_speed;\n    }  \n}<\/s>"}
{"output":"#include <iostream>\n\nvoid printPascal(int n) \n{ \n    \n    for (int line = 0; line < n; line++) \n    { \n  \n        for (int i = 0; i <= line; i++) \n            std::cout << binomialCoeff(line, i) << \" \"; \n        std::cout << std::endl; \n    } \n} \n  \nint binomialCoeff(int n, int k) \n{ \n    int res = 1; \n  \n    \/\/ Since C(n, k) = C(n, n-k) \n    if ( k > n - k ) \n        k = n - k; \n  \n    for (int i = 0; i < k; ++i) \n    { \n        res *= (n - i); \n        res \/= (i + 1); \n    } \n  \n    return res; \n} \n  \n\nint main() \n{ \n    \/\/convert it\n    int n; \n    std::cin >> n;\n    printPascal(n); \n    return 0; \n}","instruction":"Create a program in C++ to print Pascal's Triangle.","input":"5","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a program in C++ to print Pascal's Triangle. \n\n### Input: 5 [\/INST] \n\n#include <iostream>\n\nvoid printPascal(int n) \n{ \n    \n    for (int line = 0; line < n; line++) \n    { \n  \n        for (int i = 0; i <= line; i++) \n            std::cout << binomialCoeff(line, i) << \" \"; \n        std::cout << std::endl; \n    } \n} \n  \nint binomialCoeff(int n, int k) \n{ \n    int res = 1; \n  \n    \/\/ Since C(n, k) = C(n, n-k) \n    if ( k > n - k ) \n        k = n - k; \n  \n    for (int i = 0; i < k; ++i) \n    { \n        res *= (n - i); \n        res \/= (i + 1); \n    } \n  \n    return res; \n} \n  \n\nint main() \n{ \n    \/\/convert it\n    int n; \n    std::cin >> n;\n    printPascal(n); \n    return 0; \n}<\/s>"}
{"output":"import React, { Fragment, useState } from 'react';\nimport { View, Text, Keyboard, Alert } from 'react-native';\nimport mapbox from '@mapbox\/mapbox-sdk';\nimport MapView, { Marker, Callout } from 'react-native-maps';\nimport Geocoder from 'react-native-geocoding';\nimport Geolocation from '@react-native-community\/geolocation';\nimport openMap from 'react-native-open-maps';\n\nconst BookRide = () => {\n  const [destination, setDestination] = useState('');\n  const [price, setPrice] = useState(0);\n  const [origin, setOrigin] = useState({\n    location: {\n      latitude: 0,\n      longitude: 0 \n    }\n  });\n\n  const onConfirmHandler = () => {\n    \/\/ Fetch price estimate\n    fetch(\n      `https:\/\/api.mapbox.com\/directions\/v5\/mapbox\/driving\/${origin.location.longitude},${origin.location.latitude};${destination.longitude},${destination.latitude}?access_token=YOUR_MAPBOX_ACCESS_TOKEN'\n    )\n    .then(res => res.json())\n    .then(data => {\n      const estimates = data.routes[0].legs[0].duration * 0.15\n      setPrice(estimates);\n\n      \/\/ Book ride\n      \/\/ ...\n    });\n  }\n\n  return (\n      \/\/ ...\n  );\n\n};\n\nexport default BookRide;","instruction":"Create a React Native application for booking a ride. The application should have components for logging into the app, selecting a destination, and showing the estimated price of the ride.","input":"Not applicable","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a React Native application for booking a ride. The application should have components for logging into the app, selecting a destination, and showing the estimated price of the ride. \n\n### Input: Not applicable [\/INST] \n\nimport React, { Fragment, useState } from 'react';\nimport { View, Text, Keyboard, Alert } from 'react-native';\nimport mapbox from '@mapbox\/mapbox-sdk';\nimport MapView, { Marker, Callout } from 'react-native-maps';\nimport Geocoder from 'react-native-geocoding';\nimport Geolocation from '@react-native-community\/geolocation';\nimport openMap from 'react-native-open-maps';\n\nconst BookRide = () => {\n  const [destination, setDestination] = useState('');\n  const [price, setPrice] = useState(0);\n  const [origin, setOrigin] = useState({\n    location: {\n      latitude: 0,\n      longitude: 0 \n    }\n  });\n\n  const onConfirmHandler = () => {\n    \/\/ Fetch price estimate\n    fetch(\n      `https:\/\/api.mapbox.com\/directions\/v5\/mapbox\/driving\/${origin.location.longitude},${origin.location.latitude};${destination.longitude},${destination.latitude}?access_token=YOUR_MAPBOX_ACCESS_TOKEN'\n    )\n    .then(res => res.json())\n    .then(data => {\n      const estimates = data.routes[0].legs[0].duration * 0.15\n      setPrice(estimates);\n\n      \/\/ Book ride\n      \/\/ ...\n    });\n  }\n\n  return (\n      \/\/ ...\n  );\n\n};\n\nexport default BookRide;<\/s>"}
{"output":"const formatString = (str, ch) => {\n return str.replaceAll(' ', ch);\n};\n\nconsole.log(formatString(\"This is a test\", '_'));","instruction":"Create a JavaScript function to format a given string by replacing all spaces with a given character.","input":"\"This is a test\", '_'","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a JavaScript function to format a given string by replacing all spaces with a given character. \n\n### Input: \"This is a test\", '_' [\/INST] \n\nconst formatString = (str, ch) => {\n return str.replaceAll(' ', ch);\n};\n\nconsole.log(formatString(\"This is a test\", '_'));<\/s>"}
{"output":"def sum_multiples():\n    total = 0\n    for i in range(1, 500):\n        if i % 3 == 0 or i % 5 == 0:\n            total += i\n    return total\n\nresult = sum_multiples()\nprint(\"Sum of multiples:\", result)","instruction":"Find the sum of all multiples of 3 and 5 below 500.","input":"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Find the sum of all multiples of 3 and 5 below 500. \n\n### Input:  [\/INST] \n\ndef sum_multiples():\n    total = 0\n    for i in range(1, 500):\n        if i % 3 == 0 or i % 5 == 0:\n            total += i\n    return total\n\nresult = sum_multiples()\nprint(\"Sum of multiples:\", result)<\/s>"}
{"output":"def sortStrings(string_list):\n    return sorted(string_list)","instruction":"Generate a code to sort a list of strings alphabetically.","input":"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Generate a code to sort a list of strings alphabetically. \n\n### Input:  [\/INST] \n\ndef sortStrings(string_list):\n    return sorted(string_list)<\/s>"}
{"output":"public static BTreeNode arrayToTree(int[] arr) \n{ \n    if (arr == null || arr.length == 0) { \n        return null; \n    } \n\n    BTreeNode root = new BTreeNode(arr[0]); \n    Queue<BTreeNode> queue = new LinkedList<BTreeNode>(); \n    queue.add(root); \n\n    int i = 1; \n    while (!queue.isEmpty() && i < arr.length) { \n\n        BTreeNode currentNode = queue.poll(); \n        if (arr[i] != null) { \n            currentNode.left = new BTreeNode(arr[i]); \n            queue.add(currentNode.left); \n        } \n\n        if (i + 1 < arr.length && arr[i + 1] != null) { \n            currentNode.right = new BTreeNode(arr[i + 1]); \n            queue.add(currentNode.right); \n        } \n        i += 2; \n    } \n\n    return root; \n}","instruction":"Create a Java program to convert an array of integers into a binary tree structure.","input":"int[] arr = {1, 2, 3, 4, 5, 6, 7};","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a Java program to convert an array of integers into a binary tree structure. \n\n### Input: int[] arr = {1, 2, 3, 4, 5, 6, 7}; [\/INST] \n\npublic static BTreeNode arrayToTree(int[] arr) \n{ \n    if (arr == null || arr.length == 0) { \n        return null; \n    } \n\n    BTreeNode root = new BTreeNode(arr[0]); \n    Queue<BTreeNode> queue = new LinkedList<BTreeNode>(); \n    queue.add(root); \n\n    int i = 1; \n    while (!queue.isEmpty() && i < arr.length) { \n\n        BTreeNode currentNode = queue.poll(); \n        if (arr[i] != null) { \n            currentNode.left = new BTreeNode(arr[i]); \n            queue.add(currentNode.left); \n        } \n\n        if (i + 1 < arr.length && arr[i + 1] != null) { \n            currentNode.right = new BTreeNode(arr[i + 1]); \n            queue.add(currentNode.right); \n        } \n        i += 2; \n    } \n\n    return root; \n}<\/s>"}
{"output":"<form action=\"https:\/\/www.example.com\/search\" method=\"get\">\n  <input type=\"text\" name=\"q\" placeholder=\"Search query\">\n  <input type=\"submit\" value=\"Search\">\n<\/form>","instruction":"Create a HTML input form that takes a search query and submits the query to a search engine.","input":"Not applicable","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a HTML input form that takes a search query and submits the query to a search engine. \n\n### Input: Not applicable [\/INST] \n\n<form action=\"https:\/\/www.example.com\/search\" method=\"get\">\n  <input type=\"text\" name=\"q\" placeholder=\"Search query\">\n  <input type=\"submit\" value=\"Search\">\n<\/form><\/s>"}
