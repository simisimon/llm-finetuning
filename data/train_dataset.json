{"output":"#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<int> arr {10, 20, 30, 40, 50};\n    int sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        sum += arr[i];\n    }\n    std::cout << sum << std::endl;\n    return 0;\n}","instruction":"Rewrite the given code to implement a vector instead of an array.","input":"#include <iostream>\n\nint main() {\n    int arr[] {10, 20, 30, 40, 50};\n    int sum = 0;\n    for (int i = 0; i < 5; i++) {\n        sum += arr[i];\n    }\n    std::cout << sum << std::endl;\n    return 0;\n}","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Rewrite the given code to implement a vector instead of an array. \n\n### Input: #include <iostream>\n\nint main() {\n    int arr[] {10, 20, 30, 40, 50};\n    int sum = 0;\n    for (int i = 0; i < 5; i++) {\n        sum += arr[i];\n    }\n    std::cout << sum << std::endl;\n    return 0;\n} [\/INST] \n\n#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<int> arr {10, 20, 30, 40, 50};\n    int sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        sum += arr[i];\n    }\n    std::cout << sum << std::endl;\n    return 0;\n}<\/s>"}
{"output":"<?php\n    $arr = [3, 7, 8, 14, 1];\n    sort($arr);\n    print_r($arr); \n?>","instruction":"Create a PHP script that sorts the integers in a given array","input":"arr = [3, 7, 8, 14, 1]","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a PHP script that sorts the integers in a given array \n\n### Input: arr = [3, 7, 8, 14, 1] [\/INST] \n\n<?php\n    $arr = [3, 7, 8, 14, 1];\n    sort($arr);\n    print_r($arr); \n?><\/s>"}
{"output":"<!DOCTYPE html>\n<html>\n<head>\n <title>Board Game<\/title>\n<\/head>\n<body>\n <h1>Board Game<\/h1>\n <div>\n <button id=\"roll-dice-button\">Roll Dice<\/button>\n <button id=\"take-turn-button\">Take Turn<\/button>\n <button id=\"buy-property-button\">Buy Property<\/button>\n <button id=\"trade-property-button\">Trade Property<\/button>\n <button id=\"end-turn-button\">End Turn<\/button>\n <\/div>\n <h2>Game State:<\/h2>\n <div id=\"game-state-area\">\n <!-- Game state will be displayed here -->\n <\/div>\n<script>\n\/\/ Game logic goes here\n<\/script>\n<\/body>\n<\/html>","instruction":"Write an HTML page to display a board game. The page should have at least 5 buttons for different game actions and an area for displaying the game state.","input":"Not applicable","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Write an HTML page to display a board game. The page should have at least 5 buttons for different game actions and an area for displaying the game state. \n\n### Input: Not applicable [\/INST] \n\n<!DOCTYPE html>\n<html>\n<head>\n <title>Board Game<\/title>\n<\/head>\n<body>\n <h1>Board Game<\/h1>\n <div>\n <button id=\"roll-dice-button\">Roll Dice<\/button>\n <button id=\"take-turn-button\">Take Turn<\/button>\n <button id=\"buy-property-button\">Buy Property<\/button>\n <button id=\"trade-property-button\">Trade Property<\/button>\n <button id=\"end-turn-button\">End Turn<\/button>\n <\/div>\n <h2>Game State:<\/h2>\n <div id=\"game-state-area\">\n <!-- Game state will be displayed here -->\n <\/div>\n<script>\n\/\/ Game logic goes here\n<\/script>\n<\/body>\n<\/html><\/s>"}
{"output":"public class Comparison { \n \n public static void main(String args[]) { \n \n  int x;\n  int y;\n  Scanner sc = new Scanner(System.in);\n \n  System.out.println(\"Enter first number: \");\n  x = sc.nextInt();\n  \n  System.out.println(\"Enter second number: \");\n  y = sc.nextInt();\n  \n  if (x > y) {\n   System.out.println(x + \" is greater than \" + y);\n  } else if (x < y) {\n   System.out.println(x + \" is less than \" + y);\n  } else {\n   System.out.println(x + \" is equal to \" + y);\n  }\n }\n}","instruction":"Write a Java program to compare two numbers.","input":"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Write a Java program to compare two numbers. \n\n### Input:  [\/INST] \n\npublic class Comparison { \n \n public static void main(String args[]) { \n \n  int x;\n  int y;\n  Scanner sc = new Scanner(System.in);\n \n  System.out.println(\"Enter first number: \");\n  x = sc.nextInt();\n  \n  System.out.println(\"Enter second number: \");\n  y = sc.nextInt();\n  \n  if (x > y) {\n   System.out.println(x + \" is greater than \" + y);\n  } else if (x < y) {\n   System.out.println(x + \" is less than \" + y);\n  } else {\n   System.out.println(x + \" is equal to \" + y);\n  }\n }\n}<\/s>"}
{"output":"def bubbleSort(arr):\n    for i in range(len(arr)):\n        for j in range(0, len(arr)-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr","instruction":"Create a prototype of a bubble sort function in Python.","input":"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a prototype of a bubble sort function in Python. \n\n### Input:  [\/INST] \n\ndef bubbleSort(arr):\n    for i in range(len(arr)):\n        for j in range(0, len(arr)-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr<\/s>"}
{"output":"function isPalindrome(str) {\n    \/\/ remove characters not in range a-z\n    str = str.replace(\/[^a-zA-Z]+\/g, \"\");\n    \/\/ reverse string for comparison \n    let reversedStr = str.split(\"\").reverse().join(\"\");\n    \/\/ compare reversedStr to str\n    return str === reversedStr;\n}","instruction":"Write a JavaScript program to check if a given string is a palindrome.","input":"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Write a JavaScript program to check if a given string is a palindrome. \n\n### Input:  [\/INST] \n\nfunction isPalindrome(str) {\n    \/\/ remove characters not in range a-z\n    str = str.replace(\/[^a-zA-Z]+\/g, \"\");\n    \/\/ reverse string for comparison \n    let reversedStr = str.split(\"\").reverse().join(\"\");\n    \/\/ compare reversedStr to str\n    return str === reversedStr;\n}<\/s>"}
{"output":"SELECT DISTINCT category FROM products;","instruction":"Create a MySQL query to select only the distinct categories from the given table.","input":"Table: products\ncolumns: id, name, category","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a MySQL query to select only the distinct categories from the given table. \n\n### Input: Table: products\ncolumns: id, name, category [\/INST] \n\nSELECT DISTINCT category FROM products;<\/s>"}
{"output":"const express = require('express');\nconst mongoose = require('mongoose');\n\n\/\/ Connect to MongoDB\nmongoose.connect(<mongo_url>, { useNewUrlParser: true });\n\n\/\/ Create Express App\nconst app = express();\n\n\/\/ Models\nconst User = mongoose.model('User', {\n name: { type: String },\n email: { type: String, unique: true },\n});\n\nconst Product = mongoose.model('Product', {\n name: { type: String },\n price: { type: Number },\n description: { type: String },\n});\n\n\/\/ API endpoints\napp.get('\/products', (req, res) => {\n Product.find({}, (err, products) => {\n if (err) {\n return res.status(500).json({\n message: 'Error getting products'\n });\n } else {\n return res.status(200).json(products);\n }\n });\n});\n\napp.post('\/products', (req, res) => {\n const product = Product(req.body);\n product.save((err, product) => {\n if (err) {\n return res.status(500).json({\n message: 'Error creating product'\n });\n } else {\n return res.status(201).json(product);\n }\n });\n});\n\napp.get('\/products\/search', (req, res) => {\n const query = req.query.q;\n Product.find({ $text: { $search: query } }, (err, products) => {\n if (err) {\n return res.status(500).json({\n message: 'Error searching for products'\n });\n } else {\n return res.status(200).json(products);\n }\n });\n});","instruction":"Develop an API using Node.js, Express.js, and MongoDB for an online marketplace. The API should include endpoints to create a user, create a product, list all products, and search products.","input":"Not applicable","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Develop an API using Node.js, Express.js, and MongoDB for an online marketplace. The API should include endpoints to create a user, create a product, list all products, and search products. \n\n### Input: Not applicable [\/INST] \n\nconst express = require('express');\nconst mongoose = require('mongoose');\n\n\/\/ Connect to MongoDB\nmongoose.connect(<mongo_url>, { useNewUrlParser: true });\n\n\/\/ Create Express App\nconst app = express();\n\n\/\/ Models\nconst User = mongoose.model('User', {\n name: { type: String },\n email: { type: String, unique: true },\n});\n\nconst Product = mongoose.model('Product', {\n name: { type: String },\n price: { type: Number },\n description: { type: String },\n});\n\n\/\/ API endpoints\napp.get('\/products', (req, res) => {\n Product.find({}, (err, products) => {\n if (err) {\n return res.status(500).json({\n message: 'Error getting products'\n });\n } else {\n return res.status(200).json(products);\n }\n });\n});\n\napp.post('\/products', (req, res) => {\n const product = Product(req.body);\n product.save((err, product) => {\n if (err) {\n return res.status(500).json({\n message: 'Error creating product'\n });\n } else {\n return res.status(201).json(product);\n }\n });\n});\n\napp.get('\/products\/search', (req, res) => {\n const query = req.query.q;\n Product.find({ $text: { $search: query } }, (err, products) => {\n if (err) {\n return res.status(500).json({\n message: 'Error searching for products'\n });\n } else {\n return res.status(200).json(products);\n }\n });\n});<\/s>"}
{"output":"def predict_purchase(data):\n  # Preprocess the data\n  X = preprocess_data(data)\n\n  # Load the trained model\n  model = load_model('model.h5')\n\n  # Make Predictions\n  predictions = model.predict(X)\n\n  return predictions","instruction":"Design an AI algorithm to predict if a customer will purchase an item.","input":"Not applicable","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Design an AI algorithm to predict if a customer will purchase an item. \n\n### Input: Not applicable [\/INST] \n\ndef predict_purchase(data):\n  # Preprocess the data\n  X = preprocess_data(data)\n\n  # Load the trained model\n  model = load_model('model.h5')\n\n  # Make Predictions\n  predictions = model.predict(X)\n\n  return predictions<\/s>"}
{"output":"def lowercase(string):\n    \"\"\"\n    Converts a string from all uppercase to all lowercase.\n    Parameters:\n        str string: The string to convert.\n    Returns:\n        str: The converted string.\n    \"\"\"\n    return string.lower()","instruction":"Generate a code to convert a string from all uppercase to all lowercase.","input":"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Generate a code to convert a string from all uppercase to all lowercase. \n\n### Input:  [\/INST] \n\ndef lowercase(string):\n    \"\"\"\n    Converts a string from all uppercase to all lowercase.\n    Parameters:\n        str string: The string to convert.\n    Returns:\n        str: The converted string.\n    \"\"\"\n    return string.lower()<\/s>"}
{"output":"const express = require('express');\nconst { request, response } = require('express');\nconst request = require('request');\n\nconst app = express();\nconst port = 3000;\n\nconst oauthData = {\n    'client_id': 'USER_CLIENT_ID',\n    'client_secret': 'USER_CLIENT_SECRET',\n    'username': 'USER_USERNAME',\n    'password': 'USER_PASSWORD'\n};\n\napp.get('\/', (req,res) => {\n    \/\/ Build OAuth2 request\n    let options = {\n        method: 'POST',\n        url: 'https:\/\/www.oauth2provider.com\/token',\n        headers: {'Content-Type':'application\/x-www-form-urlencoded'},\n        form: oauthData\n    };\n    \n    \/\/ Make OAuth2 request\n    request(options, function(error, response, body) {\n    if (error) throw new Error(error);\n \n    let access_token = JSON.parse(body)['access_token'];\n    res.send(access_token);\n    });\n});\n\napp.listen(port, () => console.log(`App listening on port ${port}!`))","instruction":"Write a Node.js Express application to obtain an access token from an OAuth2 provider.","input":"OAuth2 client ID, secret, username, and password.","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Write a Node.js Express application to obtain an access token from an OAuth2 provider. \n\n### Input: OAuth2 client ID, secret, username, and password. [\/INST] \n\nconst express = require('express');\nconst { request, response } = require('express');\nconst request = require('request');\n\nconst app = express();\nconst port = 3000;\n\nconst oauthData = {\n    'client_id': 'USER_CLIENT_ID',\n    'client_secret': 'USER_CLIENT_SECRET',\n    'username': 'USER_USERNAME',\n    'password': 'USER_PASSWORD'\n};\n\napp.get('\/', (req,res) => {\n    \/\/ Build OAuth2 request\n    let options = {\n        method: 'POST',\n        url: 'https:\/\/www.oauth2provider.com\/token',\n        headers: {'Content-Type':'application\/x-www-form-urlencoded'},\n        form: oauthData\n    };\n    \n    \/\/ Make OAuth2 request\n    request(options, function(error, response, body) {\n    if (error) throw new Error(error);\n \n    let access_token = JSON.parse(body)['access_token'];\n    res.send(access_token);\n    });\n});\n\napp.listen(port, () => console.log(`App listening on port ${port}!`))<\/s>"}
{"output":"public class QuickSort {\n    public static void sort(int[] array) {\n        sort(array, 0, array.length - 1);\n    }\n\n    public static void sort(int[] array, int low, int high) {\n        if (low >= high) {\n            return;\n        }\n\n        int pivotIndex = partition(array, low, high);\n\n        sort(array, low, pivotIndex - 1);\n        sort(array, pivotIndex + 1, high);\n    }\n\n    public static int partition(int[] array, int low, int high) {\n        int pivotValue = array[high];\n        int i = low;\n\n        for (int j = low; j < high; j++) {\n            if (array[j] < pivotValue) {\n                swap(array, i, j);\n                i++;\n            }\n        }\n\n        swap(array, i, high);\n        return i;\n    }\n\n    public static void swap(int[] array, int i, int j) {\n        int temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n    }\n\n}","instruction":"Create a Java program that sorts a given array using quick sort.","input":"[5, 7, 13, 2, 20, 7]","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a Java program that sorts a given array using quick sort. \n\n### Input: [5, 7, 13, 2, 20, 7] [\/INST] \n\npublic class QuickSort {\n    public static void sort(int[] array) {\n        sort(array, 0, array.length - 1);\n    }\n\n    public static void sort(int[] array, int low, int high) {\n        if (low >= high) {\n            return;\n        }\n\n        int pivotIndex = partition(array, low, high);\n\n        sort(array, low, pivotIndex - 1);\n        sort(array, pivotIndex + 1, high);\n    }\n\n    public static int partition(int[] array, int low, int high) {\n        int pivotValue = array[high];\n        int i = low;\n\n        for (int j = low; j < high; j++) {\n            if (array[j] < pivotValue) {\n                swap(array, i, j);\n                i++;\n            }\n        }\n\n        swap(array, i, high);\n        return i;\n    }\n\n    public static void swap(int[] array, int i, int j) {\n        int temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n    }\n\n}<\/s>"}
{"output":"search <- \"^[0-9a-zA-Z.+-]+@[0-9a-zA-Z]+\\\\.[a-z]{2,4}$\"\n\nif (grepl(search, email_address)) {\n   print(\"Valid email address\")\n} else {\n   print(\"Invalid email address\")\n}","instruction":"Using regular expressions, write an R program to validate and identify a valid email address.","input":"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Using regular expressions, write an R program to validate and identify a valid email address. \n\n### Input:  [\/INST] \n\nsearch <- \"^[0-9a-zA-Z.+-]+@[0-9a-zA-Z]+\\\\.[a-z]{2,4}$\"\n\nif (grepl(search, email_address)) {\n   print(\"Valid email address\")\n} else {\n   print(\"Invalid email address\")\n}<\/s>"}
{"output":"def formatString(string): \n    words = string.split(\" \")\n    words = [word.capitalize() for word in words]\n    return ' '.join(words)\n\nformattedString = formatString(\"today is a BEAUTIFUL day\")\nprint(formattedString) # Today is a Beautiful Day","instruction":"Design a function that formats a string of words into a human-readable format with correctly capitalized words.","input":"\"today is a BEAUTIFUL day\"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Design a function that formats a string of words into a human-readable format with correctly capitalized words. \n\n### Input: \"today is a BEAUTIFUL day\" [\/INST] \n\ndef formatString(string): \n    words = string.split(\" \")\n    words = [word.capitalize() for word in words]\n    return ' '.join(words)\n\nformattedString = formatString(\"today is a BEAUTIFUL day\")\nprint(formattedString) # Today is a Beautiful Day<\/s>"}
{"output":"import java.math.BigDecimal;\n\npublic class TaxCalculator {\n    public static final BigDecimal RATE_INDIVIDUAL = new BigDecimal(\"0.20\");\n    public static final BigDecimal RATE_SOLE_PROPRIETOR = new BigDecimal(\"0.25\");\n\n    public static BigDecimal calculateTax(BigDecimal income, String status) {\n\n        BigDecimal taxes = BigDecimal.ZERO;\n\n        if (status.equals(\"Individual\")) {\n            taxes = income.multiply(RATE_INDIVIDUAL);\n        } else if (status.equals(\"Sole-Proprietor\")) {\n            taxes = income.multiply(RATE_SOLE_PROPRIETOR);\n        }\n\n        return taxes;\n    }\n\n    public static void main(String args[]) {\n        BigDecimal income = new BigDecimal(\"100000\");\n        String status  = \"Sole-Proprietor\";\n        BigDecimal taxesDue = TaxCalculator.calculateTax(income, status);\n        System.out.println(String.format(\"Taxes due: %s\", taxesDue.toString()));\n    }\n}","instruction":"Generate a program in your language of choice that can calculate the amount of money a person or organization owe to the government in taxes given their income and status.","input":"Income: $100,000\nStatus: Sole-Proprietor","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Generate a program in your language of choice that can calculate the amount of money a person or organization owe to the government in taxes given their income and status. \n\n### Input: Income: $100,000\nStatus: Sole-Proprietor [\/INST] \n\nimport java.math.BigDecimal;\n\npublic class TaxCalculator {\n    public static final BigDecimal RATE_INDIVIDUAL = new BigDecimal(\"0.20\");\n    public static final BigDecimal RATE_SOLE_PROPRIETOR = new BigDecimal(\"0.25\");\n\n    public static BigDecimal calculateTax(BigDecimal income, String status) {\n\n        BigDecimal taxes = BigDecimal.ZERO;\n\n        if (status.equals(\"Individual\")) {\n            taxes = income.multiply(RATE_INDIVIDUAL);\n        } else if (status.equals(\"Sole-Proprietor\")) {\n            taxes = income.multiply(RATE_SOLE_PROPRIETOR);\n        }\n\n        return taxes;\n    }\n\n    public static void main(String args[]) {\n        BigDecimal income = new BigDecimal(\"100000\");\n        String status  = \"Sole-Proprietor\";\n        BigDecimal taxesDue = TaxCalculator.calculateTax(income, status);\n        System.out.println(String.format(\"Taxes due: %s\", taxesDue.toString()));\n    }\n}<\/s>"}
{"output":"The lists [2, 3, 4], [4, 2, 3], and [3, 2, 4] all contain the same elements.","instruction":"Identify which of the following lists contain the same elements: [2, 3, 4], [4, 2, 3], [3, 2, 4]","input":"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Identify which of the following lists contain the same elements: [2, 3, 4], [4, 2, 3], [3, 2, 4] \n\n### Input:  [\/INST] \n\nThe lists [2, 3, 4], [4, 2, 3], and [3, 2, 4] all contain the same elements.<\/s>"}
{"output":"<html>\n  <head>\n    <title>Colonna Del Sole<\/title>\n    <style type=\"text\/css\">\n      body {\n        font-family: sans-serif;\n        line-height: 1.6em;\n        margin: 0;\n        padding: 0;\n        background: #FF9933;\n      }\n      .container {\n        max-width: 600px;\n        margin: 0 auto;\n        background: #FFFFFF;\n        padding: 10px 10px 20px 10px;\n        box-shadow: 0px 0px 4px 0px rgba(50,50,50,.15);\n        box-sizing: border-box;\n      }\n      .text {\n        font-size: 14px;\n        line-height: 1.4em;\n        margin-bottom: 20px;\n        text-align: center;\n      }\n      .product {\n        text-align: center;\n        margin-top: 20px;\n      }\n      .product img {\n        width: 200px;\n        margin-bottom: 10px;\n      }\n    <\/style>\n  <\/head>\n  <body>\n    <div class=\"container\">\n      <div class=\"text\">\n        <p>Bring home the flavor of Italy with Colonna del Sole's genuine Italian sauces!<\/p>\n      <\/div>\n      <div class=\"product\">\n        <img src=\"colonna-product.jpg\" alt=\"Colonna Del Sole product instant sauce\" \/>\n      <\/div>\n    <\/div>\n  <\/body>\n<\/html>","instruction":"Create an HTML\/CSS page to display an advertisement for a product.","input":"An image of the product and a caption saying \"Bring home the flavor of Italy with Colonna del Sole's genuine Italian sauces!\"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create an HTML\/CSS page to display an advertisement for a product. \n\n### Input: An image of the product and a caption saying \"Bring home the flavor of Italy with Colonna del Sole's genuine Italian sauces!\" [\/INST] \n\n<html>\n  <head>\n    <title>Colonna Del Sole<\/title>\n    <style type=\"text\/css\">\n      body {\n        font-family: sans-serif;\n        line-height: 1.6em;\n        margin: 0;\n        padding: 0;\n        background: #FF9933;\n      }\n      .container {\n        max-width: 600px;\n        margin: 0 auto;\n        background: #FFFFFF;\n        padding: 10px 10px 20px 10px;\n        box-shadow: 0px 0px 4px 0px rgba(50,50,50,.15);\n        box-sizing: border-box;\n      }\n      .text {\n        font-size: 14px;\n        line-height: 1.4em;\n        margin-bottom: 20px;\n        text-align: center;\n      }\n      .product {\n        text-align: center;\n        margin-top: 20px;\n      }\n      .product img {\n        width: 200px;\n        margin-bottom: 10px;\n      }\n    <\/style>\n  <\/head>\n  <body>\n    <div class=\"container\">\n      <div class=\"text\">\n        <p>Bring home the flavor of Italy with Colonna del Sole's genuine Italian sauces!<\/p>\n      <\/div>\n      <div class=\"product\">\n        <img src=\"colonna-product.jpg\" alt=\"Colonna Del Sole product instant sauce\" \/>\n      <\/div>\n    <\/div>\n  <\/body>\n<\/html><\/s>"}
{"output":"def search(target, elements):\n  start = 0 \n  end = len(elements) - 1\n\n  while start <= end:\n    mid = (start + end) \/\/ 2 \n      \n    if target == elements[mid]: \n      return True \n  \n    elif target < elements[mid]: \n      end = mid - 1\n\n    else: \n      start = mid + 1\n    \n  return False","instruction":"Create a searching algorithm in Python to find a target element in a list of integers.","input":"target = 7\nelements = [1, 2, 3, 4, 5, 6, 7, 8]","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a searching algorithm in Python to find a target element in a list of integers. \n\n### Input: target = 7\nelements = [1, 2, 3, 4, 5, 6, 7, 8] [\/INST] \n\ndef search(target, elements):\n  start = 0 \n  end = len(elements) - 1\n\n  while start <= end:\n    mid = (start + end) \/\/ 2 \n      \n    if target == elements[mid]: \n      return True \n  \n    elif target < elements[mid]: \n      end = mid - 1\n\n    else: \n      start = mid + 1\n    \n  return False<\/s>"}
{"output":"def closest_matching_element(input_list, user_input):\n    temp = None\n    closest_match = None\n    min_distance = None\n    for element in input_list:\n        temp = calculate_levenshtein_distance(element, user_input)\n        if (temp < min_distance) or (min_distance == None):\n            min_distance = temp\n            closest_match = element\n    return closest_match","instruction":"Find the closest matching element from the list of user input words","input":"Input list: [\"apple\",\"banana\",\"mango\",\"orange\",\"grape\"]\nUser input: \"app\"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Find the closest matching element from the list of user input words \n\n### Input: Input list: [\"apple\",\"banana\",\"mango\",\"orange\",\"grape\"]\nUser input: \"app\" [\/INST] \n\ndef closest_matching_element(input_list, user_input):\n    temp = None\n    closest_match = None\n    min_distance = None\n    for element in input_list:\n        temp = calculate_levenshtein_distance(element, user_input)\n        if (temp < min_distance) or (min_distance == None):\n            min_distance = temp\n            closest_match = element\n    return closest_match<\/s>"}
{"output":"CREATE TABLE posts (\n  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n  title VARCHAR(255) NOT NULL,\n  content TEXT NOT NULL,\n  post_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\n  author_name VARCHAR(255) NOT NULL,\n  author_bio TEXT NULL\n);","instruction":"Create a MySQL database table to store posts from a blog. The table should include a post title, post content, post date, blog author's name, and blog author's bio.","input":"Not applicable","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a MySQL database table to store posts from a blog. The table should include a post title, post content, post date, blog author's name, and blog author's bio. \n\n### Input: Not applicable [\/INST] \n\nCREATE TABLE posts (\n  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n  title VARCHAR(255) NOT NULL,\n  content TEXT NOT NULL,\n  post_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\n  author_name VARCHAR(255) NOT NULL,\n  author_bio TEXT NULL\n);<\/s>"}
{"output":"#include <stdio.h> \n\nint checkTriangle(int a, int b, int c) \n{ \n \/\/ check condition \n if (a + b <= c ||  \n  a + c <= b ||   \n  b + c <= a)  \n  return 0; \n else\n  return 1;   \n} \n\nint main() \n{ \n int a, b, c; \n \n \/\/ Take user input \n scanf(\"%d %d %d\", &a, &b, &c); \n   \n if(checkTriangle(a, b, c))\n  printf(\"Triangle can be formed\"); \n else\n  printf(\"Triangle can not be formed\"); \n  \n return 0; \n}","instruction":"Create a C program to receive 3 values and check if they can form a triangle.","input":"Not applicable","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a C program to receive 3 values and check if they can form a triangle. \n\n### Input: Not applicable [\/INST] \n\n#include <stdio.h> \n\nint checkTriangle(int a, int b, int c) \n{ \n \/\/ check condition \n if (a + b <= c ||  \n  a + c <= b ||   \n  b + c <= a)  \n  return 0; \n else\n  return 1;   \n} \n\nint main() \n{ \n int a, b, c; \n \n \/\/ Take user input \n scanf(\"%d %d %d\", &a, &b, &c); \n   \n if(checkTriangle(a, b, c))\n  printf(\"Triangle can be formed\"); \n else\n  printf(\"Triangle can not be formed\"); \n  \n return 0; \n}<\/s>"}
{"output":"def convert_cents_to_dollars(cents): \n    return cents \/ 100","instruction":"Generate a Python script to convert cents to dollars.","input":"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Generate a Python script to convert cents to dollars. \n\n### Input:  [\/INST] \n\ndef convert_cents_to_dollars(cents): \n    return cents \/ 100<\/s>"}
{"output":"def largerString(str1, str2): \nif (str1 > str2): \n        print(\"String 1 is larger\") \n    elif (str1 < str2): \n        print(\"String 2 is larger\") \n    else: \n        print(\"Both are equal\")","instruction":"Create a program to determine which of two given strings is lexicographically larger.","input":"str1 = \"apple\"\nstr2 = \"banana\"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a program to determine which of two given strings is lexicographically larger. \n\n### Input: str1 = \"apple\"\nstr2 = \"banana\" [\/INST] \n\ndef largerString(str1, str2): \nif (str1 > str2): \n        print(\"String 1 is larger\") \n    elif (str1 < str2): \n        print(\"String 2 is larger\") \n    else: \n        print(\"Both are equal\")<\/s>"}
{"output":"\/\/ Controller for the Index view\npublic class HomeController: Controller {\n public ActionResult Index() {\n  return View();\n }\n}\n\n\/\/ View for the Index page\n@{\n ViewBag.Title = \"Index\";\n}\n\n<h2>Index<\/h2>\n<a href=\"~\/SecondView\">Go to the second view<\/a>\n\n\/\/ Controller for the Second view\npublic class HomeController: Controller {\n public ActionResult SecondView() {\n  return View();\n }\n}\n\n\/\/ View for the Second page\n@{\n ViewBag.Title = \"SecondView\";\n}\n\n<h2>Second View<\/h2>","instruction":"Create a basic ASP.NET MVC web application with an index view, which displays a link to another view.","input":"Not applicable","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a basic ASP.NET MVC web application with an index view, which displays a link to another view. \n\n### Input: Not applicable [\/INST] \n\n\/\/ Controller for the Index view\npublic class HomeController: Controller {\n public ActionResult Index() {\n  return View();\n }\n}\n\n\/\/ View for the Index page\n@{\n ViewBag.Title = \"Index\";\n}\n\n<h2>Index<\/h2>\n<a href=\"~\/SecondView\">Go to the second view<\/a>\n\n\/\/ Controller for the Second view\npublic class HomeController: Controller {\n public ActionResult SecondView() {\n  return View();\n }\n}\n\n\/\/ View for the Second page\n@{\n ViewBag.Title = \"SecondView\";\n}\n\n<h2>Second View<\/h2><\/s>"}
{"output":"def insertion_sort(arr):\n    # loop over the elements of the array\n    for i in range(len(arr)):\n        j = i\n        # Move elements of arr[0..i-1], that are\n        # greater than the current element, to one position ahead\n        # of their current position \n        while j > 0 and arr[j-1] > arr[j]:\n            arr[j], arr[j-1] = arr[j-1], arr[j]\n            j -= 1\n    \n    return arr\n\narr = [2, 4, 3, 1, 9, 6]\nprint(insertion_sort(arr))","instruction":"Develop a program to take an array as input and sort it according to insertion sort algorithm.","input":"arr = [2, 4, 3, 1, 9, 6]","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Develop a program to take an array as input and sort it according to insertion sort algorithm. \n\n### Input: arr = [2, 4, 3, 1, 9, 6] [\/INST] \n\ndef insertion_sort(arr):\n    # loop over the elements of the array\n    for i in range(len(arr)):\n        j = i\n        # Move elements of arr[0..i-1], that are\n        # greater than the current element, to one position ahead\n        # of their current position \n        while j > 0 and arr[j-1] > arr[j]:\n            arr[j], arr[j-1] = arr[j-1], arr[j]\n            j -= 1\n    \n    return arr\n\narr = [2, 4, 3, 1, 9, 6]\nprint(insertion_sort(arr))<\/s>"}
{"output":"class Person:\n def __init__(self, name, age):\n   self.name = name\n   self.age = age\n\n def get_name(self):\n   return self.name\n\n def get_age(self):\n   return self.age\n\n def set_name(self, name):\n   self.name = name\n\n def set_age(self, age):\n   self.age = age","instruction":"Generate a Python class for a Person that has methods and attributes to work with names and ages.","input":"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Generate a Python class for a Person that has methods and attributes to work with names and ages. \n\n### Input:  [\/INST] \n\nclass Person:\n def __init__(self, name, age):\n   self.name = name\n   self.age = age\n\n def get_name(self):\n   return self.name\n\n def get_age(self):\n   return self.age\n\n def set_name(self, name):\n   self.name = name\n\n def set_age(self, age):\n   self.age = age<\/s>"}
{"output":"def absolute_difference(a, b)\n    return (a-b).abs\nend\n\nresult = absolute_difference(-5, 3)\nputs result","instruction":"Develop a program in Ruby which takes two integers as input and returns their difference in absolute value.","input":"-5, 3","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Develop a program in Ruby which takes two integers as input and returns their difference in absolute value. \n\n### Input: -5, 3 [\/INST] \n\ndef absolute_difference(a, b)\n    return (a-b).abs\nend\n\nresult = absolute_difference(-5, 3)\nputs result<\/s>"}
{"output":"def generate_combinatorial_objects(n):\n    if n == 0:\n        return [[]]\n    else:\n        result = []\n        for combo in generate_combinatorial_objects(n-1):\n            result.append(combo + [True])\n            result.append(combo + [False])\n        return result","instruction":"Create a program to generate combinatorial objects.","input":"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a program to generate combinatorial objects. \n\n### Input:  [\/INST] \n\ndef generate_combinatorial_objects(n):\n    if n == 0:\n        return [[]]\n    else:\n        result = []\n        for combo in generate_combinatorial_objects(n-1):\n            result.append(combo + [True])\n            result.append(combo + [False])\n        return result<\/s>"}
{"output":"def remove_whitespace(given_string):\n    result = \"\"\n\n    for char in given_string:\n        if char != \" \":\n            result += char\n    \n    return result\n\nresult = remove_whitespace(\"Hello World\")\nprint(result)","instruction":"Remove all whitespaces from the given string.","input":"\"Hello World \"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Remove all whitespaces from the given string. \n\n### Input: \"Hello World \" [\/INST] \n\ndef remove_whitespace(given_string):\n    result = \"\"\n\n    for char in given_string:\n        if char != \" \":\n            result += char\n    \n    return result\n\nresult = remove_whitespace(\"Hello World\")\nprint(result)<\/s>"}
{"output":"<html>\n<head>\n<script>\n\/\/ List of global variables\nvar canvas; \/\/ The canvas element to draw in\nvar ctx;    \/\/ The context of the canvas\nvar FPS = 60;    \/\/ Game frames per second\n\n\/\/ The main game loop\nvar mainLoop = function() {\n  update();\n  draw();\n  setTimeout(mainLoop, 1000\/FPS);\n};\n\n\/\/ Game update logic \nvar update = function() {\n  \/\/ Update game logic here\n};\n\n\/\/ Game draw logic \nvar draw = function(){\n  ctx.fillStyle = \"#FFF\";\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  \/\/ Draw stuff here\n};\n\n\/\/ Game initialization \nvar initGame = function() {\n  canvas = document.getElementById(\"gameCanvas\");\n  ctx = canvas.getContext(\"2d\");\n\n  mainLoop();\n};\n\n<\/script>\n<\/head>\n<body onload=\"initGame()\">\n<canvas id=\"gameCanvas\" width=\"800\" height=\"600\"><\/canvas>\n<\/body>\n<\/html>","instruction":"Develop a mobile game using JavaScript, HTML and Canvas.","input":"Not applicable","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Develop a mobile game using JavaScript, HTML and Canvas. \n\n### Input: Not applicable [\/INST] \n\n<html>\n<head>\n<script>\n\/\/ List of global variables\nvar canvas; \/\/ The canvas element to draw in\nvar ctx;    \/\/ The context of the canvas\nvar FPS = 60;    \/\/ Game frames per second\n\n\/\/ The main game loop\nvar mainLoop = function() {\n  update();\n  draw();\n  setTimeout(mainLoop, 1000\/FPS);\n};\n\n\/\/ Game update logic \nvar update = function() {\n  \/\/ Update game logic here\n};\n\n\/\/ Game draw logic \nvar draw = function(){\n  ctx.fillStyle = \"#FFF\";\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  \/\/ Draw stuff here\n};\n\n\/\/ Game initialization \nvar initGame = function() {\n  canvas = document.getElementById(\"gameCanvas\");\n  ctx = canvas.getContext(\"2d\");\n\n  mainLoop();\n};\n\n<\/script>\n<\/head>\n<body onload=\"initGame()\">\n<canvas id=\"gameCanvas\" width=\"800\" height=\"600\"><\/canvas>\n<\/body>\n<\/html><\/s>"}
{"output":"#!\/bin\/bash\n\n# Set input and output directories\ninput_dir=\"submissions\"\noutput_dir=\"results\"\n \n# Create an empty output directory\nmkdir -p $output_dir\n \n# Grade the assignments\nfor file in $(ls $input_dir\/*.txt); do\n  student_id=$(basename \"$file\" .txt)\n  mark=$(tail -1 $file)\n  echo \"$student_id $mark\" >> \"$output_dir\/grades.txt\"\ndone","instruction":"Create a bash script to grade a set of student assignments.","input":"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a bash script to grade a set of student assignments. \n\n### Input:  [\/INST] \n\n#!\/bin\/bash\n\n# Set input and output directories\ninput_dir=\"submissions\"\noutput_dir=\"results\"\n \n# Create an empty output directory\nmkdir -p $output_dir\n \n# Grade the assignments\nfor file in $(ls $input_dir\/*.txt); do\n  student_id=$(basename \"$file\" .txt)\n  mark=$(tail -1 $file)\n  echo \"$student_id $mark\" >> \"$output_dir\/grades.txt\"\ndone<\/s>"}
{"output":"def isOdd(num):\n    return num % 2 != 0\n\nresult = isOdd(7)\nprint(result)","instruction":"Create a predicate function that checks if a number is odd.","input":"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a predicate function that checks if a number is odd. \n\n### Input:  [\/INST] \n\ndef isOdd(num):\n    return num % 2 != 0\n\nresult = isOdd(7)\nprint(result)<\/s>"}
{"output":"import numpy as np\nimport matplotlib.pyplot as plt\n\ndef r2_score(y, y_pred):\n    '''Calculates the R-squared score for a regression model.'''\n    u = ((y - y_pred) ** 2).sum()\n    v = ((y - y.mean()) ** 2).sum()\n    return 1. - u\/v\n\ndef select_features(X, y, feature_names, score_func):\n    '''Selects the most relevant features for a regression problem.'''\n    best_score = 0.\n    best_features = []\n    n_features = X.shape[1]\n\n    for n in range(1, n_features + 1):\n        for i in range(n_features):\n            if i in best_features:\n                continue\n\n            cur_features = list(best_features) + [i]\n            X_subset = X[:, cur_features]\n            score = score_func(y, X_subset.dot(np.linalg.pinv(X_subset)))\n            if score > best_score:\n                best_score = score\n                best_features = cur_features\n\n    print('Best Score: {}'.format(best_score))\n    print('Features chosen:')\n    for i in best_features:\n        print('- {}'.format(feature_names[i]))","instruction":"Develop a feature selection algorithm to identify the most relevant features for a regression task.","input":"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Develop a feature selection algorithm to identify the most relevant features for a regression task. \n\n### Input:  [\/INST] \n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef r2_score(y, y_pred):\n    '''Calculates the R-squared score for a regression model.'''\n    u = ((y - y_pred) ** 2).sum()\n    v = ((y - y.mean()) ** 2).sum()\n    return 1. - u\/v\n\ndef select_features(X, y, feature_names, score_func):\n    '''Selects the most relevant features for a regression problem.'''\n    best_score = 0.\n    best_features = []\n    n_features = X.shape[1]\n\n    for n in range(1, n_features + 1):\n        for i in range(n_features):\n            if i in best_features:\n                continue\n\n            cur_features = list(best_features) + [i]\n            X_subset = X[:, cur_features]\n            score = score_func(y, X_subset.dot(np.linalg.pinv(X_subset)))\n            if score > best_score:\n                best_score = score\n                best_features = cur_features\n\n    print('Best Score: {}'.format(best_score))\n    print('Features chosen:')\n    for i in best_features:\n        print('- {}'.format(feature_names[i]))<\/s>"}
{"output":"<form method=\"post\">\n    <div>\n        <label for=\"name\">Name<\/label>\n        <input type=\"text\" name=\"name\" required>\n    <\/div>\n    <div>\n        <label for=\"email\">Email<\/label>\n        <input type=\"email\" name=\"email\" required>\n    <\/div>\n    <div>\n        <label for=\"password\">Password<\/label>\n        <input type=\"password\" name=\"password\" required>\n    <\/div>\n    <input type=\"submit\" value=\"Submit\">\n<\/form>","instruction":"Create a HTML interface for entering data into a database.","input":"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a HTML interface for entering data into a database. \n\n### Input:  [\/INST] \n\n<form method=\"post\">\n    <div>\n        <label for=\"name\">Name<\/label>\n        <input type=\"text\" name=\"name\" required>\n    <\/div>\n    <div>\n        <label for=\"email\">Email<\/label>\n        <input type=\"email\" name=\"email\" required>\n    <\/div>\n    <div>\n        <label for=\"password\">Password<\/label>\n        <input type=\"password\" name=\"password\" required>\n    <\/div>\n    <input type=\"submit\" value=\"Submit\">\n<\/form><\/s>"}
{"output":"#include <iostream>\n#include <algorithm>  \n#include <array>\n\nstd::array<int, 10> generatePermutation() {\n\n    \/\/ create an array containing the numbers 1 to 10\n    std::array<int, 10> arr = {1, 2, 3, 4, 5, 6, 7, 8,  9, 10}; \n\n    \/\/ using built-in random generator  \n    \/\/ shuffle the array \n    std::random_shuffle(arr.begin(), arr.end()); \n\n    return arr;\n}\n\nint main() { \n    std::array<int, 10> permutation = generatePermutation();\n\n    \/\/ print the original array \n    std::cout << \"Randomly generated permutation: \";\n    for (unsigned int i = 0; i < 10; i++) {  \n        std::cout << permutation[i] << \" \";\n    } \n    return 0; \n}","instruction":"Implement a C++ program that generates a random permutation of numbers between 1 to 10.","input":"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Implement a C++ program that generates a random permutation of numbers between 1 to 10. \n\n### Input:  [\/INST] \n\n#include <iostream>\n#include <algorithm>  \n#include <array>\n\nstd::array<int, 10> generatePermutation() {\n\n    \/\/ create an array containing the numbers 1 to 10\n    std::array<int, 10> arr = {1, 2, 3, 4, 5, 6, 7, 8,  9, 10}; \n\n    \/\/ using built-in random generator  \n    \/\/ shuffle the array \n    std::random_shuffle(arr.begin(), arr.end()); \n\n    return arr;\n}\n\nint main() { \n    std::array<int, 10> permutation = generatePermutation();\n\n    \/\/ print the original array \n    std::cout << \"Randomly generated permutation: \";\n    for (unsigned int i = 0; i < 10; i++) {  \n        std::cout << permutation[i] << \" \";\n    } \n    return 0; \n}<\/s>"}
{"output":"SELECT\n o.order_id,\n c.customer_name,\n p.product_name,\n o.order_date\nFROM\n orders o\nINNER JOIN customers c ON o.customer_id = c.customer_id\nINNER JOIN products p ON o.product_id = p.product_id\nWHERE o.order_date > DATE_SUB(NOW(), INTERVAL 1 MONTH)","instruction":"Write a SQLQuery to find detail on current customer orders.","input":"Not applicable","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Write a SQLQuery to find detail on current customer orders. \n\n### Input: Not applicable [\/INST] \n\nSELECT\n o.order_id,\n c.customer_name,\n p.product_name,\n o.order_date\nFROM\n orders o\nINNER JOIN customers c ON o.customer_id = c.customer_id\nINNER JOIN products p ON o.product_id = p.product_id\nWHERE o.order_date > DATE_SUB(NOW(), INTERVAL 1 MONTH)<\/s>"}
{"output":"#include <iostream>\n#include <string>\n#include <vector>\n \nusing namespace std;\n\n\/\/ Function to calculate the number of operations \n\/\/ needed to transform one string to the other\nint editDistance(string s1, string s2){\n \n int m = s1.length();\n int n = s2.length();\n \n \/\/ Create a vector of vectors M to store the results\n vector< vector<int> > M(m + 1);\n \n \/\/ Populate the vectors with 0\n for (int i = 0; i <= m; i++){\n  M[i] = vector<int>(n + 1);\n }\n \n \/\/ Initialize the values in M[i][0] to i \n for (int i = 0; i <= m; i++){\n  M[i][0] = i;\n }\n \n \/\/ Initialize the values in M[0][j] to j\n for (int j = 0; j <= n; j++){\n  M[0][j] = j;\n }\n \n \/\/ Iterate through the strings to compute the edit distance\n for (int i = 1; i <= m; i++){\n  for (int j = 1; j <= n; j++){\n    \n   \/\/ If the characters at the current indices are same,\n   \/\/ the cost is 0\n   if (s1[i - 1] == s2[j - 1]){\n    M[i][j] = M[i - 1][j - 1];\n   }\n   \/\/ If the characters are not same\n   else {\n    \/\/ Take the min of the three operations\n    \/\/ and add 1 for the current operation\n    M[i][j] = 1 + min(M[i][j - 1], \n     min(M[i - 1][j], \n     M[i - 1][j - 1]));\n   } \n  }\n }\n \n \/\/ Return the last value which is the edit distance\n return M[m][n];\n}\n\n\/\/ Driver code\nint main(){\n \n \/\/ Strings for which to compute edit distance\n string s1 = \"saturday\";\n string s2 = \"sunday\";\n \n \/\/ Compute and print the result\n int editDist = editDistance(s1, s2);\n cout << \"Edit Distance: \" << editDist << endl;\n \n return 0;\n}","instruction":"Create a function in C++ that computes the edit distance between two strings of characters.","input":"Not applicable","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a function in C++ that computes the edit distance between two strings of characters. \n\n### Input: Not applicable [\/INST] \n\n#include <iostream>\n#include <string>\n#include <vector>\n \nusing namespace std;\n\n\/\/ Function to calculate the number of operations \n\/\/ needed to transform one string to the other\nint editDistance(string s1, string s2){\n \n int m = s1.length();\n int n = s2.length();\n \n \/\/ Create a vector of vectors M to store the results\n vector< vector<int> > M(m + 1);\n \n \/\/ Populate the vectors with 0\n for (int i = 0; i <= m; i++){\n  M[i] = vector<int>(n + 1);\n }\n \n \/\/ Initialize the values in M[i][0] to i \n for (int i = 0; i <= m; i++){\n  M[i][0] = i;\n }\n \n \/\/ Initialize the values in M[0][j] to j\n for (int j = 0; j <= n; j++){\n  M[0][j] = j;\n }\n \n \/\/ Iterate through the strings to compute the edit distance\n for (int i = 1; i <= m; i++){\n  for (int j = 1; j <= n; j++){\n    \n   \/\/ If the characters at the current indices are same,\n   \/\/ the cost is 0\n   if (s1[i - 1] == s2[j - 1]){\n    M[i][j] = M[i - 1][j - 1];\n   }\n   \/\/ If the characters are not same\n   else {\n    \/\/ Take the min of the three operations\n    \/\/ and add 1 for the current operation\n    M[i][j] = 1 + min(M[i][j - 1], \n     min(M[i - 1][j], \n     M[i - 1][j - 1]));\n   } \n  }\n }\n \n \/\/ Return the last value which is the edit distance\n return M[m][n];\n}\n\n\/\/ Driver code\nint main(){\n \n \/\/ Strings for which to compute edit distance\n string s1 = \"saturday\";\n string s2 = \"sunday\";\n \n \/\/ Compute and print the result\n int editDist = editDistance(s1, s2);\n cout << \"Edit Distance: \" << editDist << endl;\n \n return 0;\n}<\/s>"}
{"output":"{\n    \"pagination\": {\n        \"page\": 1,\n        \"per_page\": 10,\n        \"total\": 20\n    },\n    \"data\": [\n        {\n            \"id\": 1,\n            \"name\": \"Alice\"\n        },\n        {\n            \"id\": 2,\n            \"name\": \"Bob\"\n        },\n        {\n            \"id\": 3,\n            \"name\": \"Carol\"\n        },\n        {\n            \"id\": 4,\n            \"name\": \"Dave\"\n        },\n        {\n            \"id\": 5,\n            \"name\": \"Eve\"\n        },\n        {\n            \"id\": 6,\n            \"name\": \"Frank\"\n        },\n        {\n            \"id\": 7,\n            \"name\": \"Grace\"\n        },\n        {\n            \"id\": 8,\n            \"name\": \"Heidi\"\n        },\n        {\n            \"id\": 9,\n            \"name\": \"Ivan\"\n        },\n        {\n            \"id\": 10,\n            \"name\": \"Jack\"\n        }\n    ]\n}","instruction":"Generate sample JSON content for a web API response which contains a list of records and meta information for a paginated response.","input":"Not applicable","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Generate sample JSON content for a web API response which contains a list of records and meta information for a paginated response. \n\n### Input: Not applicable [\/INST] \n\n{\n    \"pagination\": {\n        \"page\": 1,\n        \"per_page\": 10,\n        \"total\": 20\n    },\n    \"data\": [\n        {\n            \"id\": 1,\n            \"name\": \"Alice\"\n        },\n        {\n            \"id\": 2,\n            \"name\": \"Bob\"\n        },\n        {\n            \"id\": 3,\n            \"name\": \"Carol\"\n        },\n        {\n            \"id\": 4,\n            \"name\": \"Dave\"\n        },\n        {\n            \"id\": 5,\n            \"name\": \"Eve\"\n        },\n        {\n            \"id\": 6,\n            \"name\": \"Frank\"\n        },\n        {\n            \"id\": 7,\n            \"name\": \"Grace\"\n        },\n        {\n            \"id\": 8,\n            \"name\": \"Heidi\"\n        },\n        {\n            \"id\": 9,\n            \"name\": \"Ivan\"\n        },\n        {\n            \"id\": 10,\n            \"name\": \"Jack\"\n        }\n    ]\n}<\/s>"}
{"output":"curl -d {'word': 'hello', 'document': 'data.txt' } -X POST http:\/\/website.com\/search","instruction":"Create a HTTP POST request to search for a word in a document.","input":"Word: hello\nDocument: data.txt","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a HTTP POST request to search for a word in a document. \n\n### Input: Word: hello\nDocument: data.txt [\/INST] \n\ncurl -d {'word': 'hello', 'document': 'data.txt' } -X POST http:\/\/website.com\/search<\/s>"}
{"output":"SELECT MAX(Price) FROM Table;","instruction":"Write a SQL query to find the maximum value in the Price column of a table.","input":"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Write a SQL query to find the maximum value in the Price column of a table. \n\n### Input:  [\/INST] \n\nSELECT MAX(Price) FROM Table;<\/s>"}
{"output":"def print_unique(numbers):\n    unique_numbers = []\n    for n in numbers:\n        if n not in unique_numbers:\n            unique_numbers.append(n)\n            print(n)","instruction":"Code a function that takes in an array of integers and prints out the unique elements.","input":"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Code a function that takes in an array of integers and prints out the unique elements. \n\n### Input:  [\/INST] \n\ndef print_unique(numbers):\n    unique_numbers = []\n    for n in numbers:\n        if n not in unique_numbers:\n            unique_numbers.append(n)\n            print(n)<\/s>"}
{"output":"def area_of_circle(radius):\n    return 3.14 * (radius**2)","instruction":"Generate a function to calculate the area of a circle, given the radius as an input parameter.","input":"radius = 5","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Generate a function to calculate the area of a circle, given the radius as an input parameter. \n\n### Input: radius = 5 [\/INST] \n\ndef area_of_circle(radius):\n    return 3.14 * (radius**2)<\/s>"}
{"output":"public static void sortAscending(int[] arr) \n{ \n    int n = arr.length; \n  \n    \/\/ One by one move boundary of unsorted subarray \n    for (int i = 0; i < n-1; i++) \n    { \n        \/\/ Find the minimum element in unsorted array \n        int min_idx = i; \n        for (int j = i+1; j < n; j++) \n            if (arr[j] < arr[min_idx]) \n                min_idx = j; \n  \n        \/\/ Swap the found minimum element with the first \n        \/\/ element \n        int temp = arr[min_idx]; \n        arr[min_idx] = arr[i]; \n        arr[i] = temp; \n    } \n} \n  \n\/\/ Driver code \npublic static void main(String[] args) \n{ \n    int arr[] = {5, 8, 2, 4, 10, 1, 7}; \n  \n    sortAscending(arr); \n  \n    System.out.println(\"Sorted array\"); \n    printArray(arr); \n}","instruction":"Design a program in Java to sort a given array of integers in ascending order.","input":"[5, 8, 2, 4, 10, 1, 7]","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Design a program in Java to sort a given array of integers in ascending order. \n\n### Input: [5, 8, 2, 4, 10, 1, 7] [\/INST] \n\npublic static void sortAscending(int[] arr) \n{ \n    int n = arr.length; \n  \n    \/\/ One by one move boundary of unsorted subarray \n    for (int i = 0; i < n-1; i++) \n    { \n        \/\/ Find the minimum element in unsorted array \n        int min_idx = i; \n        for (int j = i+1; j < n; j++) \n            if (arr[j] < arr[min_idx]) \n                min_idx = j; \n  \n        \/\/ Swap the found minimum element with the first \n        \/\/ element \n        int temp = arr[min_idx]; \n        arr[min_idx] = arr[i]; \n        arr[i] = temp; \n    } \n} \n  \n\/\/ Driver code \npublic static void main(String[] args) \n{ \n    int arr[] = {5, 8, 2, 4, 10, 1, 7}; \n  \n    sortAscending(arr); \n  \n    System.out.println(\"Sorted array\"); \n    printArray(arr); \n}<\/s>"}
{"output":"The model should be trained on a large corpus of song lyrics to generate new lyrics based on the syntax, structure, and tone of the provided lyrics. The model should be able to generate long blocks of text, as well as specific lines when provided with a prompt.","instruction":"Use a recurrent neural network to generate song lyrics.","input":"Not applicable","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Use a recurrent neural network to generate song lyrics. \n\n### Input: Not applicable [\/INST] \n\nThe model should be trained on a large corpus of song lyrics to generate new lyrics based on the syntax, structure, and tone of the provided lyrics. The model should be able to generate long blocks of text, as well as specific lines when provided with a prompt.<\/s>"}
{"output":"The Hamming distance between the two binary strings \"01001\" and \"11011\" is 4.","instruction":"What is the hamming distance between the two binary strings \"01001\" and \"11011\"?","input":"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: What is the hamming distance between the two binary strings \"01001\" and \"11011\"? \n\n### Input:  [\/INST] \n\nThe Hamming distance between the two binary strings \"01001\" and \"11011\" is 4.<\/s>"}
{"output":"import React, { useState, useEffect } from 'react';\n\nconst App = () => {\n const [items, setItems] = useState([]);\n const [selectedItem, setSelectedItem] = useState(null);\n\n useEffect(() => {\n   fetch('\/api\/items')\n     .then(res => res.json())\n     .then(data => setItems(data));\n }, []);\n\n const handleItemClick = item => {\n   setSelectedItem(item);\n };\n\n return (\n   <div>\n     <ul>\n       {items.map(item => (\n         <li\n           key={item.id}\n onClick={() => handleItemClick(item)}\n>\n           {item.name}\n         <\/li>\n       ))}\n     <\/ul>\n     {selectedItem && (\n       <div>\n         <h3>{selectedItem.name}<\/h3>\n         <p>{selectedItem.description}<\/p>\n       <\/div>\n     )}\n   <\/div>\n );\n};\n\nexport default App;","instruction":"Create a React application that displays a list of items fetched from an API. On click of each item, display more details about it.","input":"Not applicable","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a React application that displays a list of items fetched from an API. On click of each item, display more details about it. \n\n### Input: Not applicable [\/INST] \n\nimport React, { useState, useEffect } from 'react';\n\nconst App = () => {\n const [items, setItems] = useState([]);\n const [selectedItem, setSelectedItem] = useState(null);\n\n useEffect(() => {\n   fetch('\/api\/items')\n     .then(res => res.json())\n     .then(data => setItems(data));\n }, []);\n\n const handleItemClick = item => {\n   setSelectedItem(item);\n };\n\n return (\n   <div>\n     <ul>\n       {items.map(item => (\n         <li\n           key={item.id}\n onClick={() => handleItemClick(item)}\n>\n           {item.name}\n         <\/li>\n       ))}\n     <\/ul>\n     {selectedItem && (\n       <div>\n         <h3>{selectedItem.name}<\/h3>\n         <p>{selectedItem.description}<\/p>\n       <\/div>\n     )}\n   <\/div>\n );\n};\n\nexport default App;<\/s>"}
{"output":"sentence = 'The quick brown fox jumps over the lazy dog'\n\nwords = sentence.split()\n\nnew_sentence = \"\"\n\nfor word in words:\n    reversed_word = word[::-1]\n    new_sentence += reversed_word + \" \"\n\nprint(new_sentence.strip())","instruction":"Reverse the order of characters in all the words in a given sentence.","input":"sentence = 'The quick brown fox jumps over the lazy dog'","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Reverse the order of characters in all the words in a given sentence. \n\n### Input: sentence = 'The quick brown fox jumps over the lazy dog' [\/INST] \n\nsentence = 'The quick brown fox jumps over the lazy dog'\n\nwords = sentence.split()\n\nnew_sentence = \"\"\n\nfor word in words:\n    reversed_word = word[::-1]\n    new_sentence += reversed_word + \" \"\n\nprint(new_sentence.strip())<\/s>"}
{"output":"<html>\n<body>\n    <form action=\"\" method=\"POST\">\n        <input type=\"text\" name=\"firstname\" placeholder=\"First name\">\n        <input type=\"text\" name=\"lastname\" placeholder=\"Last name\">\n        <input type=\"submit\" value=\"Submit\">\n    <\/form>\n<\/body>\n<\/html>","instruction":"Create a web page that has a form with two fields.","input":"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a web page that has a form with two fields. \n\n### Input:  [\/INST] \n\n<html>\n<body>\n    <form action=\"\" method=\"POST\">\n        <input type=\"text\" name=\"firstname\" placeholder=\"First name\">\n        <input type=\"text\" name=\"lastname\" placeholder=\"Last name\">\n        <input type=\"submit\" value=\"Submit\">\n    <\/form>\n<\/body>\n<\/html><\/s>"}
{"output":"import java.util.*; \n\npublic class Program {\n public static void main(String[] args) {\n  \/\/ creating a set to store the words \n  Set<String> wordsSet = new HashSet<>(); \n\n  \/\/ splitting the string into individual words \n  String[] words = args[0].split(\" \"); \n\n  \/\/ adding the words to the set \n  for (String word : words) {\n   wordsSet.add(word); \n  }\n\n  \/\/ creating a list from the set \n  List<String> wordsList = new ArrayList<>(wordsSet); \n\n  \/\/ sorting the list \n  Collections.sort(wordsList); \n\n  \/\/ printing out the words \n  for (String word : wordsList) {\n   System.out.println(word); \n  }\n }\n}","instruction":"Create a program in Java that takes a string of words as input. The program should remove any duplicates and print out the words in alphabetical order.","input":"words = \"hello world hello goodbye world hello\"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a program in Java that takes a string of words as input. The program should remove any duplicates and print out the words in alphabetical order. \n\n### Input: words = \"hello world hello goodbye world hello\" [\/INST] \n\nimport java.util.*; \n\npublic class Program {\n public static void main(String[] args) {\n  \/\/ creating a set to store the words \n  Set<String> wordsSet = new HashSet<>(); \n\n  \/\/ splitting the string into individual words \n  String[] words = args[0].split(\" \"); \n\n  \/\/ adding the words to the set \n  for (String word : words) {\n   wordsSet.add(word); \n  }\n\n  \/\/ creating a list from the set \n  List<String> wordsList = new ArrayList<>(wordsSet); \n\n  \/\/ sorting the list \n  Collections.sort(wordsList); \n\n  \/\/ printing out the words \n  for (String word : wordsList) {\n   System.out.println(word); \n  }\n }\n}<\/s>"}
{"output":"import React from 'react';\n\nconst ProgressBar = ({ value }) => {\n    const percentage = value + '%'\n    return (\n        <div className=\"progress-bar\">\n            <div className=\"progress-bar-fill\" style={{width: percentage}} \/>\n        <\/div>\n    )\n}\n\nexport default ProgressBar;","instruction":"Create a React component to show a progress bar.","input":"The current progress value as a percentage","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a React component to show a progress bar. \n\n### Input: The current progress value as a percentage [\/INST] \n\nimport React from 'react';\n\nconst ProgressBar = ({ value }) => {\n    const percentage = value + '%'\n    return (\n        <div className=\"progress-bar\">\n            <div className=\"progress-bar-fill\" style={{width: percentage}} \/>\n        <\/div>\n    )\n}\n\nexport default ProgressBar;<\/s>"}
{"output":"def linearSearch(lst, target):\n for i in range(len(lst)):\n if lst[i] == target:\n return i\n return -1\n\nlst = [1, 2, 3, 4, 5, 6]\ntarget = 4\nresult = linearSearch(lst, target)\n\nif result == -1:\n print(\"Element is not present in the list\")\nelse:\n print(\"Element is present at index\", result)","instruction":"Write a Python script to implement a linear search algorithm.","input":"lst = [1, 2, 3, 4, 5, 6]\ntarget = 4","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Write a Python script to implement a linear search algorithm. \n\n### Input: lst = [1, 2, 3, 4, 5, 6]\ntarget = 4 [\/INST] \n\ndef linearSearch(lst, target):\n for i in range(len(lst)):\n if lst[i] == target:\n return i\n return -1\n\nlst = [1, 2, 3, 4, 5, 6]\ntarget = 4\nresult = linearSearch(lst, target)\n\nif result == -1:\n print(\"Element is not present in the list\")\nelse:\n print(\"Element is present at index\", result)<\/s>"}
{"output":"def detect_plagarism(text1, text2):\n    # convert text into n-gram\n    n_gram1 = []\n    n_gram2 = []\n    for i in range(1, len(text1.split())):\n        n_gram1.append(' '.join(text1.split()[i-1:i+1]))\n    for i in range(1, len(text2.split())):\n        n_gram2.append(' '.join(text2.split()[i-1:i+1]))\n \n    # calculate jaccard similarity\n    s1 = set(n_gram1)\n    s2 = set(n_gram2)\n    jaccard_similarity = len(s1 & s2) \/ len(s1 | s2)\n \n    return jaccard_similarity","instruction":"Design an algorithm to detect plagiarism in two given texts.","input":"text1 = \u201dSoftware engineering is the engineering of software. It is the application of engineering and development principles to create software systems.\u201d\ntext2 = \u201dDevelopment of software is the engineering of software. It is the utilization of engineering and development practices to create software systems.\u201d","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Design an algorithm to detect plagiarism in two given texts. \n\n### Input: text1 = \u201dSoftware engineering is the engineering of software. It is the application of engineering and development principles to create software systems.\u201d\ntext2 = \u201dDevelopment of software is the engineering of software. It is the utilization of engineering and development practices to create software systems.\u201d [\/INST] \n\ndef detect_plagarism(text1, text2):\n    # convert text into n-gram\n    n_gram1 = []\n    n_gram2 = []\n    for i in range(1, len(text1.split())):\n        n_gram1.append(' '.join(text1.split()[i-1:i+1]))\n    for i in range(1, len(text2.split())):\n        n_gram2.append(' '.join(text2.split()[i-1:i+1]))\n \n    # calculate jaccard similarity\n    s1 = set(n_gram1)\n    s2 = set(n_gram2)\n    jaccard_similarity = len(s1 & s2) \/ len(s1 | s2)\n \n    return jaccard_similarity<\/s>"}
{"output":"['Adam', 'Jessica', 'John', 'Olivia', 'Paul']","instruction":"Create a program that takes in a list of names and outputs a list of the names sorted alphabetically.","input":"['John', 'Adam', 'Paul', 'Jessica', 'Olivia']","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a program that takes in a list of names and outputs a list of the names sorted alphabetically. \n\n### Input: ['John', 'Adam', 'Paul', 'Jessica', 'Olivia'] [\/INST] \n\n['Adam', 'Jessica', 'John', 'Olivia', 'Paul']<\/s>"}
{"output":"public String toString() { \n    return \"MyObject{\" + \n           \"field1=\" + field1 + \n           \",field2=\" + field2 + \n           '}';\n}","instruction":"Create a customized toString() function for an object","input":"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a customized toString() function for an object \n\n### Input:  [\/INST] \n\npublic String toString() { \n    return \"MyObject{\" + \n           \"field1=\" + field1 + \n           \",field2=\" + field2 + \n           '}';\n}<\/s>"}
{"output":"def sum_of_first_3_digits(x):\n    \"\"\"\n    This function computes the sum of the first 3 digits of a given\n    integer\n    \"\"\"\n    x = str(x)\n    if len(x) > 3:\n        x = x[:3]\n    return sum(int(i) for i in x)","instruction":"Develop a program which computes the sum of the first 3 digits of a given integer","input":"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Develop a program which computes the sum of the first 3 digits of a given integer \n\n### Input:  [\/INST] \n\ndef sum_of_first_3_digits(x):\n    \"\"\"\n    This function computes the sum of the first 3 digits of a given\n    integer\n    \"\"\"\n    x = str(x)\n    if len(x) > 3:\n        x = x[:3]\n    return sum(int(i) for i in x)<\/s>"}
{"output":"def get_median(nums):\n    nums.sort()\n    mid=len(nums)\/\/2\n    if len(nums)%2==0:\n        return (nums[mid]+nums[mid-1])\/2\n    else:\n        return nums[mid]\n\nprint(get_median([4.5, 6.5, 1.5, 3.5]))","instruction":"Compute the median of an array of floating point numbers","input":"[4.5, 6.5, 1.5, 3.5]","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Compute the median of an array of floating point numbers \n\n### Input: [4.5, 6.5, 1.5, 3.5] [\/INST] \n\ndef get_median(nums):\n    nums.sort()\n    mid=len(nums)\/\/2\n    if len(nums)%2==0:\n        return (nums[mid]+nums[mid-1])\/2\n    else:\n        return nums[mid]\n\nprint(get_median([4.5, 6.5, 1.5, 3.5]))<\/s>"}
{"output":"# Primes list up to n\ndef get_prime_list(n): \n  \n    # Create a list of size is n+1\n    primes = [True for _ in range(n+1)] \n    primes[0] = False\n    primes[1] = False\n  \n    # Iterate through 2 to sqrt(n)\n    for i in range(2, int(n**0.5) + 1): \n        if primes[i] == True: \n            # Set all multiples of i (from i^2 -> n) to False\n            for j in range(2*i, n+1, i): \n                primes[j] = False\n   \n    # Return a list of prime numbers\n    prime_list = [i for i in range(n+1) if primes[i]]\n    return prime_list\n    \n# Function call \nn = 10\n\n# Print the prime list\nprint(get_prime_list(n))","instruction":"Generate code to print a prime numbers list up to n.","input":"n = 10","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Generate code to print a prime numbers list up to n. \n\n### Input: n = 10 [\/INST] \n\n# Primes list up to n\ndef get_prime_list(n): \n  \n    # Create a list of size is n+1\n    primes = [True for _ in range(n+1)] \n    primes[0] = False\n    primes[1] = False\n  \n    # Iterate through 2 to sqrt(n)\n    for i in range(2, int(n**0.5) + 1): \n        if primes[i] == True: \n            # Set all multiples of i (from i^2 -> n) to False\n            for j in range(2*i, n+1, i): \n                primes[j] = False\n   \n    # Return a list of prime numbers\n    prime_list = [i for i in range(n+1) if primes[i]]\n    return prime_list\n    \n# Function call \nn = 10\n\n# Print the prime list\nprint(get_prime_list(n))<\/s>"}
{"output":"Declarative sentence.","instruction":"Find the type of sentence from the given sentence.","input":"Sentence:\nI bought a new laptop.","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Find the type of sentence from the given sentence. \n\n### Input: Sentence:\nI bought a new laptop. [\/INST] \n\nDeclarative sentence.<\/s>"}
{"output":"# install and load the packages\ninstall.packages(\"rpart\")\nlibrary(rpart)\n\n# Fit the decision tree model\ndt_model <- rpart(Price ~ Carat + color + clarity, data = diamonds, \n                  control = rpart.control(minsplit = 2))\n\n# Visualize the Decision Tree\nplot(dt_model)\ntext(dt_model, cex=0.3, ypd = 4)","instruction":"Create a program in R to generate a decision tree.","input":"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a program in R to generate a decision tree. \n\n### Input:  [\/INST] \n\n# install and load the packages\ninstall.packages(\"rpart\")\nlibrary(rpart)\n\n# Fit the decision tree model\ndt_model <- rpart(Price ~ Carat + color + clarity, data = diamonds, \n                  control = rpart.control(minsplit = 2))\n\n# Visualize the Decision Tree\nplot(dt_model)\ntext(dt_model, cex=0.3, ypd = 4)<\/s>"}
{"output":"SELECT t1.id, t1.name, t2.age \nFROM Table1 t1 \nINNER JOIN Table2 t2 \nON t1.id = t2.user_id","instruction":"Write a SQL query to join two provided tables on their common field.","input":"Table 1: \n\nid\tname\n 1 \tAlice\n 2\tBob\n\nTable 2:\n\nuser_id\tage\n 1 \t\t20\n 3\t\t21","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Write a SQL query to join two provided tables on their common field. \n\n### Input: Table 1: \n\nid\tname\n 1 \tAlice\n 2\tBob\n\nTable 2:\n\nuser_id\tage\n 1 \t\t20\n 3\t\t21 [\/INST] \n\nSELECT t1.id, t1.name, t2.age \nFROM Table1 t1 \nINNER JOIN Table2 t2 \nON t1.id = t2.user_id<\/s>"}
{"output":"SELECT customer.name, customer.purchase_date \nFROM customer \nINNER JOIN products\n  ON customer.products_id=products.id\nWHERE products.name=\"TV\"\nORDER BY customer.purchase_date DESC","instruction":"Create a SQL query that retrieves the data sorted in descending order for all customers who have purchased the product \"tv\".","input":"Not applicable","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a SQL query that retrieves the data sorted in descending order for all customers who have purchased the product \"tv\". \n\n### Input: Not applicable [\/INST] \n\nSELECT customer.name, customer.purchase_date \nFROM customer \nINNER JOIN products\n  ON customer.products_id=products.id\nWHERE products.name=\"TV\"\nORDER BY customer.purchase_date DESC<\/s>"}
{"output":"echo \"Enter output file:\"\nread fileName \n\necho \"Enter command:\"\nread command\necho \"Enter values list (separated by a comma):\"\nread values\n\nvaluesArray=($(echo $values | tr \",\" \" \")) \n\necho \"#!\/bin\/sh\" > $fileName\n\nfor i in \"${valuesArray[@]}\" \ndo \n echo \"$command $i\" >> $fileName\ndone","instruction":"Write a Bash script to execute a command for a given list of values.","input":"Not applicable","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Write a Bash script to execute a command for a given list of values. \n\n### Input: Not applicable [\/INST] \n\necho \"Enter output file:\"\nread fileName \n\necho \"Enter command:\"\nread command\necho \"Enter values list (separated by a comma):\"\nread values\n\nvaluesArray=($(echo $values | tr \",\" \" \")) \n\necho \"#!\/bin\/sh\" > $fileName\n\nfor i in \"${valuesArray[@]}\" \ndo \n echo \"$command $i\" >> $fileName\ndone<\/s>"}
{"output":"import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n \nconst App = () => {\n const [data, setData] = useState(null);\n useEffect(() => {\n  axios.get('http:\/\/<API_URL>\/data')\n   .then(res => setData(res.data))\n   .catch(err => console.log(err));\n }, []);\n \n let content = null;\n if (data) {\n  content = (\n   <div>\n    <h1>Statistics<\/h1>\n    <p>Total count: {data.total_count}<\/p>\n    <p>Unique count: {data.unique_count}<\/p>\n    <p>Duplicates count: {data.duplicates_count}<\/p>\n   <\/div>\n  );\n }\n \n return (\n  <div className=\"app\">\n   {content}\n  <\/div>\n );\n};\n \nexport default App;","instruction":"Create a React application which pulls data from an API and displays statistics.","input":"Not applicable","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a React application which pulls data from an API and displays statistics. \n\n### Input: Not applicable [\/INST] \n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n \nconst App = () => {\n const [data, setData] = useState(null);\n useEffect(() => {\n  axios.get('http:\/\/<API_URL>\/data')\n   .then(res => setData(res.data))\n   .catch(err => console.log(err));\n }, []);\n \n let content = null;\n if (data) {\n  content = (\n   <div>\n    <h1>Statistics<\/h1>\n    <p>Total count: {data.total_count}<\/p>\n    <p>Unique count: {data.unique_count}<\/p>\n    <p>Duplicates count: {data.duplicates_count}<\/p>\n   <\/div>\n  );\n }\n \n return (\n  <div className=\"app\">\n   {content}\n  <\/div>\n );\n};\n \nexport default App;<\/s>"}
{"output":"def most_frequent_char(string):\n    # Initialize a dictionary with all characters as keys, and values starting at 0\n    char_dict = {char: 0 for char in string}\n    # Iterate over the characters and add 1 to the values for each occurrence\n    for char in string:\n        char_dict[char] += 1\n    # Find the key corresponding to the highest value\n    max_char = max(char_dict, key=lambda x:char_dict[x])\n    # Return the most frequent character\n    return max_char\n\nmost_frequent_char(\"I love programming!\") # Output: 'e'","instruction":"Find the most frequently occurring character in a string.","input":"String: \"I love programming!\"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Find the most frequently occurring character in a string. \n\n### Input: String: \"I love programming!\" [\/INST] \n\ndef most_frequent_char(string):\n    # Initialize a dictionary with all characters as keys, and values starting at 0\n    char_dict = {char: 0 for char in string}\n    # Iterate over the characters and add 1 to the values for each occurrence\n    for char in string:\n        char_dict[char] += 1\n    # Find the key corresponding to the highest value\n    max_char = max(char_dict, key=lambda x:char_dict[x])\n    # Return the most frequent character\n    return max_char\n\nmost_frequent_char(\"I love programming!\") # Output: 'e'<\/s>"}
{"output":"openapi: \"3.0.2\"\ninfo:\n title: Task tracking service\n version: 1.0.0\nschemes:\n - https\npaths:\n \/tasks:\n  get:\n   summary: Retrieve all tasks\n   responses:\n    200:\n     description: List of tasks\n   security:\n    - api_key: []    \n  post:\n   summary: Create a new task\n   requestBody:\n    required: true\n    content:\n     application\/json:\n      schema:\n       type: object\n       required:\n        - name\n        - description\n       properties:\n        name:\n         type: string\n         description: The name of the task\n        description:\n         type: string\n         description: Description of the task\n   responses:\n    201:\n     description: The created task\n  security:\n   - api_key: []\n   \n\/tasks\/{taskId}:\n  get:\n   summary: Retrieve a task\n   parameters:\n    - name: taskId\n      in: path\n      required: true\n      description: The unique ID of the task\n      schema:\n       type: string\n   responses:\n    200:\n     description: The requested task\n  put:\n   summary: Update a task\n   parameters:\n    - name: taskId\n      in: path\n      required: true\n      description: The unique ID of the task\n      schema:\n       type: string\n   requestBody:\n    required: true\n    content:\n     application\/json:\n      schema:\n       type: object\n       required:\n        - name\n        - description\n        - status\n       properties:\n        name:\n         type: string\n         description: The name of the task\n        description:\n         type: string\n         description: Description of the task\n        status:\n         type: string\n         enum:\n          - ready\n          - doing\n          - done\n   responses:\n    200:\n     description: The updated task\n  delete:\n   summary: Delete a task\n   parameters:\n    - name: taskId\n      in: path\n      required: true\n      description: The unique ID of the task\n      schema:\n       type: string\n   responses:\n    204:\n     description: The deleted task\n   security:\n    - api_key: []","instruction":"Develop an OpenAPI\/Swagger service for tracking user tasks. This service should have endpoints for creating, retrieving, updating and deleting tasks, as well as for setting a status for each task.","input":"Not applicable","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Develop an OpenAPI\/Swagger service for tracking user tasks. This service should have endpoints for creating, retrieving, updating and deleting tasks, as well as for setting a status for each task. \n\n### Input: Not applicable [\/INST] \n\nopenapi: \"3.0.2\"\ninfo:\n title: Task tracking service\n version: 1.0.0\nschemes:\n - https\npaths:\n \/tasks:\n  get:\n   summary: Retrieve all tasks\n   responses:\n    200:\n     description: List of tasks\n   security:\n    - api_key: []    \n  post:\n   summary: Create a new task\n   requestBody:\n    required: true\n    content:\n     application\/json:\n      schema:\n       type: object\n       required:\n        - name\n        - description\n       properties:\n        name:\n         type: string\n         description: The name of the task\n        description:\n         type: string\n         description: Description of the task\n   responses:\n    201:\n     description: The created task\n  security:\n   - api_key: []\n   \n\/tasks\/{taskId}:\n  get:\n   summary: Retrieve a task\n   parameters:\n    - name: taskId\n      in: path\n      required: true\n      description: The unique ID of the task\n      schema:\n       type: string\n   responses:\n    200:\n     description: The requested task\n  put:\n   summary: Update a task\n   parameters:\n    - name: taskId\n      in: path\n      required: true\n      description: The unique ID of the task\n      schema:\n       type: string\n   requestBody:\n    required: true\n    content:\n     application\/json:\n      schema:\n       type: object\n       required:\n        - name\n        - description\n        - status\n       properties:\n        name:\n         type: string\n         description: The name of the task\n        description:\n         type: string\n         description: Description of the task\n        status:\n         type: string\n         enum:\n          - ready\n          - doing\n          - done\n   responses:\n    200:\n     description: The updated task\n  delete:\n   summary: Delete a task\n   parameters:\n    - name: taskId\n      in: path\n      required: true\n      description: The unique ID of the task\n      schema:\n       type: string\n   responses:\n    204:\n     description: The deleted task\n   security:\n    - api_key: []<\/s>"}
{"output":"const regex = \/^(?!.*(.)\\1{2})((?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]+$)\/;","instruction":"Create a regular expression in JavaScript that validates user-input passwords and does not allow any sequence of characters.","input":"Not applicable","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a regular expression in JavaScript that validates user-input passwords and does not allow any sequence of characters. \n\n### Input: Not applicable [\/INST] \n\nconst regex = \/^(?!.*(.)\\1{2})((?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]+$)\/;<\/s>"}
{"output":"{'key1': 'val2', 'key2': 'val1', 'key3': 'val3'}","instruction":"Generate a random key-value mapping from given list of keys and values.","input":"keys: ['key1', 'key2', 'key3']\nvalues: ['val1', 'val2', 'val3']","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Generate a random key-value mapping from given list of keys and values. \n\n### Input: keys: ['key1', 'key2', 'key3']\nvalues: ['val1', 'val2', 'val3'] [\/INST] \n\n{'key1': 'val2', 'key2': 'val1', 'key3': 'val3'}<\/s>"}
{"output":"def detect_ip_class(ip_add):\n    classA_addr = [\"10.0.0.0\/8\", \"127.0.0.0\/8\", \"172.16.0.0\/12\", \"192.168.0.0\/16\"]\n    classB_addr = [\"128.0.0.0\/16\", \"172.32.0.0\/12\", \"192.0.0.0\/24\"]\n    classC_addr = [\"192.0.2.0\/24\", \"192.168.1.0\/24\"]\n    \n    for classA_net in classA_addr:\n        ipNet = ipaddress.IPv4Network(classA_net)\n        if ipaddress.IPv4Address(ip_add) in ipNet:\n            return \"Class A\"\n    for classB_net in classB_addr:\n        ipNet = ipaddress.IPv4Network(classB_net)\n        if ipaddress.IPv4Address(ip_add) in ipNet:\n            return \"Class B\"\n    for classC_net in classC_addr:\n        ipNet = ipaddress.IPv4Network(classC_net)\n        if ipaddress.IPv4Address(ip_add) in ipNet:\n            return \"Class C\"\n    return \"Unknown\"\n\nip_add = \"172.16.0.1\"\nprint(detect_ip_class(ip_add)) # prints Class A","instruction":"Write a code to detect if a given IP address is a class A, B or C.","input":"ip_add = \"172.16.0.1\"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Write a code to detect if a given IP address is a class A, B or C. \n\n### Input: ip_add = \"172.16.0.1\" [\/INST] \n\ndef detect_ip_class(ip_add):\n    classA_addr = [\"10.0.0.0\/8\", \"127.0.0.0\/8\", \"172.16.0.0\/12\", \"192.168.0.0\/16\"]\n    classB_addr = [\"128.0.0.0\/16\", \"172.32.0.0\/12\", \"192.0.0.0\/24\"]\n    classC_addr = [\"192.0.2.0\/24\", \"192.168.1.0\/24\"]\n    \n    for classA_net in classA_addr:\n        ipNet = ipaddress.IPv4Network(classA_net)\n        if ipaddress.IPv4Address(ip_add) in ipNet:\n            return \"Class A\"\n    for classB_net in classB_addr:\n        ipNet = ipaddress.IPv4Network(classB_net)\n        if ipaddress.IPv4Address(ip_add) in ipNet:\n            return \"Class B\"\n    for classC_net in classC_addr:\n        ipNet = ipaddress.IPv4Network(classC_net)\n        if ipaddress.IPv4Address(ip_add) in ipNet:\n            return \"Class C\"\n    return \"Unknown\"\n\nip_add = \"172.16.0.1\"\nprint(detect_ip_class(ip_add)) # prints Class A<\/s>"}
{"output":"SELECT category, COUNT(*) AS count\n FROM table_name\n GROUP BY category\n ORDER BY count DESC\n LIMIT 1;","instruction":"Write an SQL query to find the most commonly occurring value in a given column","input":"A column named \"category\"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Write an SQL query to find the most commonly occurring value in a given column \n\n### Input: A column named \"category\" [\/INST] \n\nSELECT category, COUNT(*) AS count\n FROM table_name\n GROUP BY category\n ORDER BY count DESC\n LIMIT 1;<\/s>"}
{"output":"def bubbleSort(arr):\n\tn = len(arr)\n \n\t# Traverse through all array elements\n\tfor i in range(n):\n \n\t\t# Last i elements are already in place\n\t\tfor j in range(0, n-i-1):\n \n\t\t\t# traverse the array from 0 to n-i-1\n\t\t\t# Swap if the element found is greater\n\t\t\t# than the next element\n\t\t\tif arr[j] > arr[j+1] :\n\t\t\t\tarr[j], arr[j+1] = arr[j+1], arr[j]\n\n# Test the code\narr = [64, 34, 25, 12, 22, 11, 90]\n\nbubbleSort(arr)\n\nprint (\"Sorted array is:\")\nfor i in range(len(arr)):\n\tprint (\"%d\" %arr[i]),","instruction":"Generate code that implements a bubble sort algorithm in Python.","input":"Not applicable","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Generate code that implements a bubble sort algorithm in Python. \n\n### Input: Not applicable [\/INST] \n\ndef bubbleSort(arr):\n\tn = len(arr)\n \n\t# Traverse through all array elements\n\tfor i in range(n):\n \n\t\t# Last i elements are already in place\n\t\tfor j in range(0, n-i-1):\n \n\t\t\t# traverse the array from 0 to n-i-1\n\t\t\t# Swap if the element found is greater\n\t\t\t# than the next element\n\t\t\tif arr[j] > arr[j+1] :\n\t\t\t\tarr[j], arr[j+1] = arr[j+1], arr[j]\n\n# Test the code\narr = [64, 34, 25, 12, 22, 11, 90]\n\nbubbleSort(arr)\n\nprint (\"Sorted array is:\")\nfor i in range(len(arr)):\n\tprint (\"%d\" %arr[i]),<\/s>"}
{"output":"function getSum(numbers) {\n let sum = 0;\n const length = numbers.length;\n for(let i = 0; i < length; i++) {\n sum += numbers[i];\n }\n return sum;\n}","instruction":"Optimize the following JavaScript code for better performance.\n\nfunction getSum(numbers) {\n let sum = 0;\n for(let i = 0; i < numbers.length; i++) {\n sum += numbers[i];\n }\n return sum;\n}","input":"Not applicable","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Optimize the following JavaScript code for better performance.\n\nfunction getSum(numbers) {\n let sum = 0;\n for(let i = 0; i < numbers.length; i++) {\n sum += numbers[i];\n }\n return sum;\n} \n\n### Input: Not applicable [\/INST] \n\nfunction getSum(numbers) {\n let sum = 0;\n const length = numbers.length;\n for(let i = 0; i < length; i++) {\n sum += numbers[i];\n }\n return sum;\n}<\/s>"}
{"output":"The differences between string1 and string2 are the presence of an exclamation point at the end of string2.","instruction":"Identify the differences between two strings.","input":"String 1: \"Hello World\"\nString 2: \"Hello World!\"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Identify the differences between two strings. \n\n### Input: String 1: \"Hello World\"\nString 2: \"Hello World!\" [\/INST] \n\nThe differences between string1 and string2 are the presence of an exclamation point at the end of string2.<\/s>"}
{"output":"import React, { useState, useEffect } from 'react';\nimport { createFilter } from 'search-trie';\n\nconst products = [\n { name: 'Apple', category: 'fruit' },\n { name: 'Banana', category: 'fruit' },\n { name: 'Broccoli', category: 'vegetable' },\n { name: 'Carrot', category: 'vegetable' },\n];\n\nconst App = () => {\n const [filter, setFilter] = useState('');\n const [filteredProducts, setFilteredProducts] = useState(products);\n\n useEffect(() => {\n  const trie = createFilter(products, 'name');\n  setFilteredProducts(trie.search(filter));\n }, [filter]);\n\n const onChange = e => {\n  setFilter(e.target.value);\n };\n\n return (\n  <div>\n   <input onChange={onChange} value={filter} \/>\n   <ul>\n    {filteredProducts.map(product => (\n     <li key={product.name}>{product.name}<\/li>\n    ))}\n   <\/ul>\n  <\/div>\n );\n};\n\nexport default App;","instruction":"Create a React application with a search bar and a list of products. The application should filter the products as the user types in the search bar.","input":"Not applicable","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a React application with a search bar and a list of products. The application should filter the products as the user types in the search bar. \n\n### Input: Not applicable [\/INST] \n\nimport React, { useState, useEffect } from 'react';\nimport { createFilter } from 'search-trie';\n\nconst products = [\n { name: 'Apple', category: 'fruit' },\n { name: 'Banana', category: 'fruit' },\n { name: 'Broccoli', category: 'vegetable' },\n { name: 'Carrot', category: 'vegetable' },\n];\n\nconst App = () => {\n const [filter, setFilter] = useState('');\n const [filteredProducts, setFilteredProducts] = useState(products);\n\n useEffect(() => {\n  const trie = createFilter(products, 'name');\n  setFilteredProducts(trie.search(filter));\n }, [filter]);\n\n const onChange = e => {\n  setFilter(e.target.value);\n };\n\n return (\n  <div>\n   <input onChange={onChange} value={filter} \/>\n   <ul>\n    {filteredProducts.map(product => (\n     <li key={product.name}>{product.name}<\/li>\n    ))}\n   <\/ul>\n  <\/div>\n );\n};\n\nexport default App;<\/s>"}
{"output":"def remove_duplicates(names_list):\n  unique_names_list = []\n\n  for name in names_list:\n    if name not in unique_names_list:\n      unique_names_list.append(name)\n\n  return unique_names_list\n\n# Call the function\nprint(remove_duplicates(names_list)) # Prints: [\"John\", \"Mary\", \"Alex\"]","instruction":"Create a function that takes in a list of names and removes all duplicates from it.","input":"names_list = [\"John\", \"Mary\", \"John\", \"Alex\", \"Mary\"]","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a function that takes in a list of names and removes all duplicates from it. \n\n### Input: names_list = [\"John\", \"Mary\", \"John\", \"Alex\", \"Mary\"] [\/INST] \n\ndef remove_duplicates(names_list):\n  unique_names_list = []\n\n  for name in names_list:\n    if name not in unique_names_list:\n      unique_names_list.append(name)\n\n  return unique_names_list\n\n# Call the function\nprint(remove_duplicates(names_list)) # Prints: [\"John\", \"Mary\", \"Alex\"]<\/s>"}
{"output":"def merge_sort(arr):\n    if len(arr) == 1:\n        return arr\n    mid = len(arr) \/\/ 2\n    left_arr = merge_sort(arr[:mid])\n    right_arr = merge_sort(arr[mid:])\n    return merge(left_arr, right_arr)\n\ndef merge(left_arr, right_arr):\n    sorted_arr = []\n    i = j = 0\n    while i < len(left_arr) and j < len(right_arr):\n        if left_arr[i] < right_arr[j]:\n            sorted_arr.append(left_arr[i])\n            i += 1\n        else:\n            sorted_arr.append(right_arr[j])\n            j += 1\n    sorted_arr.extend(left_arr[i:]) \n    sorted_arr.extend(right_arr[j:])\n    return sorted_arr","instruction":"Generate a piece of code to sort an array in ascending order using merge sort.","input":"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Generate a piece of code to sort an array in ascending order using merge sort. \n\n### Input:  [\/INST] \n\ndef merge_sort(arr):\n    if len(arr) == 1:\n        return arr\n    mid = len(arr) \/\/ 2\n    left_arr = merge_sort(arr[:mid])\n    right_arr = merge_sort(arr[mid:])\n    return merge(left_arr, right_arr)\n\ndef merge(left_arr, right_arr):\n    sorted_arr = []\n    i = j = 0\n    while i < len(left_arr) and j < len(right_arr):\n        if left_arr[i] < right_arr[j]:\n            sorted_arr.append(left_arr[i])\n            i += 1\n        else:\n            sorted_arr.append(right_arr[j])\n            j += 1\n    sorted_arr.extend(left_arr[i:]) \n    sorted_arr.extend(right_arr[j:])\n    return sorted_arr<\/s>"}
{"output":"def generate_name(product):\n    adjectives = [\"Luxury\", \"Fashionable\", \"Stylish\", \"Gorgeous\"]\n    nouns = [\"Sole\", \"Shoe\", \"Footwear\", \"Flicker\"]\n    return random.choice(adjectives) + random.choice(nouns)","instruction":"Generate a new name for the given product.","input":"Product: Shoes","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Generate a new name for the given product. \n\n### Input: Product: Shoes [\/INST] \n\ndef generate_name(product):\n    adjectives = [\"Luxury\", \"Fashionable\", \"Stylish\", \"Gorgeous\"]\n    nouns = [\"Sole\", \"Shoe\", \"Footwear\", \"Flicker\"]\n    return random.choice(adjectives) + random.choice(nouns)<\/s>"}
{"output":"def repeatCharacter(string): \n    result = []\n    for char in string:\n        if string.count(char) > 1:\n            if char not in result:\n                result.append(char)\n\n    return result","instruction":"Write a function that takes a string as input and returns a list of all the characters that appear twice or more in the string.","input":"string = \"google\"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Write a function that takes a string as input and returns a list of all the characters that appear twice or more in the string. \n\n### Input: string = \"google\" [\/INST] \n\ndef repeatCharacter(string): \n    result = []\n    for char in string:\n        if string.count(char) > 1:\n            if char not in result:\n                result.append(char)\n\n    return result<\/s>"}
{"output":"import gym\nimport tensorflow as tf\n\n# Create a Lunar Lander environment\nenv = gym.make('LunarLander-v2')\n\n# Initialize state and action dimensions\nstate_dim = env.observation_space.shape[0]\naction_dim = env.action_space.n\n\n# Create a neural network model\nmodel = tf.keras.Sequential()\nmodel.add(tf.keras.layers.Dense(128, input_dim=state_dim, activation='relu'))\nmodel.add(tf.keras.layers.Dense(64, activation='relu'))\nmodel.add(tf.keras.layers.Dense(action_dim))\n\n# Initialize an Agent for the environment\nagent = Agent(env, model)\n\n# Train the agent\nagent.train()","instruction":"Create a reinforcement learning model in Python for continuous control of a lunar landing spacecraft using neural networks.","input":"Not applicable","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a reinforcement learning model in Python for continuous control of a lunar landing spacecraft using neural networks. \n\n### Input: Not applicable [\/INST] \n\nimport gym\nimport tensorflow as tf\n\n# Create a Lunar Lander environment\nenv = gym.make('LunarLander-v2')\n\n# Initialize state and action dimensions\nstate_dim = env.observation_space.shape[0]\naction_dim = env.action_space.n\n\n# Create a neural network model\nmodel = tf.keras.Sequential()\nmodel.add(tf.keras.layers.Dense(128, input_dim=state_dim, activation='relu'))\nmodel.add(tf.keras.layers.Dense(64, activation='relu'))\nmodel.add(tf.keras.layers.Dense(action_dim))\n\n# Initialize an Agent for the environment\nagent = Agent(env, model)\n\n# Train the agent\nagent.train()<\/s>"}
{"output":"#include <iostream>  \n#include <vector> \nusing namespace std; \n\nint findMax(vector <int> v){  \n    int max = v[0]; \n    int i; \n    for (i = 1; i < v.size(); i++) \n        if (v[i] > max) \n            max = v[i]; \n    return max; \n} \n\nint main(){ \n    vector <int> v; \n    v.push_back(4); \n    v.push_back(8); \n    v.push_back(2);\n    cout<<findMax(v)<<endl; \n    return 0; \n}","instruction":"Generate C++ code to find the maximum number in a vector of integers.","input":"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Generate C++ code to find the maximum number in a vector of integers. \n\n### Input:  [\/INST] \n\n#include <iostream>  \n#include <vector> \nusing namespace std; \n\nint findMax(vector <int> v){  \n    int max = v[0]; \n    int i; \n    for (i = 1; i < v.size(); i++) \n        if (v[i] > max) \n            max = v[i]; \n    return max; \n} \n\nint main(){ \n    vector <int> v; \n    v.push_back(4); \n    v.push_back(8); \n    v.push_back(2);\n    cout<<findMax(v)<<endl; \n    return 0; \n}<\/s>"}
{"output":"public class Main {\n public static void main(String[] args) {\n \tint a = 5;\n \tint b = 10;\n \tint sum = a + b;\n \tSystem.out.println(sum);\n }\n}","instruction":"Create a basic Java class that takes in two numbers, calculates the sum and prints the result to the console.","input":"int a = 5;\nint b = 10;","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a basic Java class that takes in two numbers, calculates the sum and prints the result to the console. \n\n### Input: int a = 5;\nint b = 10; [\/INST] \n\npublic class Main {\n public static void main(String[] args) {\n \tint a = 5;\n \tint b = 10;\n \tint sum = a + b;\n \tSystem.out.println(sum);\n }\n}<\/s>"}
