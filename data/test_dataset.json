{"output":"from django.shortcuts import render\nfrom django.contrib.auth.models import User\n\ndef user_list(request):\n    users = User.objects.all()\n    return render(request, \"users\/user_list.html\", {\"users\": users})\n\n# users\/user_list.html\n{% extends \"base.html\" %}\n{% block content %}\n    <h1>User List<\/h1>\n    <ul>\n        {% for user in users %}\n            <li>{{ user.username}}<\/li>\n        {% endfor %}\n    <\/ul>\n{% endblock %}","instruction":"Create a Django view and template to show a list of all users.","input":"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a Django view and template to show a list of all users. \n\n### Input:  [\/INST] \n\nfrom django.shortcuts import render\nfrom django.contrib.auth.models import User\n\ndef user_list(request):\n    users = User.objects.all()\n    return render(request, \"users\/user_list.html\", {\"users\": users})\n\n# users\/user_list.html\n{% extends \"base.html\" %}\n{% block content %}\n    <h1>User List<\/h1>\n    <ul>\n        {% for user in users %}\n            <li>{{ user.username}}<\/li>\n        {% endfor %}\n    <\/ul>\n{% endblock %}<\/s>"}
{"output":"body {\n  font-family: Arial;\n  font-weight: bold;\n}","instruction":"Edit the following CSS to make all text bold.","input":"body {\n  font-family: Arial;\n}","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Edit the following CSS to make all text bold. \n\n### Input: body {\n  font-family: Arial;\n} [\/INST] \n\nbody {\n  font-family: Arial;\n  font-weight: bold;\n}<\/s>"}
{"output":"\"\"\"\nRefactor a given code to make it more efficient.\n\"\"\"\n\ndef get_sum(numbers):\n    return sum(numbers)\n\nif __name__ == '__main__':\n    print(get_sum([1, 2, 3]))","instruction":"Refactor a given code to make it more efficient.","input":"def get_sum(numbers):\n sum = 0\n for n in numbers:\n sum += n\n return sum","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Refactor a given code to make it more efficient. \n\n### Input: def get_sum(numbers):\n sum = 0\n for n in numbers:\n sum += n\n return sum [\/INST] \n\n\"\"\"\nRefactor a given code to make it more efficient.\n\"\"\"\n\ndef get_sum(numbers):\n    return sum(numbers)\n\nif __name__ == '__main__':\n    print(get_sum([1, 2, 3]))<\/s>"}
{"output":"What is the result of the following code?\n\nx = [1, 2, 3, 4, 5]\ny = [2, 3, 1, 5, 4]\n\nA. [2, 3, 4, 5, 1]\nB. [1, 2, 4, 5, 3]\nC. [1, 2, 3, 4, 5]\nD. [2, 3, 1, 4, 5]\n\nAnswer: D. [2, 3, 1, 4, 5]","instruction":"You need to create a multiple choice question based on a given code.","input":"x = [1, 2, 3, 4, 5]\ny = [2, 3, 1, 5, 4]","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: You need to create a multiple choice question based on a given code. \n\n### Input: x = [1, 2, 3, 4, 5]\ny = [2, 3, 1, 5, 4] [\/INST] \n\nWhat is the result of the following code?\n\nx = [1, 2, 3, 4, 5]\ny = [2, 3, 1, 5, 4]\n\nA. [2, 3, 4, 5, 1]\nB. [1, 2, 4, 5, 3]\nC. [1, 2, 3, 4, 5]\nD. [2, 3, 1, 4, 5]\n\nAnswer: D. [2, 3, 1, 4, 5]<\/s>"}
{"output":"import { Component } from '@angular\/core';\n\n@Component({\n selector: 'product-list',\n template: `\n <h1>Product List<\/h1>\n <ul *ngFor=\"let product of products | sortByPrice\">\n  <li>{{ product.name }} ({{ product.price }}$)<\/li>\n <\/ul\n `,\n})\nexport class ProductListComponent {\n products = [\n  {name: 'Product 1', price: 10},\n  {name: 'Product 2', price: 5},\n  {name: 'Product 3', price: 30}\n ];\n}\n\n\/\/ sortByPrice pipe\n\nimport { Pipe, PipeTransform } from '@angular\/core';\n\n@Pipe({\n name: 'sortByPrice'\n})\nexport class SortByPricePipe implements PipeTransform {\n transform(items: any[], args?: any): any[] {\n  return items.sort((a, b) => a.price > b.price ? 1 : -1);\n }\n}","instruction":"Create an Angular application that displays a list of products and allows users to sort the products by price.","input":"Not applicable","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create an Angular application that displays a list of products and allows users to sort the products by price. \n\n### Input: Not applicable [\/INST] \n\nimport { Component } from '@angular\/core';\n\n@Component({\n selector: 'product-list',\n template: `\n <h1>Product List<\/h1>\n <ul *ngFor=\"let product of products | sortByPrice\">\n  <li>{{ product.name }} ({{ product.price }}$)<\/li>\n <\/ul\n `,\n})\nexport class ProductListComponent {\n products = [\n  {name: 'Product 1', price: 10},\n  {name: 'Product 2', price: 5},\n  {name: 'Product 3', price: 30}\n ];\n}\n\n\/\/ sortByPrice pipe\n\nimport { Pipe, PipeTransform } from '@angular\/core';\n\n@Pipe({\n name: 'sortByPrice'\n})\nexport class SortByPricePipe implements PipeTransform {\n transform(items: any[], args?: any): any[] {\n  return items.sort((a, b) => a.price > b.price ? 1 : -1);\n }\n}<\/s>"}
{"output":"SELECT COUNT(*)\nFROM customers_products\nINNER JOIN products ON customers_products.product_name = products.name\nWHERE products.price > 10","instruction":"Create a MySQL query to count the number of customers who have purchased a product with a price greater than 10.","input":"products(name, price)\ncustomers_products(customer_id, product_name)","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a MySQL query to count the number of customers who have purchased a product with a price greater than 10. \n\n### Input: products(name, price)\ncustomers_products(customer_id, product_name) [\/INST] \n\nSELECT COUNT(*)\nFROM customers_products\nINNER JOIN products ON customers_products.product_name = products.name\nWHERE products.price > 10<\/s>"}
{"output":"SELECT * \nFROM table \nWHERE date BETWEEN '30\/03\/2021' and '03\/04\/2021';","instruction":"Generate a SQL query to retrieve records between two specified dates.","input":"Start date: 30\/03\/2021 \nEnd date: 03\/04\/2021","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Generate a SQL query to retrieve records between two specified dates. \n\n### Input: Start date: 30\/03\/2021 \nEnd date: 03\/04\/2021 [\/INST] \n\nSELECT * \nFROM table \nWHERE date BETWEEN '30\/03\/2021' and '03\/04\/2021';<\/s>"}
{"output":"<?php \n \n\/\/returns moonphase in days\nfunction getMoonPhase($date)\n{\n    $year = date('Y', $date);\n    $month = date('m', $date);\n    $day = date('j', $date);\n \n    \/\/ Calculate the moon phase\n    $dayInYear = date('z', $date);\n    $lunations = $year + (1\/12)*($month-1) + (1\/48)*($day-1);\n    $phase = fmod(($lunations + 4.867), 29.530588853);\n    $moonPhase = round($phase, 2);\n \n    return $moonPhase;\n} \n \n$currentTime = time();\necho getMoonPhase($currentTime);","instruction":"Create a PHP function to get the moon phase for the current day.","input":"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a PHP function to get the moon phase for the current day. \n\n### Input:  [\/INST] \n\n<?php \n \n\/\/returns moonphase in days\nfunction getMoonPhase($date)\n{\n    $year = date('Y', $date);\n    $month = date('m', $date);\n    $day = date('j', $date);\n \n    \/\/ Calculate the moon phase\n    $dayInYear = date('z', $date);\n    $lunations = $year + (1\/12)*($month-1) + (1\/48)*($day-1);\n    $phase = fmod(($lunations + 4.867), 29.530588853);\n    $moonPhase = round($phase, 2);\n \n    return $moonPhase;\n} \n \n$currentTime = time();\necho getMoonPhase($currentTime);<\/s>"}
{"output":"import React, {useState} from 'react';\nimport {View, Text, StyleSheet, Button, Alert} from 'react-native';\n\nconst App = () => {\n const [diceValue, setDiceValue] = useState(1);\n const getRandomNumber = max => {\n return Math.floor(Math.random() * max) + 1;\n };\n const rollDice = () => {\n setDiceValue(getRandomNumber(6));\n };\n\n return (\n <View style={styles.container}>\n <Text style={styles.text}>\n Dice Roll Value: {diceValue}\n <\/Text>\n <Button title=\" Roll the dice \" onPress={rollDice} \/>\n <\/View>\n );\n};\n\nconst styles = StyleSheet.create({\n container: {\n flex: 1,\n justifyContent: 'center',\n alignItems: 'center',\n },\n text: {\n fontSize: 20,\nmarginBottom: 20\n }\n});\n\nexport default App;","instruction":"Write a React Native program to simulate a dice roll. The program should generate a random integer between 1 and 6, then display the corresponding face of the dice","input":"Not applicable","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Write a React Native program to simulate a dice roll. The program should generate a random integer between 1 and 6, then display the corresponding face of the dice \n\n### Input: Not applicable [\/INST] \n\nimport React, {useState} from 'react';\nimport {View, Text, StyleSheet, Button, Alert} from 'react-native';\n\nconst App = () => {\n const [diceValue, setDiceValue] = useState(1);\n const getRandomNumber = max => {\n return Math.floor(Math.random() * max) + 1;\n };\n const rollDice = () => {\n setDiceValue(getRandomNumber(6));\n };\n\n return (\n <View style={styles.container}>\n <Text style={styles.text}>\n Dice Roll Value: {diceValue}\n <\/Text>\n <Button title=\" Roll the dice \" onPress={rollDice} \/>\n <\/View>\n );\n};\n\nconst styles = StyleSheet.create({\n container: {\n flex: 1,\n justifyContent: 'center',\n alignItems: 'center',\n },\n text: {\n fontSize: 20,\nmarginBottom: 20\n }\n});\n\nexport default App;<\/s>"}
{"output":"# Calculate square of input number\nnum <- 4\n\n# Print square\nprint(num^2)","instruction":"Create an R program to calculate and print the square of an input number.","input":"4","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create an R program to calculate and print the square of an input number. \n\n### Input: 4 [\/INST] \n\n# Calculate square of input number\nnum <- 4\n\n# Print square\nprint(num^2)<\/s>"}
{"output":"# Store all data in a dictionary\ndictionary = {\n    'a' : ['b', 0.2],\n    'b' : ['c', 0.3],\n    'c' : ['d', 0.2],\n    'd' : ['e', 0.15],\n    'e' : ['f', 0.15]\n}\n\n# Create a function to get the next character\ndef get_next_char(input_char):\n\tif input_char in dictionary:\n\t\toutput_char, probability = dictionary[input_char]\n\t\t# Generate a random number between 0 and 1\n\t\trandom_number = random.random()\n\t\t# Check if the random number is less than the probability\n\t\tif random_number <= probability:\n\t\t\treturn output_char\n\t\telse:\n\t\t\treturn None\n\telse:\n\t\treturn None","instruction":"Design a system that outputs the next character for a given input string based on a given set of inputs and outputs with their corresponding frequency.","input":"Inputs = ['a', 'b', 'c', 'd', 'e']\nOutputs = ['b', 'c', 'd', 'e', 'f']\nFrequencies = [0.2, 0.3, 0.2, 0.15, 0.15]","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Design a system that outputs the next character for a given input string based on a given set of inputs and outputs with their corresponding frequency. \n\n### Input: Inputs = ['a', 'b', 'c', 'd', 'e']\nOutputs = ['b', 'c', 'd', 'e', 'f']\nFrequencies = [0.2, 0.3, 0.2, 0.15, 0.15] [\/INST] \n\n# Store all data in a dictionary\ndictionary = {\n    'a' : ['b', 0.2],\n    'b' : ['c', 0.3],\n    'c' : ['d', 0.2],\n    'd' : ['e', 0.15],\n    'e' : ['f', 0.15]\n}\n\n# Create a function to get the next character\ndef get_next_char(input_char):\n\tif input_char in dictionary:\n\t\toutput_char, probability = dictionary[input_char]\n\t\t# Generate a random number between 0 and 1\n\t\trandom_number = random.random()\n\t\t# Check if the random number is less than the probability\n\t\tif random_number <= probability:\n\t\t\treturn output_char\n\t\telse:\n\t\t\treturn None\n\telse:\n\t\treturn None<\/s>"}
{"output":"def lcs(str1, str2): \n    n = len(str1) \n    m = len(str2) \n    if n == 0 or m == 0: \n       return 0; \n    elif str1[n-1] == str2[m-1]: \n        return 1 + lcs(str1[0:n-1],str2[0:m-1]); \n    else: \n        return max(lcs(str1[0:n-1], str2[0:m]), lcs(str1[0:n], str2[0:m-1]));","instruction":"Generate an algorithm to find the length of the longest common subsequence","input":"Two strings","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Generate an algorithm to find the length of the longest common subsequence \n\n### Input: Two strings [\/INST] \n\ndef lcs(str1, str2): \n    n = len(str1) \n    m = len(str2) \n    if n == 0 or m == 0: \n       return 0; \n    elif str1[n-1] == str2[m-1]: \n        return 1 + lcs(str1[0:n-1],str2[0:m-1]); \n    else: \n        return max(lcs(str1[0:n-1], str2[0:m]), lcs(str1[0:n], str2[0:m-1]));<\/s>"}
{"output":"SELECT Name \nFROM Employee \nWHERE Department='HR' \nORDER BY Salary DESC\nLIMIT 5;","instruction":"Create an SQL query to select the top 5 employee names who have the highest salary in a particular department.","input":"Employee Table:\n\n| ID | Name  | Department | Salary |\n| -- | ----- | ---------- | ----- |\n| 1  | John  | Marketing  | 10000 |\n| 2  | Mary  | HR         | 9500  |\n| 3  | Bob   | HR         | 12000 |\n| 4  | Steve | Marketing  | 14000 |\n| 5  | David | HR         | 13000 |","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create an SQL query to select the top 5 employee names who have the highest salary in a particular department. \n\n### Input: Employee Table:\n\n| ID | Name  | Department | Salary |\n| -- | ----- | ---------- | ----- |\n| 1  | John  | Marketing  | 10000 |\n| 2  | Mary  | HR         | 9500  |\n| 3  | Bob   | HR         | 12000 |\n| 4  | Steve | Marketing  | 14000 |\n| 5  | David | HR         | 13000 | [\/INST] \n\nSELECT Name \nFROM Employee \nWHERE Department='HR' \nORDER BY Salary DESC\nLIMIT 5;<\/s>"}
{"output":"#include <iostream> \n#include <string> \n\nusing namespace std; \n\n\/\/ Function to encrypt the message with the given key \nstring encryptMessage(string str, int key) \n{ \n string encrypted = \"\"; \n\n for (int i = 0; i < str.length(); i++) { \n \/\/ Add the shift to the character \n char c = str[i] + key; \n\n \/\/ If c is larger than the ASCII range, \n if (c > 'z') \n \/\/ subtract it by 26 to calculate the modulus\n c = c - 26; \n encrypted += c; \n } \n\n return encrypted; \n} \n\nint main() \n{ \n string str = \"hello world\"; \n int key = 3; \n\n cout << \"Plain Text : \" << str << endl; \n cout << \"Shift pattern : \" << key << endl; \n cout << \"Cipher Text : \" << encryptMessage(str, key); \n\n return 0; \n}","instruction":"Create a C++ program for encryption using Caesar's cipher.","input":"Not applicable","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a C++ program for encryption using Caesar's cipher. \n\n### Input: Not applicable [\/INST] \n\n#include <iostream> \n#include <string> \n\nusing namespace std; \n\n\/\/ Function to encrypt the message with the given key \nstring encryptMessage(string str, int key) \n{ \n string encrypted = \"\"; \n\n for (int i = 0; i < str.length(); i++) { \n \/\/ Add the shift to the character \n char c = str[i] + key; \n\n \/\/ If c is larger than the ASCII range, \n if (c > 'z') \n \/\/ subtract it by 26 to calculate the modulus\n c = c - 26; \n encrypted += c; \n } \n\n return encrypted; \n} \n\nint main() \n{ \n string str = \"hello world\"; \n int key = 3; \n\n cout << \"Plain Text : \" << str << endl; \n cout << \"Shift pattern : \" << key << endl; \n cout << \"Cipher Text : \" << encryptMessage(str, key); \n\n return 0; \n}<\/s>"}
{"output":"# Define the pages\npages = {}\nfor page in webpages:\n pages[page[\"url\"]] = page[\"nodes\"]\n\n# Calculate page rank\nd = 0.85 # damping factor\nN = len(pages) # number of webpages\nr = [1\/N] * N # page rank values (initialized to 1\/N)\n\n# iterate until convergence\nwhile True:\n new_r = [0] * N\n for i, node in enumerate(pages):\n for neighbor in pages[node]:\n new_r[i] += r[pages[node].index(neighbor)] \/ len(pages[neighbor])\n new_r[i] *= d\n new_r[i] += (1 - d) \/ N\n if sum([abs(new_r[i] - r[i]) for i in range(N)]) < 0.001:\n break\n else:\n r = new_r\n\n# Print the results\nfor url, page_rank in zip(pages.keys(), r):\n print(url, \":\", page_rank)","instruction":"Write a Python program to calculate a PageRank score for a given set of web pages.","input":"webpages = [\n {\n \"url\": \"page1.html\",\n \"nodes\": [ \"page2.html\", \"page4.html\" ]\n },\n {\n \"url\": \"page2.html\",\n \"nodes\": [ \"page3.html\", \"page4.html\", \"page5.html\" ]\n },\n {\n \"url\": \"page3.html\",\n \"nodes\": [ \"page1.html\", \"page4.html\" ]\n },\n {\n \"url\": \"page4.html\",\n \"nodes\": [ \"page2.html\", \"page3.html\", \"page5.html\" ]\n },\n {\n \"url\": \"page5.html\",\n \"nodes\": [ \"page4.html\" ]\n }\n]","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Write a Python program to calculate a PageRank score for a given set of web pages. \n\n### Input: webpages = [\n {\n \"url\": \"page1.html\",\n \"nodes\": [ \"page2.html\", \"page4.html\" ]\n },\n {\n \"url\": \"page2.html\",\n \"nodes\": [ \"page3.html\", \"page4.html\", \"page5.html\" ]\n },\n {\n \"url\": \"page3.html\",\n \"nodes\": [ \"page1.html\", \"page4.html\" ]\n },\n {\n \"url\": \"page4.html\",\n \"nodes\": [ \"page2.html\", \"page3.html\", \"page5.html\" ]\n },\n {\n \"url\": \"page5.html\",\n \"nodes\": [ \"page4.html\" ]\n }\n] [\/INST] \n\n# Define the pages\npages = {}\nfor page in webpages:\n pages[page[\"url\"]] = page[\"nodes\"]\n\n# Calculate page rank\nd = 0.85 # damping factor\nN = len(pages) # number of webpages\nr = [1\/N] * N # page rank values (initialized to 1\/N)\n\n# iterate until convergence\nwhile True:\n new_r = [0] * N\n for i, node in enumerate(pages):\n for neighbor in pages[node]:\n new_r[i] += r[pages[node].index(neighbor)] \/ len(pages[neighbor])\n new_r[i] *= d\n new_r[i] += (1 - d) \/ N\n if sum([abs(new_r[i] - r[i]) for i in range(N)]) < 0.001:\n break\n else:\n r = new_r\n\n# Print the results\nfor url, page_rank in zip(pages.keys(), r):\n print(url, \":\", page_rank)<\/s>"}
{"output":"def distinct_characters_count(string):\n    # convert the string to a set\n    distinct_chars = set(string)\n    \n    # return the number of distinct characters\n    return len(distinct_chars)","instruction":"Create a program which receives input strings and counts the amount of distinct characters present in the string.","input":"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a program which receives input strings and counts the amount of distinct characters present in the string. \n\n### Input:  [\/INST] \n\ndef distinct_characters_count(string):\n    # convert the string to a set\n    distinct_chars = set(string)\n    \n    # return the number of distinct characters\n    return len(distinct_chars)<\/s>"}
{"output":"def find_largest_number(numbers):\n    largestNumber = 0\n    for number in numbers:\n        if number > largestNumber:\n            largestNumber = number\n    return largestNumber\n\nresult = find_largest_number([2, 4, 8, 15, 16, 23, 42])\nprint(result)","instruction":"Use the provided list of numbers to create a function to find the largest number.","input":"[2, 4, 8, 15, 16, 23, 42]","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Use the provided list of numbers to create a function to find the largest number. \n\n### Input: [2, 4, 8, 15, 16, 23, 42] [\/INST] \n\ndef find_largest_number(numbers):\n    largestNumber = 0\n    for number in numbers:\n        if number > largestNumber:\n            largestNumber = number\n    return largestNumber\n\nresult = find_largest_number([2, 4, 8, 15, 16, 23, 42])\nprint(result)<\/s>"}
{"output":"#!\/usr\/bin\/python\n\n# Modificated ShoutBox Library\n#   enables further modifications for the ShoutBox\n#   Run without to generate htmlfile\n#   Run the following to enter a new line from command line\n#     psogen.py input Anonymous default \"Text\"\n\nimport os, re\n\nimport messages, broadcast\n\ndatafilename = os.environ[\"SHOUTBOX_CHATFILE\"]\nhtmlfilename = os.environ[\"SHOUTBOX_GEN_HTMLFILE\"]\n\nstyle=(\"name { font-weight: bold; font-family:Tahoma } \"\n       \"data { font-family: Tahoma } \"\n       \"data.def { color: #000000 } \"\n       \"data.blue { color: #0000FF } \"\n       \"data.green { color: #008000 } \"\n       \"data.orange { color: #FF8040 } \"\n       \"data.red { color: #FF0000 }\")\n\ntry:\n     raw_dest =  os.environ[\"SHOUTBOX_BROADCAST_DESTINATIONS\"]\n     finished_dest = re.sub ( '#' , '\"' , raw_dest )\n     broadcast_destination = eval ( finished_dest )\nexcept KeyError:\n     broadcast_destination = False\n\n\n#--------------\n#  Generates Shoutbox-HTML-Frame  ...\n#           Imports:\n#               content    -   String  containing preformatted data\n#--------------\ndef generate_html(content):\n    htmlstring =   \"<html><head><meta http-equiv='cache-control' content='no-cache'><meta name='GENERATOR' content='PyShoutOut'><title>Shout-Out Data<\/title>\"\n    htmlstring +=  \"<style type='text\/css'>\" + style  + \"<\/style><\/head><body>\"\n    htmlstring +=  content\n    htmlstring +=  \"<\/body><\/html>\"\n    return htmlstring\n\n#--------------\n#   Generates HTML Data based on given content  and write it to static html file\n#          Imports:\n#               content    -   String  containing preformatted data\n#--------------\ndef generate_html_into_file(content):\n    htmlstring = generate_html ( content )\n\n    htmlfile = open( htmlfilename , 'w' )\n    htmlfile.write( htmlstring )\n    htmlfile.close()\n\n#--------------\n# Generates HTML Data based on datafilename 's content\n#--------------\ndef generate_html_from_file():\n    old =  read_data_file()\n    generate_html_into_file( old   )\n\n#--------------\n# Generates and Displays generated HTML\n#--------------\ndef generate_html_to_display_from_file():\n    old =  read_data_file()\n    htmlstring = generate_html ( old )\n    print htmlstring\n\n#--------------\n#  Reads Data file from datafilename given name\n#--------------\ndef read_data_file():\n    datafile = open(datafilename, 'r')\n    old = datafile.read()\n    datafile.close()\n    return old\n\n#--------------\n# Function for saving new Shoubox-Content & Regenerate static HTML file -- usually called by HTML-Form\n#--------------\ndef process_form( name , indata , color ):\n    content = save_input(  name , indata , color )\n\n    if broadcast_destination == False:\n          generate_html_into_file ( content )\n\n\n#--------------\n# Acutally Saves SB-Content to datafile\n#--------------\ndef save_input( name , indata , color ):\n\n    content = prepare_line ( name, indata, color  )\n\n    if broadcast_destination != False:\n        return writeToNetwork( content , broadcast_destination )\n    else:\n        return writeToDisk ( content )\n\ndef writeToNetwork ( content , broadcast_destination ):\n        message = messages.shoutbox_message()\n\tmessage.set(content)\n        casting = broadcast.broadcast( )\n\tcasting.setDestination(broadcast_destination)\n\tcasting.set( message.get_message() )\n\tcasting.send()\n\treturn None\n\ndef writeToDisk ( content ):\n        old = read_data_file()\n        finalcontent = content  + old\n        datafile = open(datafilename, 'r+')\n        datafile.write(finalcontent)\n        datafile.close()\n\treturn finalcontent\n\n\ndef prepare_line ( name, indata, color  ):\n    datapass = re.sub(\"<\", \"&lt;\", indata)\n    data = re.sub(\">\", \"&gt;\", datapass)\n    content = \"<name>\" + name + \":<\/name>&nbsp;&nbsp;&nbsp;<data class='\" + color + \"'>\" + data + \"<\/data><br>\\n\"\n    return content\n\n#--------------\n#  Testing or Generating static HTML File\n#--------------\nif __name__ == \"__main__\":\n  import sys\n  if sys.argv.count(\"input\") >= 1 :\n     save_input(  sys.argv[2] ,  sys.argv[3] ,  sys.argv[4] )\n     generate_html_to_display_from_file()\n     print \"Entered Text.\"\n\n  generate_html_from_file ()\n  print \"Generated HTML-Shoutbox File.\"\n\n\n\n","instruction":"The given code is a modified ShoutBox library that enables further modifications for the ShoutBox. To generate an HTML file, run the code without any arguments. To enter a new line from the command line, run \"psogen.py input Anonymous default 'Text'\". The code contains functions to generate and write HTML data to a static HTML file, read data from a file, save new ShoutBox content, and prepare a line of content. To test or generate a static HTML file, run the code with the \"__name__\" variable set to \"__main__\".","input":"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: The given code is a modified ShoutBox library that enables further modifications for the ShoutBox. To generate an HTML file, run the code without any arguments. To enter a new line from the command line, run \"psogen.py input Anonymous default 'Text'\". The code contains functions to generate and write HTML data to a static HTML file, read data from a file, save new ShoutBox content, and prepare a line of content. To test or generate a static HTML file, run the code with the \"__name__\" variable set to \"__main__\". \n\n### Input:  [\/INST] \n\n#!\/usr\/bin\/python\n\n# Modificated ShoutBox Library\n#   enables further modifications for the ShoutBox\n#   Run without to generate htmlfile\n#   Run the following to enter a new line from command line\n#     psogen.py input Anonymous default \"Text\"\n\nimport os, re\n\nimport messages, broadcast\n\ndatafilename = os.environ[\"SHOUTBOX_CHATFILE\"]\nhtmlfilename = os.environ[\"SHOUTBOX_GEN_HTMLFILE\"]\n\nstyle=(\"name { font-weight: bold; font-family:Tahoma } \"\n       \"data { font-family: Tahoma } \"\n       \"data.def { color: #000000 } \"\n       \"data.blue { color: #0000FF } \"\n       \"data.green { color: #008000 } \"\n       \"data.orange { color: #FF8040 } \"\n       \"data.red { color: #FF0000 }\")\n\ntry:\n     raw_dest =  os.environ[\"SHOUTBOX_BROADCAST_DESTINATIONS\"]\n     finished_dest = re.sub ( '#' , '\"' , raw_dest )\n     broadcast_destination = eval ( finished_dest )\nexcept KeyError:\n     broadcast_destination = False\n\n\n#--------------\n#  Generates Shoutbox-HTML-Frame  ...\n#           Imports:\n#               content    -   String  containing preformatted data\n#--------------\ndef generate_html(content):\n    htmlstring =   \"<html><head><meta http-equiv='cache-control' content='no-cache'><meta name='GENERATOR' content='PyShoutOut'><title>Shout-Out Data<\/title>\"\n    htmlstring +=  \"<style type='text\/css'>\" + style  + \"<\/style><\/head><body>\"\n    htmlstring +=  content\n    htmlstring +=  \"<\/body><\/html>\"\n    return htmlstring\n\n#--------------\n#   Generates HTML Data based on given content  and write it to static html file\n#          Imports:\n#               content    -   String  containing preformatted data\n#--------------\ndef generate_html_into_file(content):\n    htmlstring = generate_html ( content )\n\n    htmlfile = open( htmlfilename , 'w' )\n    htmlfile.write( htmlstring )\n    htmlfile.close()\n\n#--------------\n# Generates HTML Data based on datafilename 's content\n#--------------\ndef generate_html_from_file():\n    old =  read_data_file()\n    generate_html_into_file( old   )\n\n#--------------\n# Generates and Displays generated HTML\n#--------------\ndef generate_html_to_display_from_file():\n    old =  read_data_file()\n    htmlstring = generate_html ( old )\n    print htmlstring\n\n#--------------\n#  Reads Data file from datafilename given name\n#--------------\ndef read_data_file():\n    datafile = open(datafilename, 'r')\n    old = datafile.read()\n    datafile.close()\n    return old\n\n#--------------\n# Function for saving new Shoubox-Content & Regenerate static HTML file -- usually called by HTML-Form\n#--------------\ndef process_form( name , indata , color ):\n    content = save_input(  name , indata , color )\n\n    if broadcast_destination == False:\n          generate_html_into_file ( content )\n\n\n#--------------\n# Acutally Saves SB-Content to datafile\n#--------------\ndef save_input( name , indata , color ):\n\n    content = prepare_line ( name, indata, color  )\n\n    if broadcast_destination != False:\n        return writeToNetwork( content , broadcast_destination )\n    else:\n        return writeToDisk ( content )\n\ndef writeToNetwork ( content , broadcast_destination ):\n        message = messages.shoutbox_message()\n\tmessage.set(content)\n        casting = broadcast.broadcast( )\n\tcasting.setDestination(broadcast_destination)\n\tcasting.set( message.get_message() )\n\tcasting.send()\n\treturn None\n\ndef writeToDisk ( content ):\n        old = read_data_file()\n        finalcontent = content  + old\n        datafile = open(datafilename, 'r+')\n        datafile.write(finalcontent)\n        datafile.close()\n\treturn finalcontent\n\n\ndef prepare_line ( name, indata, color  ):\n    datapass = re.sub(\"<\", \"&lt;\", indata)\n    data = re.sub(\">\", \"&gt;\", datapass)\n    content = \"<name>\" + name + \":<\/name>&nbsp;&nbsp;&nbsp;<data class='\" + color + \"'>\" + data + \"<\/data><br>\\n\"\n    return content\n\n#--------------\n#  Testing or Generating static HTML File\n#--------------\nif __name__ == \"__main__\":\n  import sys\n  if sys.argv.count(\"input\") >= 1 :\n     save_input(  sys.argv[2] ,  sys.argv[3] ,  sys.argv[4] )\n     generate_html_to_display_from_file()\n     print \"Entered Text.\"\n\n  generate_html_from_file ()\n  print \"Generated HTML-Shoutbox File.\"\n\n\n\n<\/s>"}
{"output":"import numpy as np\n\nfrom keras.datasets import imdb\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n# Load Dataset\n(X_train, y_train), (X_test, y_test) = imdb.load_data()\n\n# Preprocess the data\nmax_words = 10000\nX_train = sequence.pad_sequences(X_train, maxlen=max_words)\nX_test = sequence.pad_sequences(X_test, maxlen=max_words)\n\n# Create Model\nmodel = Sequential()\nmodel.add(Dense(100, activation=\"relu\", input_shape=(max_words,)))\nmodel.add(Dense(1, activation=\"sigmoid\"))\nmodel.compile(optimizer=\"adam\", loss=\"binary_crossentropy\", metrics=[\"accuracy\"])\n\n# Train Model\nmodel.fit(X_train, y_train, epochs=3, validation_data=(X_test, y_test))","instruction":"Create a neural network model to predict whether a movie review is positive or negative.","input":"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a neural network model to predict whether a movie review is positive or negative. \n\n### Input:  [\/INST] \n\nimport numpy as np\n\nfrom keras.datasets import imdb\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n# Load Dataset\n(X_train, y_train), (X_test, y_test) = imdb.load_data()\n\n# Preprocess the data\nmax_words = 10000\nX_train = sequence.pad_sequences(X_train, maxlen=max_words)\nX_test = sequence.pad_sequences(X_test, maxlen=max_words)\n\n# Create Model\nmodel = Sequential()\nmodel.add(Dense(100, activation=\"relu\", input_shape=(max_words,)))\nmodel.add(Dense(1, activation=\"sigmoid\"))\nmodel.compile(optimizer=\"adam\", loss=\"binary_crossentropy\", metrics=[\"accuracy\"])\n\n# Train Model\nmodel.fit(X_train, y_train, epochs=3, validation_data=(X_test, y_test))<\/s>"}
{"output":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n# Define the model\nmodel = Sequential()\nmodel.add(Dense(8, input_dim=6, activation='relu'))\nmodel.add(Dense(4, activation='softmax'))\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","instruction":"Create a neural network with two layers using Keras, a Python library for deep learning.","input":"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a neural network with two layers using Keras, a Python library for deep learning. \n\n### Input:  [\/INST] \n\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n# Define the model\nmodel = Sequential()\nmodel.add(Dense(8, input_dim=6, activation='relu'))\nmodel.add(Dense(4, activation='softmax'))\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])<\/s>"}
