{"output":"const calculateTotalCost = (items: { item: string, price: number }[]) => {\n let total = 0;\n items.forEach(item => {\n total += item.price;\n });\n return total;\n};\n\nconst orderItems = [\n { item: \"Oven\", price: 49.99 },\n { item: \"Stove\", price: 79.99 },\n { item: \"Dishwasher\", price: 399.99 },\n];\n\nconsole.log(calculateTotalCost(orderItems)); \/\/ 529.97","instruction":"Create a TypeScript function to calculate the total cost of an order given the items in the order and their respective prices.","input":"Order items - [{\"item\": \"Oven\", \"price\": 49.99}, {\"item\": \"Stove\", \"price\": 79.99}, {\"item\": \"Dishwasher\", \"price\": 399.99}]","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a TypeScript function to calculate the total cost of an order given the items in the order and their respective prices. \n\n### Input: Order items - [{\"item\": \"Oven\", \"price\": 49.99}, {\"item\": \"Stove\", \"price\": 79.99}, {\"item\": \"Dishwasher\", \"price\": 399.99}] [\/INST] \n\nconst calculateTotalCost = (items: { item: string, price: number }[]) => {\n let total = 0;\n items.forEach(item => {\n total += item.price;\n });\n return total;\n};\n\nconst orderItems = [\n { item: \"Oven\", price: 49.99 },\n { item: \"Stove\", price: 79.99 },\n { item: \"Dishwasher\", price: 399.99 },\n];\n\nconsole.log(calculateTotalCost(orderItems)); \/\/ 529.97<\/s>"}
{"output":"import React from 'react';\nimport '.\/App.css';\n\nconst App = () => { \n const post = { \n  title: 'My First Blog Post', \n  content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.', \n  author: { \n   name: 'John Doe', \n   profile_picture: 'https:\/\/example.com\/img\/john_doe_profile.jpg' \n  } \n }; \n\n return ( \n  <div className=\"App\"> \n   <h1>{post.title}<\/h1> \n   <p>{post.content}<\/p> \n   <div className=\"author-profile\"> \n    <img src={post.author.profile_picture} alt={post.author.name} \/> \n    <p>{post.author.name}<\/p> \n   <\/div> \n  <\/div> \n ); \n}\n\nexport default App;","instruction":"Create a React application to display a blog post with the author profile.","input":"The post has the following fields: Title, Content, Author (the author name and their profile picture).","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a React application to display a blog post with the author profile. \n\n### Input: The post has the following fields: Title, Content, Author (the author name and their profile picture). [\/INST] \n\nimport React from 'react';\nimport '.\/App.css';\n\nconst App = () => { \n const post = { \n  title: 'My First Blog Post', \n  content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.', \n  author: { \n   name: 'John Doe', \n   profile_picture: 'https:\/\/example.com\/img\/john_doe_profile.jpg' \n  } \n }; \n\n return ( \n  <div className=\"App\"> \n   <h1>{post.title}<\/h1> \n   <p>{post.content}<\/p> \n   <div className=\"author-profile\"> \n    <img src={post.author.profile_picture} alt={post.author.name} \/> \n    <p>{post.author.name}<\/p> \n   <\/div> \n  <\/div> \n ); \n}\n\nexport default App;<\/s>"}
{"output":"def get_domain_name(url): \n    return url.split(\"\/\")[2]\n\nprint(get_domain_name(\"https:\/\/www.google.com\"))  # prints www.google.com","instruction":"Given an URL as a string, write a program in Python to find the domain name.","input":"url = \"https:\/\/www.google.com\"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Given an URL as a string, write a program in Python to find the domain name. \n\n### Input: url = \"https:\/\/www.google.com\" [\/INST] \n\ndef get_domain_name(url): \n    return url.split(\"\/\")[2]\n\nprint(get_domain_name(\"https:\/\/www.google.com\"))  # prints www.google.com<\/s>"}
{"output":"def lcs(str1, str2): \n    n = len(str1) \n    m = len(str2) \n    if n == 0 or m == 0: \n       return 0; \n    elif str1[n-1] == str2[m-1]: \n        return 1 + lcs(str1[0:n-1],str2[0:m-1]); \n    else: \n        return max(lcs(str1[0:n-1], str2[0:m]), lcs(str1[0:n], str2[0:m-1]));","instruction":"Generate an algorithm to find the length of the longest common subsequence","input":"Two strings","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Generate an algorithm to find the length of the longest common subsequence \n\n### Input: Two strings [\/INST] \n\ndef lcs(str1, str2): \n    n = len(str1) \n    m = len(str2) \n    if n == 0 or m == 0: \n       return 0; \n    elif str1[n-1] == str2[m-1]: \n        return 1 + lcs(str1[0:n-1],str2[0:m-1]); \n    else: \n        return max(lcs(str1[0:n-1], str2[0:m]), lcs(str1[0:n], str2[0:m-1]));<\/s>"}
{"output":"import React, { useState } from 'react';\n\nconst App = () => {\n const [data, setData] = useState([]); \n\n const addData = (value) => {\n  \/\/ code to add new data entry to the array\n  setData([...data, value]);\n };\n\nconst updateData = (index, value) => {\n \/\/ code to update existing data entry\n const newData = [...data];\n newData[index] = value;\n setData(newData);\n};\n\n\/\/ code for rendering components\n \n return (\n  <div>\n   <DataViewer data={data} \/>\n   <DataAdder addData={addData} \/>\n   <DataEditor updateData={updateData} \/>\n  <\/div>\n )\n};\nexport default App;","instruction":"Create a React application for displaying patient health data. The application should include components for viewing patient records, adding new data, and updating existing data.","input":"Not applicable","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a React application for displaying patient health data. The application should include components for viewing patient records, adding new data, and updating existing data. \n\n### Input: Not applicable [\/INST] \n\nimport React, { useState } from 'react';\n\nconst App = () => {\n const [data, setData] = useState([]); \n\n const addData = (value) => {\n  \/\/ code to add new data entry to the array\n  setData([...data, value]);\n };\n\nconst updateData = (index, value) => {\n \/\/ code to update existing data entry\n const newData = [...data];\n newData[index] = value;\n setData(newData);\n};\n\n\/\/ code for rendering components\n \n return (\n  <div>\n   <DataViewer data={data} \/>\n   <DataAdder addData={addData} \/>\n   <DataEditor updateData={updateData} \/>\n  <\/div>\n )\n};\nexport default App;<\/s>"}
{"output":"import numpy as np\nimport tensorflow as tf\n\n# Construct the input and output datasets\nX = np.array([[20, 60, 7], [20, 56, 8], [21, 65, 7], [22, 55, 8], [23, 62, 10]])\nY = np.array([500, 440, 550, 450, 500])\n\n# Define the model\nmodel = tf.keras.Sequential([\n tf.keras.layers.Dense(units=1, input_shape=[3])\n])\n\nmodel.compile(optimizer='sgd', loss='mean_squared_error', metrics=['accuracy'])\n\n# Train the model\nmodel.fit(X, Y, epochs=100)\n\n# Predict the output\ninput = np.array([21, 65, 8]).reshape([1, 3])\nprediction = model.predict(input)\n\nprint(prediction)","instruction":"Create a Linear Regression model using TensorFlow 2.0 that can accurately predict how many people are likely to visit a restaurant given data on average temperature, average humidity, and average wind speed.","input":"Temperature (\u2018Temp\u2019): 20, 20, 21, 22, 23\nHumidity (\u2018Humidity\u2019): 60, 56, 65, 55, 62\nWind Speed (\u2018Wind\u2019): 7, 8, 7, 8, 10\nNumber of Visitors (\u2018Visitors\u2019): 500, 440, 550, 450, 500","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a Linear Regression model using TensorFlow 2.0 that can accurately predict how many people are likely to visit a restaurant given data on average temperature, average humidity, and average wind speed. \n\n### Input: Temperature (\u2018Temp\u2019): 20, 20, 21, 22, 23\nHumidity (\u2018Humidity\u2019): 60, 56, 65, 55, 62\nWind Speed (\u2018Wind\u2019): 7, 8, 7, 8, 10\nNumber of Visitors (\u2018Visitors\u2019): 500, 440, 550, 450, 500 [\/INST] \n\nimport numpy as np\nimport tensorflow as tf\n\n# Construct the input and output datasets\nX = np.array([[20, 60, 7], [20, 56, 8], [21, 65, 7], [22, 55, 8], [23, 62, 10]])\nY = np.array([500, 440, 550, 450, 500])\n\n# Define the model\nmodel = tf.keras.Sequential([\n tf.keras.layers.Dense(units=1, input_shape=[3])\n])\n\nmodel.compile(optimizer='sgd', loss='mean_squared_error', metrics=['accuracy'])\n\n# Train the model\nmodel.fit(X, Y, epochs=100)\n\n# Predict the output\ninput = np.array([21, 65, 8]).reshape([1, 3])\nprediction = model.predict(input)\n\nprint(prediction)<\/s>"}
{"output":"price = 45\n\nif price > 50:\n print(\"Expensive\")\nelse:\n print(\"Cheap\")","instruction":"Convert the following pseudocode to a program in Python:\n\nIf price > 50\n  Print \"Expensive\"\nElse\n  Print \"Cheap\"","input":"Not applicable","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Convert the following pseudocode to a program in Python:\n\nIf price > 50\n  Print \"Expensive\"\nElse\n  Print \"Cheap\" \n\n### Input: Not applicable [\/INST] \n\nprice = 45\n\nif price > 50:\n print(\"Expensive\")\nelse:\n print(\"Cheap\")<\/s>"}
{"output":".animated-text {\n    -webkit-animation: text-animation 0.6s;\n    -moz-animation: text-animation 0.6s;\n    -o-animation: text-animation 0.6s;\n    animation: text-animation 0.6s;\n    -webkit-animation-fill-mode: both;\n    -moz-animation-fill-mode: both;\n    -o-animation-fill-mode: both;\n    animation-fill-mode: both;\n}\n\n@-webkit-keyframes text-animation {\n    0% {\n        font-size: 0px;\n        opacity: 0;\n    }\n\n    100% {\n        font-size: 24px;\n        opacity: 1;\n    }\n}\n\n@-moz-keyframes text-animation {\n    0% {\n        font-Size: 0px;\n        opacity: 0;\n    }\n\n    100% {\n        font-size: 24px;\n        opacity: 1;\n    }\n}\n\n@-o-keyframes text-animation {\n    0% {\n        font-size: 0px;\n        opacity: 0;\n    }\n\n    100% {\n        font-size: 24px;\n        opacity: 1;\n    }\n}\n\n@keyframes text-animation {\n    0% {\n        font-size: 0px;\n        opacity: 0;\n    }\n\n    100% {\n        font-size: 24px;\n        opacity: 1;\n    }\n}","instruction":"Create a CSS library to animate the text given an event.","input":"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a CSS library to animate the text given an event. \n\n### Input:  [\/INST] \n\n.animated-text {\n    -webkit-animation: text-animation 0.6s;\n    -moz-animation: text-animation 0.6s;\n    -o-animation: text-animation 0.6s;\n    animation: text-animation 0.6s;\n    -webkit-animation-fill-mode: both;\n    -moz-animation-fill-mode: both;\n    -o-animation-fill-mode: both;\n    animation-fill-mode: both;\n}\n\n@-webkit-keyframes text-animation {\n    0% {\n        font-size: 0px;\n        opacity: 0;\n    }\n\n    100% {\n        font-size: 24px;\n        opacity: 1;\n    }\n}\n\n@-moz-keyframes text-animation {\n    0% {\n        font-Size: 0px;\n        opacity: 0;\n    }\n\n    100% {\n        font-size: 24px;\n        opacity: 1;\n    }\n}\n\n@-o-keyframes text-animation {\n    0% {\n        font-size: 0px;\n        opacity: 0;\n    }\n\n    100% {\n        font-size: 24px;\n        opacity: 1;\n    }\n}\n\n@keyframes text-animation {\n    0% {\n        font-size: 0px;\n        opacity: 0;\n    }\n\n    100% {\n        font-size: 24px;\n        opacity: 1;\n    }\n}<\/s>"}
{"output":"import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nimport Home from '.\/pages\/Home';\nimport About from '.\/pages\/About';\nimport Contact from '.\/pages\/Contact';\n\nfunction App() {\n  return (\n    <Router>\n      <ul>\n        <li><Link to=\"\/\">Home<\/Link><\/li>\n        <li><Link to=\"\/about\">About<\/Link><\/li>\n        <li><Link to=\"\/contact\">Contact<\/Link><\/li>\n      <\/ul>\n\n      <Switch>\n        <Route exact path=\"\/\">\n          <Home \/>\n        <\/Route>\n        <Route path=\"\/about\">\n          <About \/>\n        <\/Route>\n        <Route path=\"\/contact\">\n          <Contact \/>\n        <\/Route>\n      <\/Switch>\n    <\/Router>\n  );\n}\n\nexport default App;","instruction":"Create a React application with basic routing. The application should include endpoints for a home, about, and contact page.","input":"Not applicable","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a React application with basic routing. The application should include endpoints for a home, about, and contact page. \n\n### Input: Not applicable [\/INST] \n\nimport React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nimport Home from '.\/pages\/Home';\nimport About from '.\/pages\/About';\nimport Contact from '.\/pages\/Contact';\n\nfunction App() {\n  return (\n    <Router>\n      <ul>\n        <li><Link to=\"\/\">Home<\/Link><\/li>\n        <li><Link to=\"\/about\">About<\/Link><\/li>\n        <li><Link to=\"\/contact\">Contact<\/Link><\/li>\n      <\/ul>\n\n      <Switch>\n        <Route exact path=\"\/\">\n          <Home \/>\n        <\/Route>\n        <Route path=\"\/about\">\n          <About \/>\n        <\/Route>\n        <Route path=\"\/contact\">\n          <Contact \/>\n        <\/Route>\n      <\/Switch>\n    <\/Router>\n  );\n}\n\nexport default App;<\/s>"}
{"output":"import nltk\nimport re\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ndef classify_tweet(text):\n tokenized_text = nltk.word_tokenize(text)\n tag = nltk.pos_tag(tokenized_text)\n lemmatizer = nltk.WordNetLemmatizer()\n lemmas = [lemmatizer.lemmatize(word) for word, tag in tag]\n\n sentiment_analyzer = SentimentIntensityAnalyzer()\n sentiment = sentiment_analyzer.polarity_scores(' '.join(lemmas))\n\nif sentiment['compound'] < 0:\n print('Negative')\nelif sentiment['compound'] > 0:\n print('Positive')\nelse:\n print('Neutral')\n\nclassify_tweet(\"I am really enjoying this course!\")\n# Output: Positive","instruction":"Given a tweet text, write a Python program to classify the tweet as either positive or negative.","input":"Tweet example: \"I am really enjoying this course!\"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Given a tweet text, write a Python program to classify the tweet as either positive or negative. \n\n### Input: Tweet example: \"I am really enjoying this course!\" [\/INST] \n\nimport nltk\nimport re\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ndef classify_tweet(text):\n tokenized_text = nltk.word_tokenize(text)\n tag = nltk.pos_tag(tokenized_text)\n lemmatizer = nltk.WordNetLemmatizer()\n lemmas = [lemmatizer.lemmatize(word) for word, tag in tag]\n\n sentiment_analyzer = SentimentIntensityAnalyzer()\n sentiment = sentiment_analyzer.polarity_scores(' '.join(lemmas))\n\nif sentiment['compound'] < 0:\n print('Negative')\nelif sentiment['compound'] > 0:\n print('Positive')\nelse:\n print('Neutral')\n\nclassify_tweet(\"I am really enjoying this course!\")\n# Output: Positive<\/s>"}
{"output":"def average_list_items(list_items):\n  list_length = len(list_items)\n  list_sum = sum(list_items)\n  average = list_sum\/list_length\n  return average","instruction":"Using the input, write a Python function to calculate the average number of items in the list.","input":"list_items = [1, 3, 5, 7, 8, 10]","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Using the input, write a Python function to calculate the average number of items in the list. \n\n### Input: list_items = [1, 3, 5, 7, 8, 10] [\/INST] \n\ndef average_list_items(list_items):\n  list_length = len(list_items)\n  list_sum = sum(list_items)\n  average = list_sum\/list_length\n  return average<\/s>"}
{"output":"def comb_sort(arr):\n    gap = len(arr)\n    swapped = True\n\n    while gap > 1 or swapped is True:\n        gap = max(1, int(gap\/1.3))\n        swapped = False\n        \n        for i in range(len(arr)-gap):\n            if arr[i] > arr[i+gap]:\n                arr[i], arr[i+gap] = arr[i+gap], arr[i]\n                swapped = True","instruction":"Optimise a given algorithm to improve its time complexity","input":"def comb_sort(arr):\n    gap = len(arr)\n    swapped = True\n\n    while gap > 1 or swapped is True:\n        gap = max(1, int(gap\/1.25))\n        swapped = False\n        \n        for i in range(len(arr)-gap):\n            if arr[i] > arr[i+gap]:\n                arr[i], arr[i+gap] = arr[i+gap], arr[i]\n                swapped = True","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Optimise a given algorithm to improve its time complexity \n\n### Input: def comb_sort(arr):\n    gap = len(arr)\n    swapped = True\n\n    while gap > 1 or swapped is True:\n        gap = max(1, int(gap\/1.25))\n        swapped = False\n        \n        for i in range(len(arr)-gap):\n            if arr[i] > arr[i+gap]:\n                arr[i], arr[i+gap] = arr[i+gap], arr[i]\n                swapped = True [\/INST] \n\ndef comb_sort(arr):\n    gap = len(arr)\n    swapped = True\n\n    while gap > 1 or swapped is True:\n        gap = max(1, int(gap\/1.3))\n        swapped = False\n        \n        for i in range(len(arr)-gap):\n            if arr[i] > arr[i+gap]:\n                arr[i], arr[i+gap] = arr[i+gap], arr[i]\n                swapped = True<\/s>"}
{"output":"#include<stdio.h>\nint main(){\n int n;\n printf(\"Enter the number: \");\n scanf(\"%d\", &n);\n for(int i=1; i<=n; i+=3){\n  printf(\"%d\\n\", i);\n }\n return 0;\n}","instruction":"Create a program that prints multiples of 3 up to a number N specified by the user.","input":"N = 10","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Create a program that prints multiples of 3 up to a number N specified by the user. \n\n### Input: N = 10 [\/INST] \n\n#include<stdio.h>\nint main(){\n int n;\n printf(\"Enter the number: \");\n scanf(\"%d\", &n);\n for(int i=1; i<=n; i+=3){\n  printf(\"%d\\n\", i);\n }\n return 0;\n}<\/s>"}
{"output":"dictionary = {\"key\": \"value\"}\nvalue = dictionary[\"key\"]","instruction":"What is the smallest possible code in Python to read the value of an item in a given dictionary?","input":"{\"key\": \"value\"}","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: What is the smallest possible code in Python to read the value of an item in a given dictionary? \n\n### Input: {\"key\": \"value\"} [\/INST] \n\ndictionary = {\"key\": \"value\"}\nvalue = dictionary[\"key\"]<\/s>"}
{"output":"def classify_emails(emails):\n  result = []\n  for email in emails:\n    words = email.split()\n    spam_words = [\"buy\", \"discount\", \"offer\", \"urgent\", \"free\"]\n    if any(word in words for word in spam_words):\n      result.append(\"spam\")\n    else:\n      result.append(\"not spam\")\n  return result","instruction":"Construct an algorithm to classify emails into two categories: spam or not.","input":"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Construct an algorithm to classify emails into two categories: spam or not. \n\n### Input:  [\/INST] \n\ndef classify_emails(emails):\n  result = []\n  for email in emails:\n    words = email.split()\n    spam_words = [\"buy\", \"discount\", \"offer\", \"urgent\", \"free\"]\n    if any(word in words for word in spam_words):\n      result.append(\"spam\")\n    else:\n      result.append(\"not spam\")\n  return result<\/s>"}
{"output":"from math import sqrt\n\ndef euclidean_distance(p1, p2):\n    '''Calculates the euclidean distance between two points'''\n    x_sq = (p1[0] - p2[0]) ** 2\n    y_sq = (p1[1] - p2[1]) ** 2\n    return sqrt(x_sq + y_sq)\n\ndef assign_cluster(points, centroids):\n    '''Assign points to clusters and return the assigned clusters'''\n    clusters = []\n    for point in points:\n        distances = [euclidean_distance(point, centroid) for centroid in centroids]\n        min_dist_index = distances.index(min(distances))\n        clusters.append(min_dist_index)\n    return clusters\n\ndef calculate_centroid(points, clusters):\n    '''Calculate the new centroids for each cluster'''\n    num_clusters = len(set(clusters))\n    new_centroids = []\n    for i in range(num_clusters):\n        x_sum, y_sum = 0, 0\n        cluster_points = [points[j] for j, cl in enumerate(clusters) if cl == i]\n        for point in cluster_points:\n            x_sum += point[0]\n            y_sum += point[1]\n        new_centroid = (x_sum \/ len(cluster_points), y_sum \/ len(cluster_points))\n        new_centroids.append(new_centroid)\n    return new_centroids\n\ndef k_means_clustering(points, k):\n    \"\"\"Perform the K-means clustering algorithm\"\"\"\n    # Initialize the centroids by randomly selecting points from the data set\n    centroids = [points[i] for i in range(k)]\n\n    # Iterate until the clusters converge\n    while True:\n        clusters = assign_cluster(points, centroids)\n\n        # If the clusters do not change, the algorithm has converged\n        if clusters == assign_cluster(points, centroids): \n            break \n        \n        # Calculate the new centroids\n        centroids = calculate_centroid(points, clusters)\n        \n    return clusters\n\n# Test the algorithm\npoints = [{x: 6, y: 7}, {x: 5, y: 4}, {x: 8, y: 2}, {x: 9, y: 3}, {x: 3, y: 5}, ]\ncluster_assignments = k_means_clustering(points, k=2)","instruction":"Generate a Python program that implements the K-Means algorithm for clustering.","input":"Input:\n- Points = [{x: 6, y: 7}, {x: 5, y: 4}, {x: 8, y: 2}, {x: 9, y: 3}, {x: 3, y: 5}, ] \n- K = 2","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Generate a Python program that implements the K-Means algorithm for clustering. \n\n### Input: Input:\n- Points = [{x: 6, y: 7}, {x: 5, y: 4}, {x: 8, y: 2}, {x: 9, y: 3}, {x: 3, y: 5}, ] \n- K = 2 [\/INST] \n\nfrom math import sqrt\n\ndef euclidean_distance(p1, p2):\n    '''Calculates the euclidean distance between two points'''\n    x_sq = (p1[0] - p2[0]) ** 2\n    y_sq = (p1[1] - p2[1]) ** 2\n    return sqrt(x_sq + y_sq)\n\ndef assign_cluster(points, centroids):\n    '''Assign points to clusters and return the assigned clusters'''\n    clusters = []\n    for point in points:\n        distances = [euclidean_distance(point, centroid) for centroid in centroids]\n        min_dist_index = distances.index(min(distances))\n        clusters.append(min_dist_index)\n    return clusters\n\ndef calculate_centroid(points, clusters):\n    '''Calculate the new centroids for each cluster'''\n    num_clusters = len(set(clusters))\n    new_centroids = []\n    for i in range(num_clusters):\n        x_sum, y_sum = 0, 0\n        cluster_points = [points[j] for j, cl in enumerate(clusters) if cl == i]\n        for point in cluster_points:\n            x_sum += point[0]\n            y_sum += point[1]\n        new_centroid = (x_sum \/ len(cluster_points), y_sum \/ len(cluster_points))\n        new_centroids.append(new_centroid)\n    return new_centroids\n\ndef k_means_clustering(points, k):\n    \"\"\"Perform the K-means clustering algorithm\"\"\"\n    # Initialize the centroids by randomly selecting points from the data set\n    centroids = [points[i] for i in range(k)]\n\n    # Iterate until the clusters converge\n    while True:\n        clusters = assign_cluster(points, centroids)\n\n        # If the clusters do not change, the algorithm has converged\n        if clusters == assign_cluster(points, centroids): \n            break \n        \n        # Calculate the new centroids\n        centroids = calculate_centroid(points, clusters)\n        \n    return clusters\n\n# Test the algorithm\npoints = [{x: 6, y: 7}, {x: 5, y: 4}, {x: 8, y: 2}, {x: 9, y: 3}, {x: 3, y: 5}, ]\ncluster_assignments = k_means_clustering(points, k=2)<\/s>"}
{"output":"def prime_sum(n)\n  # return 0 if n is less than 2\n  return 0 if n < 2\n  \n  # create an array of numbers from 2 to n\n  nums = (2..n).to_a\n  \n  # loop through the array and mark all non-prime numbers\n  (2..Math.sqrt(n)).each do |i|\n    nums.delete_if { |j| j % i == 0 }\n  end\n  \n  # return the sum of all remaining prime numbers\n  nums.inject(:+)\nend","instruction":"Write a Ruby method to calculate the sum of the prime numbers between 1 and n (inclusive).","input":"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Write a Ruby method to calculate the sum of the prime numbers between 1 and n (inclusive). \n\n### Input:  [\/INST] \n\ndef prime_sum(n)\n  # return 0 if n is less than 2\n  return 0 if n < 2\n  \n  # create an array of numbers from 2 to n\n  nums = (2..n).to_a\n  \n  # loop through the array and mark all non-prime numbers\n  (2..Math.sqrt(n)).each do |i|\n    nums.delete_if { |j| j % i == 0 }\n  end\n  \n  # return the sum of all remaining prime numbers\n  nums.inject(:+)\nend<\/s>"}
{"output":"Verb, VBG.","instruction":"Tag the word in the following sentence as a part of speech.","input":"Word: sleeping\nSentence: He was sleeping when the alarm went off.","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Tag the word in the following sentence as a part of speech. \n\n### Input: Word: sleeping\nSentence: He was sleeping when the alarm went off. [\/INST] \n\nVerb, VBG.<\/s>"}
{"output":"import datetime \n\nstart_date = datetime.date(2020, 1, 1)\nend_date = datetime.date(2020, 1, 8)\ndelta = end_date - start_date\n\ndate_list = []\nfor i in range(delta.days + 1):\n    day = start_date + datetime.timedelta(days=i)\n    date_list.append(day.strftime('%Y-%m-%d'))\n\nprint(date_list) # Output: ['2020-01-01', '2020-01-02', '2020-01-03', '2020-01-04', '2020-01-05', '2020-01-06', '2020-01-07', '2020-01-08']","instruction":"Develop a Python program to generate a date sequence between two given dates.","input":"start_date = \"2020-01-01\"\n end_date = \"2020-01-08\"","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Develop a Python program to generate a date sequence between two given dates. \n\n### Input: start_date = \"2020-01-01\"\n end_date = \"2020-01-08\" [\/INST] \n\nimport datetime \n\nstart_date = datetime.date(2020, 1, 1)\nend_date = datetime.date(2020, 1, 8)\ndelta = end_date - start_date\n\ndate_list = []\nfor i in range(delta.days + 1):\n    day = start_date + datetime.timedelta(days=i)\n    date_list.append(day.strftime('%Y-%m-%d'))\n\nprint(date_list) # Output: ['2020-01-01', '2020-01-02', '2020-01-03', '2020-01-04', '2020-01-05', '2020-01-06', '2020-01-07', '2020-01-08']<\/s>"}
{"output":"def gcd(m, n): \n    if m == 0 : \n        return n \n    return gcd(n%m, m) \n  \n  \nm = 8 ; n = 12\ngcd = gcd(m,n) \nprint (\"GCD is: \"+str(gcd))","instruction":"Calculate the greatest common divisor (GCD) of two integers using the Euclidean Algorithm.","input":"m = 8, n = 12","text":"<s>[INST] Below is an instruction that describes a task. Write a response that appropriately completes the request. \n\n### Instruction: Calculate the greatest common divisor (GCD) of two integers using the Euclidean Algorithm. \n\n### Input: m = 8, n = 12 [\/INST] \n\ndef gcd(m, n): \n    if m == 0 : \n        return n \n    return gcd(n%m, m) \n  \n  \nm = 8 ; n = 12\ngcd = gcd(m,n) \nprint (\"GCD is: \"+str(gcd))<\/s>"}
